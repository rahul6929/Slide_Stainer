
Slide_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000005f0  00000684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  0080020c  0080020c  00000690  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ef  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001071  00000000  00000000  00002b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e67  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00004a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000901  00000000  00000000  00004d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d6a  00000000  00000000  00005675  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000063df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	86 c1       	rjmp	.+780    	; 0x35e <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	06 c1       	rjmp	.+524    	; 0x272 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	65 c0       	rjmp	.+202    	; 0x198 <__vector_51>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ef       	ldi	r30, 0xF0	; 240
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 35       	cpi	r26, 0x5C	; 92
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	65 c2       	rjmp	.+1226   	; 0x5ec <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
int main(void)
{
	//uint8_t OneTimeRunFunFlag=0;
	uint16_t i = 0;
	float stepdelay;
	USART2_Init(MYUBRR);
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0f d2       	rcall	.+1054   	; 0x548 <USART2_Init>
	USART0_Init(MYUBRR);
 12a:	87 e6       	ldi	r24, 0x67	; 103
 12c:	90 e0       	ldi	r25, 0x00	; 0
	GpioPinInit();
 12e:	eb d1       	rcall	.+982    	; 0x506 <USART0_Init>
	USART0_transmitstring("page Main");
 130:	99 d1       	rcall	.+818    	; 0x464 <GpioPinInit>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	92 e0       	ldi	r25, 0x02	; 2
	Send_FF_to_Display();
 136:	fa d1       	rcall	.+1012   	; 0x52c <USART0_transmitstring>
 138:	2a d2       	rcall	.+1108   	; 0x58e <Send_FF_to_Display>
	if (EEPROM_Read2Bytes(P4_REG_E_WAIT_TIME_ADD)==0xFFFF)
 13a:	8e e5       	ldi	r24, 0x5E	; 94
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	5c d1       	rcall	.+696    	; 0x3f8 <EEPROM_Read2Bytes>
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	09 f4       	brne	.+2      	; 0x146 <main+0x22>
		EEPROM_DisplayDataInit();
 144:	2b d2       	rcall	.+1110   	; 0x59c <EEPROM_DisplayDataInit>
 146:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	97 ea       	ldi	r25, 0xA7	; 167
 14a:	21 e6       	ldi	r18, 0x61	; 97
 14c:	81 50       	subi	r24, 0x01	; 1
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	20 40       	sbci	r18, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x28>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x32>
 156:	00 00       	nop
	_delay_ms(2000);
	GPIO_WriteToPin(&Motor_Dir, LOW	);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c e2       	ldi	r24, 0x2C	; 44
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	ae d1       	rcall	.+860    	; 0x4bc <GPIO_WriteToPin>
uint8_t OneTimeRunFunFlag=0;
uint8_t flag = 0;	
					
								
int main(void)
{
 160:	c0 e0       	ldi	r28, 0x00	; 0
	stepdelay = 100;
	while(1)
	{
		for (i=0; i<6400*5; i++)
		{
			GPIO_WriteToPin(&Motor_Steps, HIGH);
 162:	dd e7       	ldi	r29, 0x7D	; 125
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	84 e2       	ldi	r24, 0x24	; 36
 168:	92 e0       	ldi	r25, 0x02	; 2
			my_delay_us(stepdelay);
 16a:	a8 d1       	rcall	.+848    	; 0x4bc <GPIO_WriteToPin>
 16c:	84 e6       	ldi	r24, 0x64	; 100
 16e:	90 e0       	ldi	r25, 0x00	; 0
			GPIO_WriteToPin(&Motor_Steps, LOW);
 170:	28 d2       	rcall	.+1104   	; 0x5c2 <my_delay_us>
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	84 e2       	ldi	r24, 0x24	; 36
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	a1 d1       	rcall	.+834    	; 0x4bc <GPIO_WriteToPin>
			my_delay_us(stepdelay);
 17a:	84 e6       	ldi	r24, 0x64	; 100
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	21 d2       	rcall	.+1090   	; 0x5c2 <my_delay_us>
 180:	21 97       	sbiw	r28, 0x01	; 1
 182:	81 f7       	brne	.-32     	; 0x164 <main+0x40>
	_delay_ms(2000);
	GPIO_WriteToPin(&Motor_Dir, LOW	);
	stepdelay = 100;
	while(1)
	{
		for (i=0; i<6400*5; i++)
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	97 ea       	ldi	r25, 0xA7	; 167
 188:	21 e6       	ldi	r18, 0x61	; 97
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	20 40       	sbci	r18, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x66>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x70>
 194:	00 00       	nop
 196:	e4 cf       	rjmp	.-56     	; 0x160 <main+0x3c>

00000198 <__vector_51>:
 198:	1f 92       	push	r1
}



ISR(USART2_RX_vect)
{
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	0b b6       	in	r0, 0x3b	; 59
 1a4:	0f 92       	push	r0
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	cf 93       	push	r28
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	unsigned char rec = USART2_Receive();
 1c0:	d6 d1       	rcall	.+940    	; 0x56e <USART2_Receive>
 1c2:	c8 2f       	mov	r28, r24
	USART2_Transmit(rec);
 1c4:	cc d1       	rcall	.+920    	; 0x55e <USART2_Transmit>
 1c6:	cc 33       	cpi	r28, 0x3C	; 60
	//USART0_Transmit(rec);
	if ( (rec == '<') && (rec_start == 0)) // new packet receiving
 1c8:	c1 f4       	brne	.+48     	; 0x1fa <__vector_51+0x62>
 1ca:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rec_start>
 1ce:	81 11       	cpse	r24, r1
 1d0:	16 c0       	rjmp	.+44     	; 0x1fe <__vector_51+0x66>
 1d2:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <myindex>
	{
		myindex = 0;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
		rec_start = 1;
 1d8:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <rec_start>
 1dc:	84 e1       	ldi	r24, 0x14	; 20
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// rec_buff clear
 1de:	e0 e1       	ldi	r30, 0x10	; 16
 1e0:	f2 e0       	ldi	r31, 0x02	; 2
 1e2:	df 01       	movw	r26, r30
 1e4:	98 2f       	mov	r25, r24
 1e6:	1d 92       	st	X+, r1
 1e8:	9a 95       	dec	r25
 1ea:	e9 f7       	brne	.-6      	; 0x1e6 <__vector_51+0x4e>
 1ec:	e8 e4       	ldi	r30, 0x48	; 72
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
 1ee:	f2 e0       	ldi	r31, 0x02	; 2
 1f0:	df 01       	movw	r26, r30
 1f2:	1d 92       	st	X+, r1
 1f4:	8a 95       	dec	r24
 1f6:	e9 f7       	brne	.-6      	; 0x1f2 <__vector_51+0x5a>
 1f8:	28 c0       	rjmp	.+80     	; 0x24a <__vector_51+0xb2>
 1fa:	ce 33       	cpi	r28, 0x3E	; 62
	}
	
	else if ( ( rec != '>') && (rec_start == 1)  )				// collecting data in buffer
 1fc:	11 f1       	breq	.+68     	; 0x242 <__vector_51+0xaa>
 1fe:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rec_start>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	11 f5       	brne	.+68     	; 0x24a <__vector_51+0xb2>
 206:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <myindex>
	{
		rec_buff[myindex] = rec;
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e0 5f       	subi	r30, 0xF0	; 240
 20e:	fd 4f       	sbci	r31, 0xFD	; 253
 210:	c0 83       	st	Z, r28
 212:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <myindex>
		myindex++;
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <myindex>
 21c:	16 c0       	rjmp	.+44     	; 0x24a <__vector_51+0xb2>
 21e:	60 e1       	ldi	r22, 0x10	; 16
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )					// ending character received
	{
		strcpy(rec_bufferglob, rec_buff);						// copy data into rec_bufferglob
 220:	72 e0       	ldi	r23, 0x02	; 2
 222:	88 e4       	ldi	r24, 0x48	; 72
 224:	92 e0       	ldi	r25, 0x02	; 2
 226:	db d1       	rcall	.+950    	; 0x5de <strcpy>
 228:	81 e0       	ldi	r24, 0x01	; 1
		rec_stop = 1;											// rec_stop flag 1
 22a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <rec_stop>
 22e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <rec_start>
		rec_start = 0;											// clear flag
 232:	84 e1       	ldi	r24, 0x14	; 20
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// clearing rec_buff so that it can receive new data
 234:	e0 e1       	ldi	r30, 0x10	; 16
 236:	f2 e0       	ldi	r31, 0x02	; 2
 238:	df 01       	movw	r26, r30
 23a:	1d 92       	st	X+, r1
 23c:	8a 95       	dec	r24
 23e:	e9 f7       	brne	.-6      	; 0x23a <__vector_51+0xa2>
 240:	04 c0       	rjmp	.+8      	; 0x24a <__vector_51+0xb2>
		
	}
}
 242:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rec_start>
		myindex++;
		//rec = '\0';
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )					// ending character received
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	51 f3       	breq	.-44     	; 0x21e <__vector_51+0x86>
 24a:	ff 91       	pop	r31
		rec_stop = 1;											// rec_stop flag 1
		rec_start = 0;											// clear flag
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// clearing rec_buff so that it can receive new data
		
	}
}
 24c:	ef 91       	pop	r30
 24e:	cf 91       	pop	r28
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0b be       	out	0x3b, r0	; 59
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <__vector_25>:
 272:	1f 92       	push	r1



ISR(USART0_RX_vect)
{
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	0b b6       	in	r0, 0x3b	; 59
 27e:	0f 92       	push	r0
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	cf 93       	push	r28
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
	unsigned char rec = USART0_Receive();
 29a:	71 d1       	rcall	.+738    	; 0x57e <USART0_Receive>
 29c:	c8 2f       	mov	r28, r24
	USART2_Transmit(rec);
 29e:	5f d1       	rcall	.+702    	; 0x55e <USART2_Transmit>
 2a0:	cc 33       	cpi	r28, 0x3C	; 60
	//USART0_Transmit(rec);
	if ( (rec == '<') && (rec_start == 0)) // new packet
 2a2:	c1 f4       	brne	.+48     	; 0x2d4 <__vector_25+0x62>
 2a4:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rec_start>
 2a8:	81 11       	cpse	r24, r1
 2aa:	16 c0       	rjmp	.+44     	; 0x2d8 <__vector_25+0x66>
 2ac:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <myindex>
	{
		myindex = 0;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
		rec_start = 1;
 2b2:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <rec_start>
 2b6:	84 e1       	ldi	r24, 0x14	; 20
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));
 2b8:	e0 e1       	ldi	r30, 0x10	; 16
 2ba:	f2 e0       	ldi	r31, 0x02	; 2
 2bc:	df 01       	movw	r26, r30
 2be:	98 2f       	mov	r25, r24
 2c0:	1d 92       	st	X+, r1
 2c2:	9a 95       	dec	r25
 2c4:	e9 f7       	brne	.-6      	; 0x2c0 <__vector_25+0x4e>
 2c6:	e8 e4       	ldi	r30, 0x48	; 72
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));
 2c8:	f2 e0       	ldi	r31, 0x02	; 2
 2ca:	df 01       	movw	r26, r30
 2cc:	1d 92       	st	X+, r1
 2ce:	8a 95       	dec	r24
 2d0:	e9 f7       	brne	.-6      	; 0x2cc <__vector_25+0x5a>
 2d2:	23 c0       	rjmp	.+70     	; 0x31a <__vector_25+0xa8>
 2d4:	ce 33       	cpi	r28, 0x3E	; 62
	}
	
	else if ( ( rec != '>') && (rec_start == 1)  )	// collecting data in buffer
 2d6:	51 f1       	breq	.+84     	; 0x32c <__vector_25+0xba>
 2d8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rec_start>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	e9 f4       	brne	.+58     	; 0x31a <__vector_25+0xa8>
 2e0:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <myindex>
	{
		rec_buff[myindex] = rec;
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	e0 5f       	subi	r30, 0xF0	; 240
 2e8:	fd 4f       	sbci	r31, 0xFD	; 253
 2ea:	c0 83       	st	Z, r28
 2ec:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <myindex>
		myindex++;
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
 2f2:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <myindex>
 2f6:	11 c0       	rjmp	.+34     	; 0x31a <__vector_25+0xa8>
 2f8:	60 e1       	ldi	r22, 0x10	; 16
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )
	{
		strcpy(rec_bufferglob, rec_buff);
 2fa:	72 e0       	ldi	r23, 0x02	; 2
 2fc:	88 e4       	ldi	r24, 0x48	; 72
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	6e d1       	rcall	.+732    	; 0x5de <strcpy>
 302:	81 e0       	ldi	r24, 0x01	; 1
		//USART2_transmitstring(rec_bufferglob);
		rec_stop = 1;
 304:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <rec_stop>
 308:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <rec_start>
		rec_start = 0;
 30c:	84 e1       	ldi	r24, 0x14	; 20
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));
 30e:	e0 e1       	ldi	r30, 0x10	; 16
 310:	f2 e0       	ldi	r31, 0x02	; 2
 312:	df 01       	movw	r26, r30
 314:	1d 92       	st	X+, r1
 316:	8a 95       	dec	r24
 318:	e9 f7       	brne	.-6      	; 0x314 <__vector_25+0xa2>
 31a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <myindex>
		
	}
	if(myindex > (PACKET_SIZE -1 ))
 31e:	84 31       	cpi	r24, 0x14	; 20
 320:	50 f0       	brcs	.+20     	; 0x336 <__vector_25+0xc4>
 322:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <myindex>
	{
		myindex = 0;
 326:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <rec_start>
		rec_start = 0;
 32a:	05 c0       	rjmp	.+10     	; 0x336 <__vector_25+0xc4>
	}
}
 32c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rec_start>
		myindex++;
		//rec = '\0';
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	99 f7       	brne	.-26     	; 0x31a <__vector_25+0xa8>
 334:	e1 cf       	rjmp	.-62     	; 0x2f8 <__vector_25+0x86>
 336:	ff 91       	pop	r31
	if(myindex > (PACKET_SIZE -1 ))
	{
		myindex = 0;
		rec_start = 0;
	}
}
 338:	ef 91       	pop	r30
 33a:	cf 91       	pop	r28
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	7f 91       	pop	r23
 346:	6f 91       	pop	r22
 348:	5f 91       	pop	r21
 34a:	4f 91       	pop	r20
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0b be       	out	0x3b, r0	; 59
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <__vector_20>:
 35e:	1f 92       	push	r1



///////////////////////////////////---- ISR for TIMER1_OVF_vect -----////////////////////////////////////////
ISR(TIMER1_OVF_vect)
{
 360:	0f 92       	push	r0
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
	
	txtime--;
 36c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 370:	81 50       	subi	r24, 0x01	; 1
 372:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	if (txtime == 0)
 376:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 37a:	81 11       	cpse	r24, r1
 37c:	0c c0       	rjmp	.+24     	; 0x396 <__vector_20+0x38>
	{
		txflag=1;		// flag ON to indicate time has over
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		TCNT1 =0xC2F7;	// This value will generate 1 Sec delay for prescaler 1024 and 16 mhz crystel
 384:	87 ef       	ldi	r24, 0xF7	; 247
 386:	92 ec       	ldi	r25, 0xC2	; 194
 388:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 38c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
		TCCR1B = (5<<0);	// prescalar 1024
 390:	85 e0       	ldi	r24, 0x05	; 5
 392:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	}
	//USART2_transmitstring("int ");
	TCNT1 =0xC2F7;	// This value will generate 1 Sec delay for prescaler 1024 and 16 mhz crystel
 396:	87 ef       	ldi	r24, 0xF7	; 247
 398:	92 ec       	ldi	r25, 0xC2	; 194
 39a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 39e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCCR1B = (5<<0);	// prescaler 1024
 3a2:	85 e0       	ldi	r24, 0x05	; 5
 3a4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
}
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <EEPROM_write>:
			memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
			break;
		}
		
	}
}
 3b6:	f8 94       	cli
 3b8:	f9 99       	sbic	0x1f, 1	; 31
 3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <EEPROM_write+0x2>
 3bc:	92 bd       	out	0x22, r25	; 34
 3be:	81 bd       	out	0x21, r24	; 33
 3c0:	60 bd       	out	0x20, r22	; 32
 3c2:	fa 9a       	sbi	0x1f, 2	; 31
 3c4:	f9 9a       	sbi	0x1f, 1	; 31
 3c6:	78 94       	sei
 3c8:	08 95       	ret

000003ca <EEPROM_read>:
 3ca:	f9 99       	sbic	0x1f, 1	; 31
 3cc:	fe cf       	rjmp	.-4      	; 0x3ca <EEPROM_read>
 3ce:	92 bd       	out	0x22, r25	; 34
 3d0:	81 bd       	out	0x21, r24	; 33
 3d2:	f8 9a       	sbi	0x1f, 0	; 31
 3d4:	80 b5       	in	r24, 0x20	; 32
 3d6:	08 95       	ret

000003d8 <EEPROM_Write2Bytes>:
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ec 01       	movw	r28, r24
 3e0:	17 2f       	mov	r17, r23
 3e2:	f8 94       	cli
 3e4:	e8 df       	rcall	.-48     	; 0x3b6 <EEPROM_write>
 3e6:	61 2f       	mov	r22, r17
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	e4 df       	rcall	.-56     	; 0x3b6 <EEPROM_write>
 3ee:	78 94       	sei
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	08 95       	ret

000003f8 <EEPROM_Read2Bytes>:
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	8c 01       	movw	r16, r24
 400:	e4 df       	rcall	.-56     	; 0x3ca <EEPROM_read>
 402:	c8 2f       	mov	r28, r24
 404:	c8 01       	movw	r24, r16
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	e0 df       	rcall	.-64     	; 0x3ca <EEPROM_read>
 40a:	2c 2f       	mov	r18, r28
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	a9 01       	movw	r20, r18
 410:	58 2b       	or	r21, r24
 412:	ca 01       	movw	r24, r20
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	08 95       	ret

0000041c <GPIO_Init>:
 41c:	fc 01       	movw	r30, r24
 41e:	83 81       	ldd	r24, Z+3	; 0x03
 420:	81 11       	cpse	r24, r1
 422:	11 c0       	rjmp	.+34     	; 0x446 <GPIO_Init+0x2a>
 424:	30 81       	ld	r19, Z
 426:	01 80       	ldd	r0, Z+1	; 0x01
 428:	f2 81       	ldd	r31, Z+2	; 0x02
 42a:	e0 2d       	mov	r30, r0
 42c:	22 91       	ld	r18, -Z
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <GPIO_Init+0x1c>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	3a 95       	dec	r19
 43a:	e2 f7       	brpl	.-8      	; 0x434 <GPIO_Init+0x18>
 43c:	80 95       	com	r24
 43e:	90 95       	com	r25
 440:	82 23       	and	r24, r18
 442:	80 83       	st	Z, r24
 444:	08 95       	ret
 446:	30 81       	ld	r19, Z
 448:	01 80       	ldd	r0, Z+1	; 0x01
 44a:	f2 81       	ldd	r31, Z+2	; 0x02
 44c:	e0 2d       	mov	r30, r0
 44e:	22 91       	ld	r18, -Z
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <GPIO_Init+0x3e>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	3a 95       	dec	r19
 45c:	e2 f7       	brpl	.-8      	; 0x456 <GPIO_Init+0x3a>
 45e:	82 2b       	or	r24, r18
 460:	80 83       	st	Z, r24
 462:	08 95       	ret

00000464 <GpioPinInit>:
 464:	e0 e3       	ldi	r30, 0x30	; 48
 466:	f2 e0       	ldi	r31, 0x02	; 2
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	83 83       	std	Z+3, r24	; 0x03
 46c:	80 83       	st	Z, r24
 46e:	22 e0       	ldi	r18, 0x02	; 2
 470:	31 e0       	ldi	r19, 0x01	; 1
 472:	32 83       	std	Z+2, r19	; 0x02
 474:	21 83       	std	Z+1, r18	; 0x01
 476:	e8 e2       	ldi	r30, 0x28	; 40
 478:	f2 e0       	ldi	r31, 0x02	; 2
 47a:	13 82       	std	Z+3, r1	; 0x03
 47c:	10 82       	st	Z, r1
 47e:	32 83       	std	Z+2, r19	; 0x02
 480:	21 83       	std	Z+1, r18	; 0x01
 482:	ec e2       	ldi	r30, 0x2C	; 44
 484:	f2 e0       	ldi	r31, 0x02	; 2
 486:	83 83       	std	Z+3, r24	; 0x03
 488:	10 82       	st	Z, r1
 48a:	24 e3       	ldi	r18, 0x34	; 52
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	32 83       	std	Z+2, r19	; 0x02
 490:	21 83       	std	Z+1, r18	; 0x01
 492:	e4 e2       	ldi	r30, 0x24	; 36
 494:	f2 e0       	ldi	r31, 0x02	; 2
 496:	83 83       	std	Z+3, r24	; 0x03
 498:	10 82       	st	Z, r1
 49a:	88 e2       	ldi	r24, 0x28	; 40
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	92 83       	std	Z+2, r25	; 0x02
 4a0:	81 83       	std	Z+1, r24	; 0x01
 4a2:	88 e2       	ldi	r24, 0x28	; 40
 4a4:	92 e0       	ldi	r25, 0x02	; 2
 4a6:	ba df       	rcall	.-140    	; 0x41c <GPIO_Init>
 4a8:	80 e3       	ldi	r24, 0x30	; 48
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	b7 df       	rcall	.-146    	; 0x41c <GPIO_Init>
 4ae:	8c e2       	ldi	r24, 0x2C	; 44
 4b0:	92 e0       	ldi	r25, 0x02	; 2
 4b2:	b4 df       	rcall	.-152    	; 0x41c <GPIO_Init>
 4b4:	84 e2       	ldi	r24, 0x24	; 36
 4b6:	92 e0       	ldi	r25, 0x02	; 2
 4b8:	b1 cf       	rjmp	.-158    	; 0x41c <GPIO_Init>
 4ba:	08 95       	ret

000004bc <GPIO_WriteToPin>:
 4bc:	61 30       	cpi	r22, 0x01	; 1
 4be:	89 f4       	brne	.+34     	; 0x4e2 <GPIO_WriteToPin+0x26>
 4c0:	dc 01       	movw	r26, r24
 4c2:	3c 91       	ld	r19, X
 4c4:	11 96       	adiw	r26, 0x01	; 1
 4c6:	ed 91       	ld	r30, X+
 4c8:	fc 91       	ld	r31, X
 4ca:	12 97       	sbiw	r26, 0x02	; 2
 4cc:	20 81       	ld	r18, Z
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <GPIO_WriteToPin+0x1c>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	3a 95       	dec	r19
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <GPIO_WriteToPin+0x18>
 4dc:	82 2b       	or	r24, r18
 4de:	80 83       	st	Z, r24
 4e0:	08 95       	ret
 4e2:	fc 01       	movw	r30, r24
 4e4:	30 81       	ld	r19, Z
 4e6:	01 80       	ldd	r0, Z+1	; 0x01
 4e8:	f2 81       	ldd	r31, Z+2	; 0x02
 4ea:	e0 2d       	mov	r30, r0
 4ec:	20 81       	ld	r18, Z
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <GPIO_WriteToPin+0x3c>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	3a 95       	dec	r19
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <GPIO_WriteToPin+0x38>
 4fc:	80 95       	com	r24
 4fe:	90 95       	com	r25
 500:	82 23       	and	r24, r18
 502:	80 83       	st	Z, r24
 504:	08 95       	ret

00000506 <USART0_Init>:
 506:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 50a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 50e:	88 e9       	ldi	r24, 0x98	; 152
 510:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 514:	86 e0       	ldi	r24, 0x06	; 6
 516:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 51a:	08 95       	ret

0000051c <USART0_Transmit>:
 51c:	e0 ec       	ldi	r30, 0xC0	; 192
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	90 81       	ld	r25, Z
 522:	95 ff       	sbrs	r25, 5
 524:	fd cf       	rjmp	.-6      	; 0x520 <USART0_Transmit+0x4>
 526:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 52a:	08 95       	ret

0000052c <USART0_transmitstring>:
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	ec 01       	movw	r28, r24
 532:	88 81       	ld	r24, Y
 534:	88 23       	and	r24, r24
 536:	29 f0       	breq	.+10     	; 0x542 <USART0_transmitstring+0x16>
 538:	21 96       	adiw	r28, 0x01	; 1
 53a:	f0 df       	rcall	.-32     	; 0x51c <USART0_Transmit>
 53c:	89 91       	ld	r24, Y+
 53e:	81 11       	cpse	r24, r1
 540:	fc cf       	rjmp	.-8      	; 0x53a <USART0_transmitstring+0xe>
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <USART2_Init>:
 548:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 54c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
 550:	88 e9       	ldi	r24, 0x98	; 152
 552:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
 556:	86 e0       	ldi	r24, 0x06	; 6
 558:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
 55c:	08 95       	ret

0000055e <USART2_Transmit>:
 55e:	e0 ed       	ldi	r30, 0xD0	; 208
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	90 81       	ld	r25, Z
 564:	95 ff       	sbrs	r25, 5
 566:	fd cf       	rjmp	.-6      	; 0x562 <USART2_Transmit+0x4>
 568:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 56c:	08 95       	ret

0000056e <USART2_Receive>:
 56e:	e0 ed       	ldi	r30, 0xD0	; 208
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	88 23       	and	r24, r24
 576:	ec f7       	brge	.-6      	; 0x572 <USART2_Receive+0x4>
 578:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 57c:	08 95       	ret

0000057e <USART0_Receive>:
 57e:	e0 ec       	ldi	r30, 0xC0	; 192
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	88 23       	and	r24, r24
 586:	ec f7       	brge	.-6      	; 0x582 <USART0_Receive+0x4>
 588:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 58c:	08 95       	ret

0000058e <Send_FF_to_Display>:
 58e:	8f ef       	ldi	r24, 0xFF	; 255
 590:	c5 df       	rcall	.-118    	; 0x51c <USART0_Transmit>
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	c3 df       	rcall	.-122    	; 0x51c <USART0_Transmit>
 596:	8f ef       	ldi	r24, 0xFF	; 255
 598:	c1 cf       	rjmp	.-126    	; 0x51c <USART0_Transmit>
 59a:	08 95       	ret

0000059c <EEPROM_DisplayDataInit>:
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	c0 e0       	ldi	r28, 0x00	; 0
 5a2:	d0 e0       	ldi	r29, 0x00	; 0
 5a4:	ce 01       	movw	r24, r28
 5a6:	28 df       	rcall	.-432    	; 0x3f8 <EEPROM_Read2Bytes>
 5a8:	01 96       	adiw	r24, 0x01	; 1
 5aa:	21 f4       	brne	.+8      	; 0x5b4 <EEPROM_DisplayDataInit+0x18>
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	ce 01       	movw	r24, r28
 5b2:	12 df       	rcall	.-476    	; 0x3d8 <EEPROM_Write2Bytes>
 5b4:	22 96       	adiw	r28, 0x02	; 2
 5b6:	c2 36       	cpi	r28, 0x62	; 98
 5b8:	d1 05       	cpc	r29, r1
 5ba:	a1 f7       	brne	.-24     	; 0x5a4 <EEPROM_DisplayDataInit+0x8>
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <my_delay_us>:

void my_delay_us(int ms)
{
	while (0 < ms--)
 5c2:	9c 01       	movw	r18, r24
 5c4:	21 50       	subi	r18, 0x01	; 1
 5c6:	31 09       	sbc	r19, r1
 5c8:	18 16       	cp	r1, r24
 5ca:	19 06       	cpc	r1, r25
 5cc:	3c f4       	brge	.+14     	; 0x5dc <my_delay_us+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ce:	85 e0       	ldi	r24, 0x05	; 5
 5d0:	8a 95       	dec	r24
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <my_delay_us+0xe>
 5d4:	00 00       	nop
 5d6:	21 50       	subi	r18, 0x01	; 1
 5d8:	31 09       	sbc	r19, r1
 5da:	c8 f7       	brcc	.-14     	; 0x5ce <my_delay_us+0xc>
 5dc:	08 95       	ret

000005de <strcpy>:
 5de:	fb 01       	movw	r30, r22
 5e0:	dc 01       	movw	r26, r24
 5e2:	01 90       	ld	r0, Z+
 5e4:	0d 92       	st	X+, r0
 5e6:	00 20       	and	r0, r0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <strcpy+0x4>
 5ea:	08 95       	ret

000005ec <_exit>:
 5ec:	f8 94       	cli

000005ee <__stop_program>:
 5ee:	ff cf       	rjmp	.-2      	; 0x5ee <__stop_program>
