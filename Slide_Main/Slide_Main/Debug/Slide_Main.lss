
Slide_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000276  00800200  000016b8  0000174c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000105  00800476  00800476  000019c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f50  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f2  00000000  00000000  00005b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001713  00000000  00000000  00006bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  0000830c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a63  00000000  00000000  000087bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a6c  00000000  00000000  0000921f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000ac8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9d c0       	rjmp	.+314    	; 0x13c <__ctors_end>
       2:	00 00       	nop
       4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
       6:	00 00       	nop
       8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
       a:	00 00       	nop
       c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
       e:	00 00       	nop
      10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
      12:	00 00       	nop
      14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
      1e:	00 00       	nop
      20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
      22:	00 00       	nop
      24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
      26:	00 00       	nop
      28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a7 c0       	rjmp	.+334    	; 0x17c <__bad_interrupt>
      2e:	00 00       	nop
      30:	a5 c0       	rjmp	.+330    	; 0x17c <__bad_interrupt>
      32:	00 00       	nop
      34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
      36:	00 00       	nop
      38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
      3e:	00 00       	nop
      40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
      42:	00 00       	nop
      44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
      46:	00 00       	nop
      48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
      4e:	00 00       	nop
      50:	a9 c4       	rjmp	.+2386   	; 0x9a4 <__vector_20>
      52:	00 00       	nop
      54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
      56:	00 00       	nop
      58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
      5e:	00 00       	nop
      60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
      62:	00 00       	nop
      64:	29 c4       	rjmp	.+2130   	; 0x8b8 <__vector_25>
      66:	00 00       	nop
      68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
      6e:	00 00       	nop
      70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
      72:	00 00       	nop
      74:	83 c0       	rjmp	.+262    	; 0x17c <__bad_interrupt>
      76:	00 00       	nop
      78:	81 c0       	rjmp	.+258    	; 0x17c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7f c0       	rjmp	.+254    	; 0x17c <__bad_interrupt>
      7e:	00 00       	nop
      80:	7d c0       	rjmp	.+250    	; 0x17c <__bad_interrupt>
      82:	00 00       	nop
      84:	7b c0       	rjmp	.+246    	; 0x17c <__bad_interrupt>
      86:	00 00       	nop
      88:	79 c0       	rjmp	.+242    	; 0x17c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	77 c0       	rjmp	.+238    	; 0x17c <__bad_interrupt>
      8e:	00 00       	nop
      90:	75 c0       	rjmp	.+234    	; 0x17c <__bad_interrupt>
      92:	00 00       	nop
      94:	73 c0       	rjmp	.+230    	; 0x17c <__bad_interrupt>
      96:	00 00       	nop
      98:	71 c0       	rjmp	.+226    	; 0x17c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6f c0       	rjmp	.+222    	; 0x17c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6d c0       	rjmp	.+218    	; 0x17c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6b c0       	rjmp	.+214    	; 0x17c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	69 c0       	rjmp	.+210    	; 0x17c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	67 c0       	rjmp	.+206    	; 0x17c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	65 c0       	rjmp	.+202    	; 0x17c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	63 c0       	rjmp	.+198    	; 0x17c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	61 c0       	rjmp	.+194    	; 0x17c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5f c0       	rjmp	.+190    	; 0x17c <__bad_interrupt>
      be:	00 00       	nop
      c0:	5d c0       	rjmp	.+186    	; 0x17c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5b c0       	rjmp	.+182    	; 0x17c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	59 c0       	rjmp	.+178    	; 0x17c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	88 c3       	rjmp	.+1808   	; 0x7de <__vector_51>
      ce:	00 00       	nop
      d0:	55 c0       	rjmp	.+170    	; 0x17c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	53 c0       	rjmp	.+166    	; 0x17c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	51 c0       	rjmp	.+162    	; 0x17c <__bad_interrupt>
      da:	00 00       	nop
      dc:	4f c0       	rjmp	.+158    	; 0x17c <__bad_interrupt>
      de:	00 00       	nop
      e0:	4d c0       	rjmp	.+154    	; 0x17c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ca 01       	movw	r24, r20
      e6:	e3 01       	movw	r28, r6
      e8:	e3 01       	movw	r28, r6
      ea:	e3 01       	movw	r28, r6
      ec:	cd 01       	movw	r24, r26
      ee:	d0 01       	movw	r26, r0
      f0:	e3 01       	movw	r28, r6
      f2:	d4 01       	movw	r26, r8
      f4:	d8 01       	movw	r26, r16
      f6:	dc 01       	movw	r26, r24
      f8:	e0 01       	movw	r28, r0
      fa:	2a 02       	muls	r18, r26
      fc:	43 02       	muls	r20, r19
      fe:	43 02       	muls	r20, r19
     100:	43 02       	muls	r20, r19
     102:	2d 02       	muls	r18, r29
     104:	30 02       	muls	r19, r16
     106:	43 02       	muls	r20, r19
     108:	34 02       	muls	r19, r20
     10a:	38 02       	muls	r19, r24
     10c:	3c 02       	muls	r19, r28
     10e:	40 02       	muls	r20, r16
     110:	8a 02       	muls	r24, r26
     112:	a3 02       	muls	r26, r19
     114:	a3 02       	muls	r26, r19
     116:	a3 02       	muls	r26, r19
     118:	8d 02       	muls	r24, r29
     11a:	90 02       	muls	r25, r16
     11c:	a3 02       	muls	r26, r19
     11e:	94 02       	muls	r25, r20
     120:	98 02       	muls	r25, r24
     122:	9c 02       	muls	r25, r28
     124:	a0 02       	muls	r26, r16
     126:	e9 02       	muls	r30, r25
     128:	02 03       	mulsu	r16, r18
     12a:	02 03       	mulsu	r16, r18
     12c:	02 03       	mulsu	r16, r18
     12e:	ec 02       	muls	r30, r28
     130:	ef 02       	muls	r30, r31
     132:	02 03       	mulsu	r16, r18
     134:	f3 02       	muls	r31, r19
     136:	f7 02       	muls	r31, r23
     138:	fb 02       	muls	r31, r27
     13a:	ff 02       	muls	r31, r31

0000013c <__ctors_end>:
     13c:	11 24       	eor	r1, r1
     13e:	1f be       	out	0x3f, r1	; 63
     140:	cf ef       	ldi	r28, 0xFF	; 255
     142:	d1 e2       	ldi	r29, 0x21	; 33
     144:	de bf       	out	0x3e, r29	; 62
     146:	cd bf       	out	0x3d, r28	; 61
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0c bf       	out	0x3c, r16	; 60

0000014c <__do_copy_data>:
     14c:	14 e0       	ldi	r17, 0x04	; 4
     14e:	a0 e0       	ldi	r26, 0x00	; 0
     150:	b2 e0       	ldi	r27, 0x02	; 2
     152:	e8 eb       	ldi	r30, 0xB8	; 184
     154:	f6 e1       	ldi	r31, 0x16	; 22
     156:	00 e0       	ldi	r16, 0x00	; 0
     158:	0b bf       	out	0x3b, r16	; 59
     15a:	02 c0       	rjmp	.+4      	; 0x160 <__do_copy_data+0x14>
     15c:	07 90       	elpm	r0, Z+
     15e:	0d 92       	st	X+, r0
     160:	a6 37       	cpi	r26, 0x76	; 118
     162:	b1 07       	cpc	r27, r17
     164:	d9 f7       	brne	.-10     	; 0x15c <__do_copy_data+0x10>

00000166 <__do_clear_bss>:
     166:	25 e0       	ldi	r18, 0x05	; 5
     168:	a6 e7       	ldi	r26, 0x76	; 118
     16a:	b4 e0       	ldi	r27, 0x04	; 4
     16c:	01 c0       	rjmp	.+2      	; 0x170 <.do_clear_bss_start>

0000016e <.do_clear_bss_loop>:
     16e:	1d 92       	st	X+, r1

00000170 <.do_clear_bss_start>:
     170:	ab 37       	cpi	r26, 0x7B	; 123
     172:	b2 07       	cpc	r27, r18
     174:	e1 f7       	brne	.-8      	; 0x16e <.do_clear_bss_loop>
     176:	03 d0       	rcall	.+6      	; 0x17e <main>
     178:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <_exit>

0000017c <__bad_interrupt>:
     17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <main>:
	//uint8_t OneTimeRunFunFlag=0;
	uint32_t counting = 0;
	uint8_t ii=0;
	
	uint8_t stepdelay;
	USART2_Init(MYUBRR);
     17e:	87 e6       	ldi	r24, 0x67	; 103
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	82 d5       	rcall	.+2820   	; 0xc88 <USART2_Init>
	USART0_Init(MYUBRR);
     184:	87 e6       	ldi	r24, 0x67	; 103
     186:	90 e0       	ldi	r25, 0x00	; 0
	GpioPinInit();
     188:	5e d5       	rcall	.+2748   	; 0xc46 <USART0_Init>
     18a:	b0 d4       	rcall	.+2400   	; 0xaec <GpioPinInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18c:	2f ef       	ldi	r18, 0xFF	; 255
     18e:	8b e7       	ldi	r24, 0x7B	; 123
     190:	92 e9       	ldi	r25, 0x92	; 146
     192:	21 50       	subi	r18, 0x01	; 1
     194:	80 40       	sbci	r24, 0x00	; 0
     196:	90 40       	sbci	r25, 0x00	; 0
     198:	e1 f7       	brne	.-8      	; 0x192 <main+0x14>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x1e>
	_delay_ms(3000);
	//Timer1_init();
	USART2_transmitstring("sdjcsdb");
     19c:	00 00       	nop
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	92 e0       	ldi	r25, 0x02	; 2
	USART0_transmitstring("page Main");
     1a2:	95 d5       	rcall	.+2858   	; 0xcce <USART2_transmitstring>
     1a4:	8a e0       	ldi	r24, 0x0A	; 10
     1a6:	92 e0       	ldi	r25, 0x02	; 2
	Send_FF_to_Display();
     1a8:	61 d5       	rcall	.+2754   	; 0xc6c <USART0_transmitstring>
	if (EEPROM_Read2Bytes(P4_REG_E_WAIT_TIME_ADD)==0xFFFF)
     1aa:	fb d6       	rcall	.+3574   	; 0xfa2 <Send_FF_to_Display>
     1ac:	8e e5       	ldi	r24, 0x5E	; 94
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	67 d4       	rcall	.+2254   	; 0xa80 <EEPROM_Read2Bytes>
     1b2:	01 96       	adiw	r24, 0x01	; 1
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <main+0x3a>
		EEPROM_DisplayDataInit();
     1b6:	03 d7       	rcall	.+3590   	; 0xfbe <EEPROM_DisplayDataInit>
     1b8:	78 94       	sei
	
	//TIMSK1 &= ~(1<<0);	// Interrupt disable
	//GPIO_WriteToPin(&Motor_Dir, LOW);
	//uint8_t times_us[16]={30,20,15,14,13,12,11};
	sei();		// To enable Global Interrupt, cli(); for disable
     1ba:	c2 e3       	ldi	r28, 0x32	; 50
												break;
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P3_REG_A_END_BLOWER_TIME_ADD);
     1bc:	bf ef       	ldi	r27, 0xFF	; 255
     1be:	21 ee       	ldi	r18, 0xE1	; 225
     1c0:	84 e0       	ldi	r24, 0x04	; 4
     1c2:	b1 50       	subi	r27, 0x01	; 1
     1c4:	20 40       	sbci	r18, 0x00	; 0
     1c6:	80 40       	sbci	r24, 0x00	; 0
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x44>
     1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x4e>
     1cc:	00 00       	nop
    while (1) 
    {	
		_delay_ms(DELAY_IN_LOOP);
		//USART2_transmitstring("\nat Home ");
		//USART0_transmitstring("Home ");
		switch(MatchCommand(rec_bufferglob))
     1ce:	89 e4       	ldi	r24, 0x49	; 73
     1d0:	95 e0       	ldi	r25, 0x05	; 5
     1d2:	a2 d5       	rcall	.+2884   	; 0xd18 <MatchCommand>
     1d4:	83 30       	cpi	r24, 0x03	; 3
     1d6:	09 f4       	brne	.+2      	; 0x1da <main+0x5c>
     1d8:	70 c1       	rjmp	.+736    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     1da:	30 f4       	brcc	.+12     	; 0x1e8 <main+0x6a>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	69 f0       	breq	.+26     	; 0x1fa <main+0x7c>
     1e0:	82 30       	cpi	r24, 0x02	; 2
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <main+0x68>
     1e4:	0a c1       	rjmp	.+532    	; 0x3fa <main+0x27c>
     1e6:	ea cf       	rjmp	.-44     	; 0x1bc <main+0x3e>
     1e8:	82 31       	cpi	r24, 0x12	; 18
     1ea:	09 f4       	brne	.+2      	; 0x1ee <main+0x70>
     1ec:	25 c2       	rjmp	.+1098   	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     1ee:	84 31       	cpi	r24, 0x14	; 20
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <main+0x76>
     1f2:	2e c2       	rjmp	.+1116   	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     1f4:	84 30       	cpi	r24, 0x04	; 4
     1f6:	11 f7       	brne	.-60     	; 0x1bc <main+0x3e>
     1f8:	c0 c1       	rjmp	.+896    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     1fa:	9f ef       	ldi	r25, 0xFF	; 255
     1fc:	a1 ee       	ldi	r26, 0xE1	; 225
     1fe:	b4 e0       	ldi	r27, 0x04	; 4
     200:	91 50       	subi	r25, 0x01	; 1
     202:	a0 40       	sbci	r26, 0x00	; 0
     204:	b0 40       	sbci	r27, 0x00	; 0
     206:	e1 f7       	brne	.-8      	; 0x200 <main+0x82>
     208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x8c>
     20a:	00 00       	nop
					{	
						
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     20c:	89 e4       	ldi	r24, 0x49	; 73
     20e:	95 e0       	ldi	r25, 0x05	; 5
     210:	83 d5       	rcall	.+2822   	; 0xd18 <MatchCommand>
     212:	85 30       	cpi	r24, 0x05	; 5
     214:	09 f4       	brne	.+2      	; 0x218 <main+0x9a>
     216:	a6 c0       	rjmp	.+332    	; 0x364 <main+0x1e6>
     218:	86 30       	cpi	r24, 0x06	; 6
     21a:	09 f0       	breq	.+2      	; 0x21e <main+0xa0>
     21c:	e0 c0       	rjmp	.+448    	; 0x3de <main+0x260>
     21e:	2f ef       	ldi	r18, 0xFF	; 255
     220:	81 ee       	ldi	r24, 0xE1	; 225
     222:	94 e0       	ldi	r25, 0x04	; 4
     224:	21 50       	subi	r18, 0x01	; 1
     226:	80 40       	sbci	r24, 0x00	; 0
     228:	90 40       	sbci	r25, 0x00	; 0
     22a:	e1 f7       	brne	.-8      	; 0x224 <main+0xa6>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0xb0>
							{	
								case START:
									{
										_delay_ms(100);
										USART0_transmitstring("page STATUS");
     22e:	00 00       	nop
     230:	84 e1       	ldi	r24, 0x14	; 20
     232:	92 e0       	ldi	r25, 0x02	; 2
     234:	1b d5       	rcall	.+2614   	; 0xc6c <USART0_transmitstring>
										Send_FF_to_Display();
     236:	b5 d6       	rcall	.+3434   	; 0xfa2 <Send_FF_to_Display>
     238:	80 e2       	ldi	r24, 0x20	; 32
										Send_Text_On_Screen("Program 1 Initiated");
     23a:	92 e0       	ldi	r25, 0x02	; 2
     23c:	0e 94 38 0a 	call	0x1470	; 0x1470 <Send_Text_On_Screen>
     240:	af ef       	ldi	r26, 0xFF	; 255
     242:	bd e3       	ldi	r27, 0x3D	; 61
     244:	29 e4       	ldi	r18, 0x49	; 73
     246:	a1 50       	subi	r26, 0x01	; 1
     248:	b0 40       	sbci	r27, 0x00	; 0
     24a:	20 40       	sbci	r18, 0x00	; 0
     24c:	e1 f7       	brne	.-8      	; 0x246 <main+0xc8>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0xd2>
     250:	00 00       	nop
										_delay_ms(1500);

										Send_Text_On_Screen("Drying Cycle In Progress...");
     252:	84 e3       	ldi	r24, 0x34	; 52
     254:	92 e0       	ldi	r25, 0x02	; 2
     256:	0e 94 38 0a 	call	0x1470	; 0x1470 <Send_Text_On_Screen>
										Blower_ON(EEPROM_Read2Bytes(P1_REG_A_START_BLOWER_TIME_ADD));
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	10 d4       	rcall	.+2080   	; 0xa80 <EEPROM_Read2Bytes>
     260:	0e 94 75 0a 	call	0x14ea	; 0x14ea <Blower_ON>
										
										Send_Text_On_Screen("Cycle 1 In Progress...");											
     264:	80 e5       	ldi	r24, 0x50	; 80
     266:	92 e0       	ldi	r25, 0x02	; 2
     268:	0e 94 38 0a 	call	0x1470	; 0x1470 <Send_Text_On_Screen>
										//Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_A_QTY_ADD), &Reagent_A_pump);				
										Reagent_Wait_Time(EEPROM_Read2Bytes(P1_REG_A_WAIT_TIME_ADD));
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	07 d4       	rcall	.+2062   	; 0xa80 <EEPROM_Read2Bytes>
     272:	0e 94 99 0a 	call	0x1532	; 0x1532 <Reagent_Wait_Time>
										Spin_motor(EEPROM_Read2Bytes(SPIN_TIME_ADD));
     276:	80 e6       	ldi	r24, 0x60	; 96
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	02 d4       	rcall	.+2052   	; 0xa80 <EEPROM_Read2Bytes>
     27c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Spin_motor>
										
										Send_Text_On_Screen("Cycle 2 In Progress...");
     280:	87 e6       	ldi	r24, 0x67	; 103
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	0e 94 38 0a 	call	0x1470	; 0x1470 <Send_Text_On_Screen>
										//Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_B_QTY_ADD), &Reagent_B_pump);
										Reagent_Wait_Time(EEPROM_Read2Bytes(P1_REG_B_WAIT_TIME_ADD));
     288:	8a e0       	ldi	r24, 0x0A	; 10
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	f9 d3       	rcall	.+2034   	; 0xa80 <EEPROM_Read2Bytes>
     28e:	0e 94 99 0a 	call	0x1532	; 0x1532 <Reagent_Wait_Time>
										Spin_motor(EEPROM_Read2Bytes(SPIN_TIME_ADD));
     292:	80 e6       	ldi	r24, 0x60	; 96
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	f4 d3       	rcall	.+2024   	; 0xa80 <EEPROM_Read2Bytes>
     298:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Spin_motor>
										
										Send_Text_On_Screen("Cycle 3 In Progress...");
     29c:	8e e7       	ldi	r24, 0x7E	; 126
     29e:	92 e0       	ldi	r25, 0x02	; 2
										//Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_C_QTY_ADD), &Reagent_C_pump);
										Reagent_Wait_Time(EEPROM_Read2Bytes(P1_REG_C_WAIT_TIME_ADD));
     2a0:	0e 94 38 0a 	call	0x1470	; 0x1470 <Send_Text_On_Screen>
     2a4:	8e e0       	ldi	r24, 0x0E	; 14
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	eb d3       	rcall	.+2006   	; 0xa80 <EEPROM_Read2Bytes>
										Spin_motor(EEPROM_Read2Bytes(SPIN_TIME_ADD));
     2aa:	0e 94 99 0a 	call	0x1532	; 0x1532 <Reagent_Wait_Time>
     2ae:	80 e6       	ldi	r24, 0x60	; 96
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	e6 d3       	rcall	.+1996   	; 0xa80 <EEPROM_Read2Bytes>
     2b4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Spin_motor>
										
										Send_Text_On_Screen("Cycle 4 In Progress...");
     2b8:	85 e9       	ldi	r24, 0x95	; 149
     2ba:	92 e0       	ldi	r25, 0x02	; 2
										//Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_D_QTY_ADD), &Reagent_D_pump);
										Reagent_Wait_Time(EEPROM_Read2Bytes(P1_REG_D_WAIT_TIME_ADD));
     2bc:	0e 94 38 0a 	call	0x1470	; 0x1470 <Send_Text_On_Screen>
     2c0:	82 e1       	ldi	r24, 0x12	; 18
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	dd d3       	rcall	.+1978   	; 0xa80 <EEPROM_Read2Bytes>
										Spin_motor(EEPROM_Read2Bytes(SPIN_TIME_ADD)); 
     2c6:	0e 94 99 0a 	call	0x1532	; 0x1532 <Reagent_Wait_Time>
     2ca:	80 e6       	ldi	r24, 0x60	; 96
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	d8 d3       	rcall	.+1968   	; 0xa80 <EEPROM_Read2Bytes>
     2d0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Spin_motor>
										 										
 										Send_Text_On_Screen("Cycle 5 In Progress...");
     2d4:	8c ea       	ldi	r24, 0xAC	; 172
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	0e 94 38 0a 	call	0x1470	; 0x1470 <Send_Text_On_Screen>
 										//Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_E_QTY_ADD), &Reagent_E_pump); 
										Reagent_Wait_Time(EEPROM_Read2Bytes(P1_REG_E_WAIT_TIME_ADD));
     2dc:	86 e1       	ldi	r24, 0x16	; 22
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	cf d3       	rcall	.+1950   	; 0xa80 <EEPROM_Read2Bytes>
     2e2:	0e 94 99 0a 	call	0x1532	; 0x1532 <Reagent_Wait_Time>
										Spin_motor(EEPROM_Read2Bytes(SPIN_TIME_ADD));	
     2e6:	80 e6       	ldi	r24, 0x60	; 96
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	ca d3       	rcall	.+1940   	; 0xa80 <EEPROM_Read2Bytes>
     2ec:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Spin_motor>
																		
										Send_Text_On_Screen("Draining Cycle In Progress...");
     2f0:	83 ec       	ldi	r24, 0xC3	; 195
     2f2:	92 e0       	ldi	r25, 0x02	; 2
     2f4:	0e 94 38 0a 	call	0x1470	; 0x1470 <Send_Text_On_Screen>
     2f8:	8f ef       	ldi	r24, 0xFF	; 255
     2fa:	93 ed       	ldi	r25, 0xD3	; 211
     2fc:	a0 e3       	ldi	r26, 0x30	; 48
     2fe:	81 50       	subi	r24, 0x01	; 1
     300:	90 40       	sbci	r25, 0x00	; 0
     302:	a0 40       	sbci	r26, 0x00	; 0
     304:	e1 f7       	brne	.-8      	; 0x2fe <main+0x180>
     306:	00 c0       	rjmp	.+0      	; 0x308 <main+0x18a>
     308:	00 00       	nop
										_delay_ms(1000);
										
										Send_Text_On_Screen("Drying Cycle In Progress...");
     30a:	84 e3       	ldi	r24, 0x34	; 52
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 38 0a 	call	0x1470	; 0x1470 <Send_Text_On_Screen>
										Blower_ON(EEPROM_Read2Bytes(P1_REG_A_END_BLOWER_TIME_ADD));
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	b4 d3       	rcall	.+1896   	; 0xa80 <EEPROM_Read2Bytes>
     318:	0e 94 75 0a 	call	0x14ea	; 0x14ea <Blower_ON>
     31c:	bf ef       	ldi	r27, 0xFF	; 255
     31e:	27 ea       	ldi	r18, 0xA7	; 167
     320:	81 e6       	ldi	r24, 0x61	; 97
     322:	b1 50       	subi	r27, 0x01	; 1
     324:	20 40       	sbci	r18, 0x00	; 0
     326:	80 40       	sbci	r24, 0x00	; 0
     328:	e1 f7       	brne	.-8      	; 0x322 <main+0x1a4>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x1ae>
										_delay_ms(2000);
										Send_Text_On_Screen("End of Program 1");
     32c:	00 00       	nop
     32e:	81 ee       	ldi	r24, 0xE1	; 225
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	0e 94 38 0a 	call	0x1470	; 0x1470 <Send_Text_On_Screen>
     336:	9f ef       	ldi	r25, 0xFF	; 255
     338:	a7 ea       	ldi	r26, 0xA7	; 167
     33a:	b1 e6       	ldi	r27, 0x61	; 97
     33c:	91 50       	subi	r25, 0x01	; 1
     33e:	a0 40       	sbci	r26, 0x00	; 0
     340:	b0 40       	sbci	r27, 0x00	; 0
     342:	e1 f7       	brne	.-8      	; 0x33c <main+0x1be>
     344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x1c8>
										_delay_ms(2000);
										USART0_transmitstring("page Main");
     346:	00 00       	nop
     348:	8a e0       	ldi	r24, 0x0A	; 10
     34a:	92 e0       	ldi	r25, 0x02	; 2
										Send_FF_to_Display(); 
     34c:	8f d4       	rcall	.+2334   	; 0xc6c <USART0_transmitstring>
     34e:	29 d6       	rcall	.+3154   	; 0xfa2 <Send_FF_to_Display>
										strcpy(rec_bufferglob, "back");
     350:	85 e0       	ldi	r24, 0x05	; 5
     352:	e2 ef       	ldi	r30, 0xF2	; 242
     354:	f2 e0       	ldi	r31, 0x02	; 2
     356:	a9 e4       	ldi	r26, 0x49	; 73
     358:	b5 e0       	ldi	r27, 0x05	; 5
     35a:	01 90       	ld	r0, Z+
     35c:	0d 92       	st	X+, r0
     35e:	8a 95       	dec	r24
     360:	e1 f7       	brne	.-8      	; 0x35a <main+0x1dc>
     362:	3d c0       	rjmp	.+122    	; 0x3de <main+0x260>
     364:	2f ef       	ldi	r18, 0xFF	; 255
     366:	81 ee       	ldi	r24, 0xE1	; 225
     368:	94 e0       	ldi	r25, 0x04	; 4
     36a:	21 50       	subi	r18, 0x01	; 1
     36c:	80 40       	sbci	r24, 0x00	; 0
     36e:	90 40       	sbci	r25, 0x00	; 0
								case P1EDIT:
									{	
										while(1)
										{
											_delay_ms(DELAY_IN_LOOP);
											switch(MatchCommand(rec_bufferglob))
     370:	e1 f7       	brne	.-8      	; 0x36a <main+0x1ec>
     372:	00 c0       	rjmp	.+0      	; 0x374 <main+0x1f6>
     374:	00 00       	nop
     376:	89 e4       	ldi	r24, 0x49	; 73
     378:	95 e0       	ldi	r25, 0x05	; 5
     37a:	ce d4       	rcall	.+2460   	; 0xd18 <MatchCommand>
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	fc 01       	movw	r30, r24
     380:	37 97       	sbiw	r30, 0x07	; 7
     382:	eb 30       	cpi	r30, 0x0B	; 11
     384:	f1 05       	cpc	r31, r1
     386:	f8 f4       	brcc	.+62     	; 0x3c6 <main+0x248>
     388:	88 27       	eor	r24, r24
											{
												case REG_START_BLO_TIME:
												{
													StartBlowerTimeSelected(P1_REG_A_START_BLOWER_TIME_ADD);
     38a:	ee 58       	subi	r30, 0x8E	; 142
     38c:	ff 4f       	sbci	r31, 0xFF	; 255
													break;
     38e:	8f 4f       	sbci	r24, 0xFF	; 255
												}
													
												case REG_END_BLO_TIME:
												{
													EndBlowerTimeSelected(P1_REG_A_END_BLOWER_TIME_ADD);
     390:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__tablejump2__>
     394:	80 e0       	ldi	r24, 0x00	; 0
													break;
     396:	c3 d6       	rcall	.+3462   	; 0x111e <StartBlowerTimeSelected>
												}
												
												case REGA:
												{
													ReagentSelected(P1_REG_A_QTY_ADD, P1_REG_A_WAIT_TIME_ADD);
     398:	16 c0       	rjmp	.+44     	; 0x3c6 <main+0x248>
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	09 d7       	rcall	.+3602   	; 0x11b0 <EndBlowerTimeSelected>
     39e:	13 c0       	rjmp	.+38     	; 0x3c6 <main+0x248>
													break;
												}
												
												case REGB:
												{
													ReagentSelected(P1_REG_B_QTY_ADD, P1_REG_B_WAIT_TIME_ADD);
     3a0:	66 e0       	ldi	r22, 0x06	; 6
     3a2:	84 e0       	ldi	r24, 0x04	; 4
     3a4:	1f d6       	rcall	.+3134   	; 0xfe4 <ReagentSelected>
     3a6:	0f c0       	rjmp	.+30     	; 0x3c6 <main+0x248>
													break;
     3a8:	6a e0       	ldi	r22, 0x0A	; 10
												}
												
												case REGC:
												{
													ReagentSelected(P1_REG_C_QTY_ADD, P1_REG_C_WAIT_TIME_ADD);
     3aa:	88 e0       	ldi	r24, 0x08	; 8
     3ac:	1b d6       	rcall	.+3126   	; 0xfe4 <ReagentSelected>
     3ae:	0b c0       	rjmp	.+22     	; 0x3c6 <main+0x248>
     3b0:	6e e0       	ldi	r22, 0x0E	; 14
													break;
     3b2:	8c e0       	ldi	r24, 0x0C	; 12
												}
												
												case REGD:
												{
													ReagentSelected(P1_REG_D_QTY_ADD, P1_REG_D_WAIT_TIME_ADD);
     3b4:	17 d6       	rcall	.+3118   	; 0xfe4 <ReagentSelected>
     3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <main+0x248>
     3b8:	62 e1       	ldi	r22, 0x12	; 18
     3ba:	80 e1       	ldi	r24, 0x10	; 16
													break;
     3bc:	13 d6       	rcall	.+3110   	; 0xfe4 <ReagentSelected>
												}
												case REGE:
												{
													ReagentSelected(P1_REG_E_QTY_ADD, P1_REG_E_WAIT_TIME_ADD);
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <main+0x248>
     3c0:	66 e1       	ldi	r22, 0x16	; 22
     3c2:	84 e1       	ldi	r24, 0x14	; 20
     3c4:	0f d6       	rcall	.+3102   	; 0xfe4 <ReagentSelected>
													break;
												}
													
											}
											
											if (MatchCommand(rec_bufferglob)==BACK)
     3c6:	89 e4       	ldi	r24, 0x49	; 73
     3c8:	95 e0       	ldi	r25, 0x05	; 5
     3ca:	a6 d4       	rcall	.+2380   	; 0xd18 <MatchCommand>
     3cc:	84 36       	cpi	r24, 0x64	; 100
     3ce:	51 f6       	brne	.-108    	; 0x364 <main+0x1e6>
											{
												memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     3d0:	e9 e4       	ldi	r30, 0x49	; 73
     3d2:	f5 e0       	ldi	r31, 0x05	; 5
     3d4:	df 01       	movw	r26, r30
     3d6:	2c 2f       	mov	r18, r28
     3d8:	1d 92       	st	X+, r1
     3da:	2a 95       	dec	r18
										break;
									}
									
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     3dc:	e9 f7       	brne	.-6      	; 0x3d8 <main+0x25a>
     3de:	89 e4       	ldi	r24, 0x49	; 73
     3e0:	95 e0       	ldi	r25, 0x05	; 5
     3e2:	9a d4       	rcall	.+2356   	; 0xd18 <MatchCommand>
     3e4:	84 36       	cpi	r24, 0x64	; 100
     3e6:	09 f0       	breq	.+2      	; 0x3ea <main+0x26c>
     3e8:	08 cf       	rjmp	.-496    	; 0x1fa <main+0x7c>
								{
									memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     3ea:	e9 e4       	ldi	r30, 0x49	; 73
     3ec:	f5 e0       	ldi	r31, 0x05	; 5
     3ee:	df 01       	movw	r26, r30
     3f0:	2c 2f       	mov	r18, r28
     3f2:	1d 92       	st	X+, r1
     3f4:	2a 95       	dec	r18
									break;
								}
						}
						
						break;
     3f6:	e9 f7       	brne	.-6      	; 0x3f2 <main+0x274>
     3f8:	e1 ce       	rjmp	.-574    	; 0x1bc <main+0x3e>
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	91 ee       	ldi	r25, 0xE1	; 225
     3fe:	a4 e0       	ldi	r26, 0x04	; 4
     400:	81 50       	subi	r24, 0x01	; 1
     402:	90 40       	sbci	r25, 0x00	; 0
     404:	a0 40       	sbci	r26, 0x00	; 0
     406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
     408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			case PROGRAM_2:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     40a:	00 00       	nop
     40c:	89 e4       	ldi	r24, 0x49	; 73
     40e:	95 e0       	ldi	r25, 0x05	; 5
     410:	83 d4       	rcall	.+2310   	; 0xd18 <MatchCommand>
     412:	85 30       	cpi	r24, 0x05	; 5
     414:	39 f0       	breq	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     416:	86 30       	cpi	r24, 0x06	; 6
							{
								case START:
								{
									USART2_transmitstring("Start");
     418:	09 f0       	breq	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	41 c0       	rjmp	.+130    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     41c:	87 ef       	ldi	r24, 0xF7	; 247
									break;
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	56 d4       	rcall	.+2220   	; 0xcce <USART2_transmitstring>
     422:	3d c0       	rjmp	.+122    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     424:	bf ef       	ldi	r27, 0xFF	; 255
     426:	21 ee       	ldi	r18, 0xE1	; 225
     428:	84 e0       	ldi	r24, 0x04	; 4
     42a:	b1 50       	subi	r27, 0x01	; 1
     42c:	20 40       	sbci	r18, 0x00	; 0
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     42e:	80 40       	sbci	r24, 0x00	; 0
     430:	e1 f7       	brne	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     432:	00 c0       	rjmp	.+0      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     434:	00 00       	nop
     436:	89 e4       	ldi	r24, 0x49	; 73
     438:	95 e0       	ldi	r25, 0x05	; 5
     43a:	6e d4       	rcall	.+2268   	; 0xd18 <MatchCommand>
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	fc 01       	movw	r30, r24
     440:	37 97       	sbiw	r30, 0x07	; 7
     442:	eb 30       	cpi	r30, 0x0B	; 11
     444:	f1 05       	cpc	r31, r1
     446:	f8 f4       	brcc	.+62     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     448:	88 27       	eor	r24, r24
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P2_REG_A_START_BLOWER_TIME_ADD);
     44a:	e3 58       	subi	r30, 0x83	; 131
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
												break;
     44e:	8f 4f       	sbci	r24, 0xFF	; 255
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P2_REG_A_END_BLOWER_TIME_ADD);
     450:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__tablejump2__>
     454:	88 e1       	ldi	r24, 0x18	; 24
												break;
     456:	63 d6       	rcall	.+3270   	; 0x111e <StartBlowerTimeSelected>
											}
											
											case REGA:
											{
												ReagentSelected(P2_REG_A_QTY_ADD, P2_REG_A_WAIT_TIME_ADD);
     458:	16 c0       	rjmp	.+44     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     45a:	8a e1       	ldi	r24, 0x1A	; 26
     45c:	a9 d6       	rcall	.+3410   	; 0x11b0 <EndBlowerTimeSelected>
     45e:	13 c0       	rjmp	.+38     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
												break;
     460:	6e e1       	ldi	r22, 0x1E	; 30
											}
											
											case REGB:
											{
												ReagentSelected(P2_REG_B_QTY_ADD, P2_REG_B_WAIT_TIME_ADD);
     462:	8c e1       	ldi	r24, 0x1C	; 28
     464:	bf d5       	rcall	.+2942   	; 0xfe4 <ReagentSelected>
     466:	0f c0       	rjmp	.+30     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     468:	62 e2       	ldi	r22, 0x22	; 34
												break;
     46a:	80 e2       	ldi	r24, 0x20	; 32
											}
											
											case REGC:
											{
												ReagentSelected(P2_REG_C_QTY_ADD, P2_REG_C_WAIT_TIME_ADD);
     46c:	bb d5       	rcall	.+2934   	; 0xfe4 <ReagentSelected>
     46e:	0b c0       	rjmp	.+22     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     470:	66 e2       	ldi	r22, 0x26	; 38
     472:	84 e2       	ldi	r24, 0x24	; 36
												break;
     474:	b7 d5       	rcall	.+2926   	; 0xfe4 <ReagentSelected>
											}
											
											case REGD:
											{
												ReagentSelected(P2_REG_D_QTY_ADD, P2_REG_D_WAIT_TIME_ADD);
     476:	07 c0       	rjmp	.+14     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     478:	6a e2       	ldi	r22, 0x2A	; 42
     47a:	88 e2       	ldi	r24, 0x28	; 40
												break;
     47c:	b3 d5       	rcall	.+2918   	; 0xfe4 <ReagentSelected>
											}
											case REGE:
											{
												ReagentSelected(P2_REG_E_QTY_ADD, P2_REG_E_WAIT_TIME_ADD);
     47e:	03 c0       	rjmp	.+6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     480:	6e e2       	ldi	r22, 0x2E	; 46
     482:	8c e2       	ldi	r24, 0x2C	; 44
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     484:	af d5       	rcall	.+2910   	; 0xfe4 <ReagentSelected>
     486:	89 e4       	ldi	r24, 0x49	; 73
     488:	95 e0       	ldi	r25, 0x05	; 5
     48a:	46 d4       	rcall	.+2188   	; 0xd18 <MatchCommand>
     48c:	84 36       	cpi	r24, 0x64	; 100
     48e:	51 f6       	brne	.-108    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     490:	e9 e4       	ldi	r30, 0x49	; 73
     492:	f5 e0       	ldi	r31, 0x05	; 5
     494:	df 01       	movw	r26, r30
     496:	2c 2f       	mov	r18, r28
     498:	1d 92       	st	X+, r1
     49a:	2a 95       	dec	r18
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     49c:	e9 f7       	brne	.-6      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     49e:	89 e4       	ldi	r24, 0x49	; 73
     4a0:	95 e0       	ldi	r25, 0x05	; 5
     4a2:	3a d4       	rcall	.+2164   	; 0xd18 <MatchCommand>
     4a4:	84 36       	cpi	r24, 0x64	; 100
     4a6:	09 f0       	breq	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4a8:	a8 cf       	rjmp	.-176    	; 0x3fa <main+0x27c>
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     4aa:	e9 e4       	ldi	r30, 0x49	; 73
     4ac:	f5 e0       	ldi	r31, 0x05	; 5
     4ae:	df 01       	movw	r26, r30
     4b0:	2c 2f       	mov	r18, r28
     4b2:	1d 92       	st	X+, r1
     4b4:	2a 95       	dec	r18
								break;
							}
						}
						break;
     4b6:	e9 f7       	brne	.-6      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b8:	81 ce       	rjmp	.-766    	; 0x1bc <main+0x3e>
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	91 ee       	ldi	r25, 0xE1	; 225
     4be:	a4 e0       	ldi	r26, 0x04	; 4
     4c0:	81 50       	subi	r24, 0x01	; 1
     4c2:	90 40       	sbci	r25, 0x00	; 0
     4c4:	a0 40       	sbci	r26, 0x00	; 0
			case PROGRAM_3:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4ca:	00 00       	nop
     4cc:	89 e4       	ldi	r24, 0x49	; 73
     4ce:	95 e0       	ldi	r25, 0x05	; 5
     4d0:	23 d4       	rcall	.+2118   	; 0xd18 <MatchCommand>
     4d2:	85 30       	cpi	r24, 0x05	; 5
							{
								case START:
								{
									USART2_transmitstring("Start");
     4d4:	39 f0       	breq	.+14     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4d6:	86 30       	cpi	r24, 0x06	; 6
     4d8:	09 f0       	breq	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
									break;
     4da:	41 c0       	rjmp	.+130    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     4dc:	87 ef       	ldi	r24, 0xF7	; 247
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	f6 d3       	rcall	.+2028   	; 0xcce <USART2_transmitstring>
     4e2:	3d c0       	rjmp	.+122    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     4e4:	bf ef       	ldi	r27, 0xFF	; 255
     4e6:	21 ee       	ldi	r18, 0xE1	; 225
     4e8:	84 e0       	ldi	r24, 0x04	; 4
     4ea:	b1 50       	subi	r27, 0x01	; 1
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     4ec:	20 40       	sbci	r18, 0x00	; 0
     4ee:	80 40       	sbci	r24, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f4:	00 00       	nop
     4f6:	89 e4       	ldi	r24, 0x49	; 73
     4f8:	95 e0       	ldi	r25, 0x05	; 5
     4fa:	0e d4       	rcall	.+2076   	; 0xd18 <MatchCommand>
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	fc 01       	movw	r30, r24
     500:	37 97       	sbiw	r30, 0x07	; 7
     502:	eb 30       	cpi	r30, 0x0B	; 11
     504:	f1 05       	cpc	r31, r1
     506:	f8 f4       	brcc	.+62     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     508:	88 27       	eor	r24, r24
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P3_REG_A_START_BLOWER_TIME_ADD);
     50a:	e8 57       	subi	r30, 0x78	; 120
     50c:	ff 4f       	sbci	r31, 0xFF	; 255
     50e:	8f 4f       	sbci	r24, 0xFF	; 255
												break;
     510:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <__tablejump2__>
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P3_REG_A_END_BLOWER_TIME_ADD);
     514:	80 e3       	ldi	r24, 0x30	; 48
     516:	03 d6       	rcall	.+3078   	; 0x111e <StartBlowerTimeSelected>
												break;
     518:	16 c0       	rjmp	.+44     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
											}
											
											case REGA:
											{
												ReagentSelected(P3_REG_A_QTY_ADD, P3_REG_A_WAIT_TIME_ADD);
     51a:	8c 2f       	mov	r24, r28
     51c:	49 d6       	rcall	.+3218   	; 0x11b0 <EndBlowerTimeSelected>
     51e:	13 c0       	rjmp	.+38     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
												break;
     520:	66 e3       	ldi	r22, 0x36	; 54
											}
											
											case REGB:
											{
												ReagentSelected(P3_REG_B_QTY_ADD, P3_REG_B_WAIT_TIME_ADD);
     522:	84 e3       	ldi	r24, 0x34	; 52
     524:	5f d5       	rcall	.+2750   	; 0xfe4 <ReagentSelected>
     526:	0f c0       	rjmp	.+30     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     528:	6a e3       	ldi	r22, 0x3A	; 58
												break;
     52a:	88 e3       	ldi	r24, 0x38	; 56
											}
											
											case REGC:
											{
												ReagentSelected(P3_REG_C_QTY_ADD, P3_REG_C_WAIT_TIME_ADD);
     52c:	5b d5       	rcall	.+2742   	; 0xfe4 <ReagentSelected>
     52e:	0b c0       	rjmp	.+22     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     530:	6e e3       	ldi	r22, 0x3E	; 62
												break;
     532:	8c e3       	ldi	r24, 0x3C	; 60
											}
											
											case REGD:
											{
												ReagentSelected(P3_REG_D_QTY_ADD, P3_REG_D_WAIT_TIME_ADD);
     534:	57 d5       	rcall	.+2734   	; 0xfe4 <ReagentSelected>
     536:	07 c0       	rjmp	.+14     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     538:	62 e4       	ldi	r22, 0x42	; 66
     53a:	80 e4       	ldi	r24, 0x40	; 64
												break;
     53c:	53 d5       	rcall	.+2726   	; 0xfe4 <ReagentSelected>
											}
											case REGE:
											{
												ReagentSelected(P3_REG_E_QTY_ADD, P3_REG_E_WAIT_TIME_ADD);
     53e:	03 c0       	rjmp	.+6      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     540:	66 e4       	ldi	r22, 0x46	; 70
     542:	84 e4       	ldi	r24, 0x44	; 68
     544:	4f d5       	rcall	.+2718   	; 0xfe4 <ReagentSelected>
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     546:	89 e4       	ldi	r24, 0x49	; 73
     548:	95 e0       	ldi	r25, 0x05	; 5
     54a:	e6 d3       	rcall	.+1996   	; 0xd18 <MatchCommand>
     54c:	84 36       	cpi	r24, 0x64	; 100
     54e:	51 f6       	brne	.-108    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     550:	e9 e4       	ldi	r30, 0x49	; 73
     552:	f5 e0       	ldi	r31, 0x05	; 5
     554:	df 01       	movw	r26, r30
     556:	2c 2f       	mov	r18, r28
     558:	1d 92       	st	X+, r1
     55a:	2a 95       	dec	r18
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     55c:	e9 f7       	brne	.-6      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     55e:	89 e4       	ldi	r24, 0x49	; 73
     560:	95 e0       	ldi	r25, 0x05	; 5
     562:	da d3       	rcall	.+1972   	; 0xd18 <MatchCommand>
     564:	84 36       	cpi	r24, 0x64	; 100
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     566:	09 f0       	breq	.+2      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     568:	a8 cf       	rjmp	.-176    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     56a:	e9 e4       	ldi	r30, 0x49	; 73
     56c:	f5 e0       	ldi	r31, 0x05	; 5
     56e:	df 01       	movw	r26, r30
								break;
							}
						}
						break;
     570:	2c 2f       	mov	r18, r28
     572:	1d 92       	st	X+, r1
     574:	2a 95       	dec	r18
     576:	e9 f7       	brne	.-6      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     578:	21 ce       	rjmp	.-958    	; 0x1bc <main+0x3e>
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	91 ee       	ldi	r25, 0xE1	; 225
     57e:	a4 e0       	ldi	r26, 0x04	; 4
			case PROGRAM_4:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     580:	81 50       	subi	r24, 0x01	; 1
     582:	90 40       	sbci	r25, 0x00	; 0
     584:	a0 40       	sbci	r26, 0x00	; 0
     586:	e1 f7       	brne	.-8      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     588:	00 c0       	rjmp	.+0      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     58a:	00 00       	nop
     58c:	89 e4       	ldi	r24, 0x49	; 73
							{
								case START:
								{
									USART2_transmitstring("Start");
     58e:	95 e0       	ldi	r25, 0x05	; 5
     590:	c3 d3       	rcall	.+1926   	; 0xd18 <MatchCommand>
     592:	85 30       	cpi	r24, 0x05	; 5
     594:	39 f0       	breq	.+14     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
									break;
     596:	86 30       	cpi	r24, 0x06	; 6
     598:	09 f0       	breq	.+2      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     59a:	40 c0       	rjmp	.+128    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     59c:	87 ef       	ldi	r24, 0xF7	; 247
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	96 d3       	rcall	.+1836   	; 0xcce <USART2_transmitstring>
     5a2:	3c c0       	rjmp	.+120    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     5a4:	bf ef       	ldi	r27, 0xFF	; 255
     5a6:	21 ee       	ldi	r18, 0xE1	; 225
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     5a8:	84 e0       	ldi	r24, 0x04	; 4
     5aa:	b1 50       	subi	r27, 0x01	; 1
     5ac:	20 40       	sbci	r18, 0x00	; 0
     5ae:	80 40       	sbci	r24, 0x00	; 0
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     5b4:	00 00       	nop
     5b6:	89 e4       	ldi	r24, 0x49	; 73
     5b8:	95 e0       	ldi	r25, 0x05	; 5
     5ba:	ae d3       	rcall	.+1884   	; 0xd18 <MatchCommand>
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	fc 01       	movw	r30, r24
     5c0:	37 97       	sbiw	r30, 0x07	; 7
     5c2:	eb 30       	cpi	r30, 0x0B	; 11
     5c4:	f1 05       	cpc	r31, r1
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P4_REG_A_START_BLOWER_TIME_ADD);
     5c6:	f0 f4       	brcc	.+60     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     5c8:	88 27       	eor	r24, r24
     5ca:	ed 56       	subi	r30, 0x6D	; 109
												break;
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P4_REG_A_END_BLOWER_TIME_ADD);
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	8f 4f       	sbci	r24, 0xFF	; 255
     5d0:	d2 c7       	rjmp	.+4004   	; 0x1576 <__tablejump2__>
												break;
     5d2:	88 e4       	ldi	r24, 0x48	; 72
											}
											
											case REGA:
											{
												ReagentSelected(P4_REG_A_QTY_ADD, P4_REG_A_WAIT_TIME_ADD);
     5d4:	a4 d5       	rcall	.+2888   	; 0x111e <StartBlowerTimeSelected>
     5d6:	16 c0       	rjmp	.+44     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     5d8:	8a e4       	ldi	r24, 0x4A	; 74
												break;
     5da:	ea d5       	rcall	.+3028   	; 0x11b0 <EndBlowerTimeSelected>
											}
											
											case REGB:
											{
												ReagentSelected(P4_REG_B_QTY_ADD, P4_REG_B_WAIT_TIME_ADD);
     5dc:	13 c0       	rjmp	.+38     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     5de:	6e e4       	ldi	r22, 0x4E	; 78
     5e0:	8c e4       	ldi	r24, 0x4C	; 76
												break;
     5e2:	00 d5       	rcall	.+2560   	; 0xfe4 <ReagentSelected>
											}
											
											case REGC:
											{
												ReagentSelected(P4_REG_C_QTY_ADD, P4_REG_C_WAIT_TIME_ADD);
     5e4:	0f c0       	rjmp	.+30     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     5e6:	62 e5       	ldi	r22, 0x52	; 82
     5e8:	80 e5       	ldi	r24, 0x50	; 80
     5ea:	fc d4       	rcall	.+2552   	; 0xfe4 <ReagentSelected>
												break;
     5ec:	0b c0       	rjmp	.+22     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
											}
											
											case REGD:
											{
												ReagentSelected(P4_REG_D_QTY_ADD, P4_REG_D_WAIT_TIME_ADD);
     5ee:	66 e5       	ldi	r22, 0x56	; 86
     5f0:	84 e5       	ldi	r24, 0x54	; 84
												break;
     5f2:	f8 d4       	rcall	.+2544   	; 0xfe4 <ReagentSelected>
											}
											case REGE:
											{
												ReagentSelected(P4_REG_E_QTY_ADD, P4_REG_E_WAIT_TIME_ADD);
     5f4:	07 c0       	rjmp	.+14     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     5f6:	6a e5       	ldi	r22, 0x5A	; 90
     5f8:	88 e5       	ldi	r24, 0x58	; 88
     5fa:	f4 d4       	rcall	.+2536   	; 0xfe4 <ReagentSelected>
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     5fe:	6e e5       	ldi	r22, 0x5E	; 94
     600:	8c e5       	ldi	r24, 0x5C	; 92
     602:	f0 d4       	rcall	.+2528   	; 0xfe4 <ReagentSelected>
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     604:	89 e4       	ldi	r24, 0x49	; 73
     606:	95 e0       	ldi	r25, 0x05	; 5
     608:	87 d3       	rcall	.+1806   	; 0xd18 <MatchCommand>
     60a:	84 36       	cpi	r24, 0x64	; 100
     60c:	59 f6       	brne	.-106    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     60e:	e9 e4       	ldi	r30, 0x49	; 73
     610:	f5 e0       	ldi	r31, 0x05	; 5
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     612:	df 01       	movw	r26, r30
     614:	2c 2f       	mov	r18, r28
     616:	1d 92       	st	X+, r1
     618:	2a 95       	dec	r18
     61a:	e9 f7       	brne	.-6      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     61c:	89 e4       	ldi	r24, 0x49	; 73
     61e:	95 e0       	ldi	r25, 0x05	; 5
     620:	7b d3       	rcall	.+1782   	; 0xd18 <MatchCommand>
     622:	84 36       	cpi	r24, 0x64	; 100
     624:	09 f0       	breq	.+2      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
     626:	a9 cf       	rjmp	.-174    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     628:	e9 e4       	ldi	r30, 0x49	; 73
     62a:	f5 e0       	ldi	r31, 0x05	; 5
     62c:	df 01       	movw	r26, r30
     62e:	2c 2f       	mov	r18, r28
     630:	1d 92       	st	X+, r1
     632:	2a 95       	dec	r18
     634:	e9 f7       	brne	.-6      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     636:	c2 cd       	rjmp	.-1148   	; 0x1bc <main+0x3e>
     638:	8f ef       	ldi	r24, 0xFF	; 255
			case SERVICE:
				{
					while(1)
					{
						_delay_ms(DELAY_IN_LOOP);
						SpinTimeSelected(SPIN_TIME_ADD);
     63a:	91 ee       	ldi	r25, 0xE1	; 225
						break;
					}
					break;
     63c:	a4 e0       	ldi	r26, 0x04	; 4
				
			case TESTBENCH:
				{
					while(1)
					{
						if (!strcmp(rec_bufferglob, "motorA_ON"))
     63e:	81 50       	subi	r24, 0x01	; 1
     640:	90 40       	sbci	r25, 0x00	; 0
     642:	a0 40       	sbci	r26, 0x00	; 0
     644:	e1 f7       	brne	.-8      	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     646:	00 c0       	rjmp	.+0      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     648:	00 00       	nop
     64a:	80 e6       	ldi	r24, 0x60	; 96
							GPIO_WriteToPin(&Reagent_A_pump, HIGH);
     64c:	fa d5       	rcall	.+3060   	; 0x1242 <SpinTimeSelected>
     64e:	b6 cd       	rjmp	.-1172   	; 0x1bc <main+0x3e>
     650:	6d ef       	ldi	r22, 0xFD	; 253
     652:	72 e0       	ldi	r23, 0x02	; 2
						if (!strcmp(rec_bufferglob, "motorA_OFF"))
     654:	89 e4       	ldi	r24, 0x49	; 73
     656:	95 e0       	ldi	r25, 0x05	; 5
     658:	c3 d7       	rcall	.+3974   	; 0x15e0 <strcmp>
     65a:	89 2b       	or	r24, r25
     65c:	21 f4       	brne	.+8      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	8f e7       	ldi	r24, 0x7F	; 127
							GPIO_WriteToPin(&Reagent_A_pump, LOW);
     662:	94 e0       	ldi	r25, 0x04	; 4
     664:	cb d2       	rcall	.+1430   	; 0xbfc <GPIO_WriteToPin>
     666:	67 e0       	ldi	r22, 0x07	; 7
     668:	73 e0       	ldi	r23, 0x03	; 3
						
						if (!strcmp(rec_bufferglob, "motorB_ON"))
     66a:	89 e4       	ldi	r24, 0x49	; 73
     66c:	95 e0       	ldi	r25, 0x05	; 5
     66e:	b8 d7       	rcall	.+3952   	; 0x15e0 <strcmp>
     670:	89 2b       	or	r24, r25
     672:	21 f4       	brne	.+8      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	8f e7       	ldi	r24, 0x7F	; 127
							GPIO_WriteToPin(&Reagent_B_pump, HIGH);
     678:	94 e0       	ldi	r25, 0x04	; 4
     67a:	c0 d2       	rcall	.+1408   	; 0xbfc <GPIO_WriteToPin>
     67c:	62 e1       	ldi	r22, 0x12	; 18
     67e:	73 e0       	ldi	r23, 0x03	; 3
						if (!strcmp(rec_bufferglob, "motorB_OFF"))
     680:	89 e4       	ldi	r24, 0x49	; 73
     682:	95 e0       	ldi	r25, 0x05	; 5
     684:	ad d7       	rcall	.+3930   	; 0x15e0 <strcmp>
     686:	89 2b       	or	r24, r25
     688:	21 f4       	brne	.+8      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
     68a:	61 e0       	ldi	r22, 0x01	; 1
							GPIO_WriteToPin(&Reagent_B_pump, LOW);
     68c:	8d eb       	ldi	r24, 0xBD	; 189
     68e:	94 e0       	ldi	r25, 0x04	; 4
     690:	b5 d2       	rcall	.+1386   	; 0xbfc <GPIO_WriteToPin>
     692:	6c e1       	ldi	r22, 0x1C	; 28
						
						if (!strcmp(rec_bufferglob, "motorC_ON"))
     694:	73 e0       	ldi	r23, 0x03	; 3
     696:	89 e4       	ldi	r24, 0x49	; 73
     698:	95 e0       	ldi	r25, 0x05	; 5
     69a:	a2 d7       	rcall	.+3908   	; 0x15e0 <strcmp>
     69c:	89 2b       	or	r24, r25
     69e:	21 f4       	brne	.+8      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
     6a0:	60 e0       	ldi	r22, 0x00	; 0
							GPIO_WriteToPin(&Reagent_C_pump, HIGH);
     6a2:	8d eb       	ldi	r24, 0xBD	; 189
     6a4:	94 e0       	ldi	r25, 0x04	; 4
     6a6:	aa d2       	rcall	.+1364   	; 0xbfc <GPIO_WriteToPin>
     6a8:	67 e2       	ldi	r22, 0x27	; 39
						if (!strcmp(rec_bufferglob, "motorC_OFF"))
     6aa:	73 e0       	ldi	r23, 0x03	; 3
     6ac:	89 e4       	ldi	r24, 0x49	; 73
     6ae:	95 e0       	ldi	r25, 0x05	; 5
     6b0:	97 d7       	rcall	.+3886   	; 0x15e0 <strcmp>
     6b2:	89 2b       	or	r24, r25
     6b4:	21 f4       	brne	.+8      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     6b6:	61 e0       	ldi	r22, 0x01	; 1
							GPIO_WriteToPin(&Reagent_C_pump, LOW);
     6b8:	8f e0       	ldi	r24, 0x0F	; 15
     6ba:	95 e0       	ldi	r25, 0x05	; 5
     6bc:	9f d2       	rcall	.+1342   	; 0xbfc <GPIO_WriteToPin>
     6be:	61 e3       	ldi	r22, 0x31	; 49
						
						if (!strcmp(rec_bufferglob, "motorD_ON"))
     6c0:	73 e0       	ldi	r23, 0x03	; 3
     6c2:	89 e4       	ldi	r24, 0x49	; 73
     6c4:	95 e0       	ldi	r25, 0x05	; 5
     6c6:	8c d7       	rcall	.+3864   	; 0x15e0 <strcmp>
     6c8:	89 2b       	or	r24, r25
     6ca:	21 f4       	brne	.+8      	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
							GPIO_WriteToPin(&Reagent_D_pump, HIGH);
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	8f e0       	ldi	r24, 0x0F	; 15
     6d0:	95 e0       	ldi	r25, 0x05	; 5
     6d2:	94 d2       	rcall	.+1320   	; 0xbfc <GPIO_WriteToPin>
     6d4:	6c e3       	ldi	r22, 0x3C	; 60
						if (!strcmp(rec_bufferglob, "motorD_OFF"))
     6d6:	73 e0       	ldi	r23, 0x03	; 3
     6d8:	89 e4       	ldi	r24, 0x49	; 73
     6da:	95 e0       	ldi	r25, 0x05	; 5
     6dc:	81 d7       	rcall	.+3842   	; 0x15e0 <strcmp>
     6de:	89 2b       	or	r24, r25
     6e0:	21 f4       	brne	.+8      	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
     6e2:	61 e0       	ldi	r22, 0x01	; 1
							GPIO_WriteToPin(&Reagent_D_pump, LOW);
     6e4:	87 e0       	ldi	r24, 0x07	; 7
     6e6:	95 e0       	ldi	r25, 0x05	; 5
     6e8:	89 d2       	rcall	.+1298   	; 0xbfc <GPIO_WriteToPin>
     6ea:	66 e4       	ldi	r22, 0x46	; 70
     6ec:	73 e0       	ldi	r23, 0x03	; 3
						
						if (!strcmp(rec_bufferglob, "motorE_ON"))
     6ee:	89 e4       	ldi	r24, 0x49	; 73
     6f0:	95 e0       	ldi	r25, 0x05	; 5
     6f2:	76 d7       	rcall	.+3820   	; 0x15e0 <strcmp>
     6f4:	89 2b       	or	r24, r25
     6f6:	21 f4       	brne	.+8      	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	87 e0       	ldi	r24, 0x07	; 7
							GPIO_WriteToPin(&Reagent_E_pump, HIGH);
     6fc:	95 e0       	ldi	r25, 0x05	; 5
     6fe:	7e d2       	rcall	.+1276   	; 0xbfc <GPIO_WriteToPin>
     700:	61 e5       	ldi	r22, 0x51	; 81
     702:	73 e0       	ldi	r23, 0x03	; 3
     704:	89 e4       	ldi	r24, 0x49	; 73
						if (!strcmp(rec_bufferglob, "motorE_OFF"))
     706:	95 e0       	ldi	r25, 0x05	; 5
     708:	6b d7       	rcall	.+3798   	; 0x15e0 <strcmp>
     70a:	89 2b       	or	r24, r25
     70c:	21 f4       	brne	.+8      	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	89 ec       	ldi	r24, 0xC9	; 201
							GPIO_WriteToPin(&Reagent_E_pump, LOW);
     712:	94 e0       	ldi	r25, 0x04	; 4
     714:	73 d2       	rcall	.+1254   	; 0xbfc <GPIO_WriteToPin>
     716:	6b e5       	ldi	r22, 0x5B	; 91
     718:	73 e0       	ldi	r23, 0x03	; 3
					
						if (!strcmp(rec_bufferglob, "motorDRAIN_ON"))
     71a:	89 e4       	ldi	r24, 0x49	; 73
     71c:	95 e0       	ldi	r25, 0x05	; 5
     71e:	60 d7       	rcall	.+3776   	; 0x15e0 <strcmp>
     720:	89 2b       	or	r24, r25
     722:	21 f4       	brne	.+8      	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	89 ec       	ldi	r24, 0xC9	; 201
     728:	94 e0       	ldi	r25, 0x04	; 4
							GPIO_WriteToPin(&Drain_pump, HIGH);
     72a:	68 d2       	rcall	.+1232   	; 0xbfc <GPIO_WriteToPin>
     72c:	66 e6       	ldi	r22, 0x66	; 102
     72e:	73 e0       	ldi	r23, 0x03	; 3
     730:	89 e4       	ldi	r24, 0x49	; 73
     732:	95 e0       	ldi	r25, 0x05	; 5
						if (!strcmp(rec_bufferglob, "motorDRAIN_OFF"))
     734:	55 d7       	rcall	.+3754   	; 0x15e0 <strcmp>
     736:	89 2b       	or	r24, r25
     738:	21 f4       	brne	.+8      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	8b e0       	ldi	r24, 0x0B	; 11
     73e:	95 e0       	ldi	r25, 0x05	; 5
     740:	5d d2       	rcall	.+1210   	; 0xbfc <GPIO_WriteToPin>
     742:	64 e7       	ldi	r22, 0x74	; 116
							GPIO_WriteToPin(&Drain_pump, LOW);
     744:	73 e0       	ldi	r23, 0x03	; 3
     746:	89 e4       	ldi	r24, 0x49	; 73
     748:	95 e0       	ldi	r25, 0x05	; 5
     74a:	4a d7       	rcall	.+3732   	; 0x15e0 <strcmp>
     74c:	89 2b       	or	r24, r25
					
						if (!strcmp(rec_bufferglob, "FAN_ON"))
     74e:	21 f4       	brne	.+8      	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	8b e0       	ldi	r24, 0x0B	; 11
     754:	95 e0       	ldi	r25, 0x05	; 5
     756:	52 d2       	rcall	.+1188   	; 0xbfc <GPIO_WriteToPin>
     758:	63 e8       	ldi	r22, 0x83	; 131
     75a:	73 e0       	ldi	r23, 0x03	; 3
     75c:	89 e4       	ldi	r24, 0x49	; 73
							GPIO_WriteToPin(&Fan, HIGH);
     75e:	95 e0       	ldi	r25, 0x05	; 5
     760:	3f d7       	rcall	.+3710   	; 0x15e0 <strcmp>
     762:	89 2b       	or	r24, r25
     764:	21 f4       	brne	.+8      	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
     766:	61 e0       	ldi	r22, 0x01	; 1
						if (!strcmp(rec_bufferglob, "FAN_OFF"))
     768:	83 e1       	ldi	r24, 0x13	; 19
     76a:	95 e0       	ldi	r25, 0x05	; 5
     76c:	47 d2       	rcall	.+1166   	; 0xbfc <GPIO_WriteToPin>
     76e:	6a e8       	ldi	r22, 0x8A	; 138
     770:	73 e0       	ldi	r23, 0x03	; 3
     772:	89 e4       	ldi	r24, 0x49	; 73
     774:	95 e0       	ldi	r25, 0x05	; 5
     776:	34 d7       	rcall	.+3688   	; 0x15e0 <strcmp>
							GPIO_WriteToPin(&Fan, LOW);
     778:	89 2b       	or	r24, r25
     77a:	21 f4       	brne	.+8      	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	83 e1       	ldi	r24, 0x13	; 19
     780:	95 e0       	ldi	r25, 0x05	; 5
					
						if (!strcmp(rec_bufferglob, "BLOWER_ON"))
     782:	3c d2       	rcall	.+1144   	; 0xbfc <GPIO_WriteToPin>
     784:	62 e9       	ldi	r22, 0x92	; 146
     786:	73 e0       	ldi	r23, 0x03	; 3
     788:	89 e4       	ldi	r24, 0x49	; 73
     78a:	95 e0       	ldi	r25, 0x05	; 5
     78c:	29 d7       	rcall	.+3666   	; 0x15e0 <strcmp>
     78e:	89 2b       	or	r24, r25
     790:	21 f4       	brne	.+8      	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
							GPIO_WriteToPin(&Blower, HIGH);
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	81 ec       	ldi	r24, 0xC1	; 193
     796:	94 e0       	ldi	r25, 0x04	; 4
     798:	31 d2       	rcall	.+1122   	; 0xbfc <GPIO_WriteToPin>
     79a:	6c e9       	ldi	r22, 0x9C	; 156
						if (!strcmp(rec_bufferglob, "BLOWER_OFF"))
     79c:	73 e0       	ldi	r23, 0x03	; 3
     79e:	89 e4       	ldi	r24, 0x49	; 73
     7a0:	95 e0       	ldi	r25, 0x05	; 5
     7a2:	1e d7       	rcall	.+3644   	; 0x15e0 <strcmp>
     7a4:	89 2b       	or	r24, r25
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	81 ec       	ldi	r24, 0xC1	; 193
							GPIO_WriteToPin(&Blower, LOW);
     7ac:	94 e0       	ldi	r25, 0x04	; 4
     7ae:	26 d2       	rcall	.+1100   	; 0xbfc <GPIO_WriteToPin>
     7b0:	67 ea       	ldi	r22, 0xA7	; 167
     7b2:	73 e0       	ldi	r23, 0x03	; 3
     7b4:	89 e4       	ldi	r24, 0x49	; 73
						
						if (!strcmp(rec_bufferglob, "STEPPER_ON"))
     7b6:	95 e0       	ldi	r25, 0x05	; 5
     7b8:	13 d7       	rcall	.+3622   	; 0x15e0 <strcmp>
     7ba:	89 2b       	or	r24, r25
     7bc:	11 f4       	brne	.+4      	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
     7be:	8f e0       	ldi	r24, 0x0F	; 15
     7c0:	11 d6       	rcall	.+3106   	; 0x13e4 <Spin_motor>
     7c2:	89 e4       	ldi	r24, 0x49	; 73
     7c4:	95 e0       	ldi	r25, 0x05	; 5
							Spin_motor(15);
     7c6:	a8 d2       	rcall	.+1360   	; 0xd18 <MatchCommand>
     7c8:	84 36       	cpi	r24, 0x64	; 100
     7ca:	09 f0       	breq	.+2      	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
						
						
						if (MatchCommand(rec_bufferglob)==BACK)
     7cc:	41 cf       	rjmp	.-382    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     7ce:	e9 e4       	ldi	r30, 0x49	; 73
     7d0:	f5 e0       	ldi	r31, 0x05	; 5
     7d2:	df 01       	movw	r26, r30
     7d4:	2c 2f       	mov	r18, r28
     7d6:	1d 92       	st	X+, r1
     7d8:	2a 95       	dec	r18
						{
							memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     7da:	e9 f7       	brne	.-6      	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
     7dc:	ef cc       	rjmp	.-1570   	; 0x1bc <main+0x3e>

000007de <__vector_51>:
     7de:	1f 92       	push	r1
     7e0:	0f 92       	push	r0
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	0f 92       	push	r0
     7e6:	11 24       	eor	r1, r1
							break;
						}
						//memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
					}
					break;
     7e8:	0b b6       	in	r0, 0x3b	; 59
}



ISR(USART2_RX_vect)
{
     7ea:	0f 92       	push	r0
     7ec:	2f 93       	push	r18
     7ee:	3f 93       	push	r19
     7f0:	4f 93       	push	r20
     7f2:	5f 93       	push	r21
     7f4:	6f 93       	push	r22
     7f6:	7f 93       	push	r23
     7f8:	8f 93       	push	r24
     7fa:	9f 93       	push	r25
     7fc:	af 93       	push	r26
     7fe:	bf 93       	push	r27
     800:	cf 93       	push	r28
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31
	unsigned char rec = USART2_Receive();
     806:	53 d2       	rcall	.+1190   	; 0xcae <USART2_Receive>
     808:	c8 2f       	mov	r28, r24
	USART2_Transmit(rec);
     80a:	49 d2       	rcall	.+1170   	; 0xc9e <USART2_Transmit>
     80c:	cc 33       	cpi	r28, 0x3C	; 60
	//USART0_Transmit(rec);
	if ( (rec == '<') && (rec_start == 0)) // new packet receiving
     80e:	c1 f4       	brne	.+48     	; 0x840 <__vector_51+0x62>
     810:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <rec_start>
     814:	81 11       	cpse	r24, r1
     816:	16 c0       	rjmp	.+44     	; 0x844 <__vector_51+0x66>
     818:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <myindex>
	{
		myindex = 0;
     81c:	81 e0       	ldi	r24, 0x01	; 1
		rec_start = 1;
     81e:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <rec_start>
     822:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// rec_buff clear
     824:	e7 e8       	ldi	r30, 0x87	; 135
     826:	f4 e0       	ldi	r31, 0x04	; 4
     828:	df 01       	movw	r26, r30
     82a:	98 2f       	mov	r25, r24
     82c:	1d 92       	st	X+, r1
     82e:	9a 95       	dec	r25
     830:	e9 f7       	brne	.-6      	; 0x82c <__vector_51+0x4e>
     832:	e9 e4       	ldi	r30, 0x49	; 73
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     834:	f5 e0       	ldi	r31, 0x05	; 5
     836:	df 01       	movw	r26, r30
     838:	1d 92       	st	X+, r1
     83a:	8a 95       	dec	r24
     83c:	e9 f7       	brne	.-6      	; 0x838 <__vector_51+0x5a>
     83e:	28 c0       	rjmp	.+80     	; 0x890 <__vector_51+0xb2>
     840:	ce 33       	cpi	r28, 0x3E	; 62
	}
	
	else if ( ( rec != '>') && (rec_start == 1)  )				// collecting data in buffer
     842:	11 f1       	breq	.+68     	; 0x888 <__vector_51+0xaa>
     844:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <rec_start>
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	11 f5       	brne	.+68     	; 0x890 <__vector_51+0xb2>
     84c:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <myindex>
	{
		rec_buff[myindex] = rec;
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	e9 57       	subi	r30, 0x79	; 121
     854:	fb 4f       	sbci	r31, 0xFB	; 251
     856:	c0 83       	st	Z, r28
     858:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <myindex>
		myindex++;
     85c:	8f 5f       	subi	r24, 0xFF	; 255
     85e:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <myindex>
     862:	16 c0       	rjmp	.+44     	; 0x890 <__vector_51+0xb2>
     864:	67 e8       	ldi	r22, 0x87	; 135
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )					// ending character received
	{
		strcpy(rec_bufferglob, rec_buff);						// copy data into rec_bufferglob
     866:	74 e0       	ldi	r23, 0x04	; 4
     868:	89 e4       	ldi	r24, 0x49	; 73
     86a:	95 e0       	ldi	r25, 0x05	; 5
     86c:	c2 d6       	rcall	.+3460   	; 0x15f2 <strcpy>
     86e:	81 e0       	ldi	r24, 0x01	; 1
		rec_stop = 1;											// rec_stop flag 1
     870:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <rec_stop>
     874:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <rec_start>
		rec_start = 0;											// clear flag
     878:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// clearing rec_buff so that it can receive new data
     87a:	e7 e8       	ldi	r30, 0x87	; 135
     87c:	f4 e0       	ldi	r31, 0x04	; 4
     87e:	df 01       	movw	r26, r30
     880:	1d 92       	st	X+, r1
     882:	8a 95       	dec	r24
     884:	e9 f7       	brne	.-6      	; 0x880 <__vector_51+0xa2>
     886:	04 c0       	rjmp	.+8      	; 0x890 <__vector_51+0xb2>
		
	}
}
     888:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <rec_start>
		myindex++;
		//rec = '\0';
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )					// ending character received
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	51 f3       	breq	.-44     	; 0x864 <__vector_51+0x86>
     890:	ff 91       	pop	r31
		rec_stop = 1;											// rec_stop flag 1
		rec_start = 0;											// clear flag
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// clearing rec_buff so that it can receive new data
		
	}
}
     892:	ef 91       	pop	r30
     894:	cf 91       	pop	r28
     896:	bf 91       	pop	r27
     898:	af 91       	pop	r26
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	7f 91       	pop	r23
     8a0:	6f 91       	pop	r22
     8a2:	5f 91       	pop	r21
     8a4:	4f 91       	pop	r20
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	0f 90       	pop	r0
     8ac:	0b be       	out	0x3b, r0	; 59
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0f 90       	pop	r0
     8b4:	1f 90       	pop	r1
     8b6:	18 95       	reti

000008b8 <__vector_25>:
     8b8:	1f 92       	push	r1



ISR(USART0_RX_vect)
{
     8ba:	0f 92       	push	r0
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	0f 92       	push	r0
     8c0:	11 24       	eor	r1, r1
     8c2:	0b b6       	in	r0, 0x3b	; 59
     8c4:	0f 92       	push	r0
     8c6:	2f 93       	push	r18
     8c8:	3f 93       	push	r19
     8ca:	4f 93       	push	r20
     8cc:	5f 93       	push	r21
     8ce:	6f 93       	push	r22
     8d0:	7f 93       	push	r23
     8d2:	8f 93       	push	r24
     8d4:	9f 93       	push	r25
     8d6:	af 93       	push	r26
     8d8:	bf 93       	push	r27
     8da:	cf 93       	push	r28
     8dc:	ef 93       	push	r30
     8de:	ff 93       	push	r31
	unsigned char rec = USART0_Receive();
     8e0:	ee d1       	rcall	.+988    	; 0xcbe <USART0_Receive>
     8e2:	c8 2f       	mov	r28, r24
	USART2_Transmit(rec);
     8e4:	dc d1       	rcall	.+952    	; 0xc9e <USART2_Transmit>
     8e6:	cc 33       	cpi	r28, 0x3C	; 60
	//USART0_Transmit(rec);
	if ( (rec == '<') && (rec_start == 0)) // new packet
     8e8:	c1 f4       	brne	.+48     	; 0x91a <__vector_25+0x62>
     8ea:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <rec_start>
     8ee:	81 11       	cpse	r24, r1
     8f0:	16 c0       	rjmp	.+44     	; 0x91e <__vector_25+0x66>
     8f2:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <myindex>
	{
		myindex = 0;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
		rec_start = 1;
     8f8:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <rec_start>
     8fc:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));
     8fe:	e7 e8       	ldi	r30, 0x87	; 135
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	df 01       	movw	r26, r30
     904:	98 2f       	mov	r25, r24
     906:	1d 92       	st	X+, r1
     908:	9a 95       	dec	r25
     90a:	e9 f7       	brne	.-6      	; 0x906 <__vector_25+0x4e>
     90c:	e9 e4       	ldi	r30, 0x49	; 73
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));
     90e:	f5 e0       	ldi	r31, 0x05	; 5
     910:	df 01       	movw	r26, r30
     912:	1d 92       	st	X+, r1
     914:	8a 95       	dec	r24
     916:	e9 f7       	brne	.-6      	; 0x912 <__vector_25+0x5a>
     918:	23 c0       	rjmp	.+70     	; 0x960 <__vector_25+0xa8>
     91a:	ce 33       	cpi	r28, 0x3E	; 62
	}
	
	else if ( ( rec != '>') && (rec_start == 1)  )	// collecting data in buffer
     91c:	51 f1       	breq	.+84     	; 0x972 <__vector_25+0xba>
     91e:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <rec_start>
     922:	81 30       	cpi	r24, 0x01	; 1
     924:	e9 f4       	brne	.+58     	; 0x960 <__vector_25+0xa8>
     926:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <myindex>
	{
		rec_buff[myindex] = rec;
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	e9 57       	subi	r30, 0x79	; 121
     92e:	fb 4f       	sbci	r31, 0xFB	; 251
     930:	c0 83       	st	Z, r28
     932:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <myindex>
		myindex++;
     936:	8f 5f       	subi	r24, 0xFF	; 255
     938:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <myindex>
     93c:	11 c0       	rjmp	.+34     	; 0x960 <__vector_25+0xa8>
     93e:	67 e8       	ldi	r22, 0x87	; 135
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )
	{
		strcpy(rec_bufferglob, rec_buff);
     940:	74 e0       	ldi	r23, 0x04	; 4
     942:	89 e4       	ldi	r24, 0x49	; 73
     944:	95 e0       	ldi	r25, 0x05	; 5
     946:	55 d6       	rcall	.+3242   	; 0x15f2 <strcpy>
     948:	81 e0       	ldi	r24, 0x01	; 1
		//USART2_transmitstring(rec_bufferglob);
		rec_stop = 1;
     94a:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <rec_stop>
     94e:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <rec_start>
		rec_start = 0;
     952:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));
     954:	e7 e8       	ldi	r30, 0x87	; 135
     956:	f4 e0       	ldi	r31, 0x04	; 4
     958:	df 01       	movw	r26, r30
     95a:	1d 92       	st	X+, r1
     95c:	8a 95       	dec	r24
     95e:	e9 f7       	brne	.-6      	; 0x95a <__vector_25+0xa2>
     960:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <myindex>
		
	}
	if(myindex > (PACKET_SIZE -1 ))
     964:	82 33       	cpi	r24, 0x32	; 50
     966:	50 f0       	brcs	.+20     	; 0x97c <__vector_25+0xc4>
     968:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <myindex>
	{
		myindex = 0;
     96c:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <rec_start>
		rec_start = 0;
     970:	05 c0       	rjmp	.+10     	; 0x97c <__vector_25+0xc4>
	}
}
     972:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <rec_start>
		myindex++;
		//rec = '\0';
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )
     976:	81 30       	cpi	r24, 0x01	; 1
     978:	99 f7       	brne	.-26     	; 0x960 <__vector_25+0xa8>
     97a:	e1 cf       	rjmp	.-62     	; 0x93e <__vector_25+0x86>
     97c:	ff 91       	pop	r31
	if(myindex > (PACKET_SIZE -1 ))
	{
		myindex = 0;
		rec_start = 0;
	}
}
     97e:	ef 91       	pop	r30
     980:	cf 91       	pop	r28
     982:	bf 91       	pop	r27
     984:	af 91       	pop	r26
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	7f 91       	pop	r23
     98c:	6f 91       	pop	r22
     98e:	5f 91       	pop	r21
     990:	4f 91       	pop	r20
     992:	3f 91       	pop	r19
     994:	2f 91       	pop	r18
     996:	0f 90       	pop	r0
     998:	0b be       	out	0x3b, r0	; 59
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <__vector_20>:
     9a4:	1f 92       	push	r1
	TCCR1B = (5<<0);	// prescaler 1024
	
}
*/
ISR(TIMER1_OVF_vect)
{
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	0b b6       	in	r0, 0x3b	; 59
     9b0:	0f 92       	push	r0
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
	time_in_seconds++;
     9ca:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <time_in_seconds>
     9ce:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <time_in_seconds+0x1>
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <time_in_seconds+0x1>
     9d8:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <time_in_seconds>
	itoa(time_in_seconds, buffer, 10);
     9dc:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <time_in_seconds>
     9e0:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <time_in_seconds+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9e4:	4a e0       	ldi	r20, 0x0A	; 10
     9e6:	65 ed       	ldi	r22, 0xD5	; 213
     9e8:	74 e0       	ldi	r23, 0x04	; 4
     9ea:	31 d6       	rcall	.+3170   	; 0x164e <__itoa_ncheck>
	USART2_transmitstring("\ntime in seconds = ");
     9ec:	82 eb       	ldi	r24, 0xB2	; 178
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	6e d1       	rcall	.+732    	; 0xcce <USART2_transmitstring>
	USART2_transmitstring(buffer);
     9f2:	85 ed       	ldi	r24, 0xD5	; 213
     9f4:	94 e0       	ldi	r25, 0x04	; 4
     9f6:	6b d1       	rcall	.+726    	; 0xcce <USART2_transmitstring>
	memset(buffer, '\0', PACKET_SIZE * sizeof(buffer[0]));	// rec_bufferglob clear
     9f8:	82 e3       	ldi	r24, 0x32	; 50
     9fa:	e5 ed       	ldi	r30, 0xD5	; 213
     9fc:	f4 e0       	ldi	r31, 0x04	; 4
     9fe:	df 01       	movw	r26, r30
     a00:	1d 92       	st	X+, r1
     a02:	8a 95       	dec	r24
     a04:	e9 f7       	brne	.-6      	; 0xa00 <__vector_20+0x5c>
	TCNT1 =0xC2F7;	// This value will generate 1 Sec delay for prescaler 1024 and 16 mhz crystel
     a06:	87 ef       	ldi	r24, 0xF7	; 247
     a08:	92 ec       	ldi	r25, 0xC2	; 194
     a0a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     a0e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCCR1B = (5<<0);	// prescaler 1024
     a12:	85 e0       	ldi	r24, 0x05	; 5
     a14:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
}
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0b be       	out	0x3b, r0	; 59
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <EEPROM_write>:
	
}

void my_delay_ms(uint32_t ms)
{
	while (0 < ms--)
     a3e:	f8 94       	cli
     a40:	f9 99       	sbic	0x1f, 1	; 31
     a42:	fe cf       	rjmp	.-4      	; 0xa40 <EEPROM_write+0x2>
     a44:	92 bd       	out	0x22, r25	; 34
     a46:	81 bd       	out	0x21, r24	; 33
     a48:	60 bd       	out	0x20, r22	; 32
     a4a:	fa 9a       	sbi	0x1f, 2	; 31
     a4c:	f9 9a       	sbi	0x1f, 1	; 31
     a4e:	78 94       	sei
     a50:	08 95       	ret

00000a52 <EEPROM_read>:
     a52:	f9 99       	sbic	0x1f, 1	; 31
     a54:	fe cf       	rjmp	.-4      	; 0xa52 <EEPROM_read>
     a56:	92 bd       	out	0x22, r25	; 34
     a58:	81 bd       	out	0x21, r24	; 33
     a5a:	f8 9a       	sbi	0x1f, 0	; 31
     a5c:	80 b5       	in	r24, 0x20	; 32
     a5e:	08 95       	ret

00000a60 <EEPROM_Write2Bytes>:
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
     a68:	17 2f       	mov	r17, r23
     a6a:	f8 94       	cli
     a6c:	e8 df       	rcall	.-48     	; 0xa3e <EEPROM_write>
     a6e:	61 2f       	mov	r22, r17
     a70:	ce 01       	movw	r24, r28
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	e4 df       	rcall	.-56     	; 0xa3e <EEPROM_write>
     a76:	78 94       	sei
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	08 95       	ret

00000a80 <EEPROM_Read2Bytes>:
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	8c 01       	movw	r16, r24
     a88:	e4 df       	rcall	.-56     	; 0xa52 <EEPROM_read>
     a8a:	c8 2f       	mov	r28, r24
     a8c:	c8 01       	movw	r24, r16
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	e0 df       	rcall	.-64     	; 0xa52 <EEPROM_read>
     a92:	2c 2f       	mov	r18, r28
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	a9 01       	movw	r20, r18
     a98:	58 2b       	or	r21, r24
     a9a:	ca 01       	movw	r24, r20
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <GPIO_Init>:
     aa4:	fc 01       	movw	r30, r24
     aa6:	83 81       	ldd	r24, Z+3	; 0x03
     aa8:	81 11       	cpse	r24, r1
     aaa:	11 c0       	rjmp	.+34     	; 0xace <GPIO_Init+0x2a>
     aac:	30 81       	ld	r19, Z
     aae:	01 80       	ldd	r0, Z+1	; 0x01
     ab0:	f2 81       	ldd	r31, Z+2	; 0x02
     ab2:	e0 2d       	mov	r30, r0
     ab4:	22 91       	ld	r18, -Z
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <GPIO_Init+0x1c>
     abc:	88 0f       	add	r24, r24
     abe:	99 1f       	adc	r25, r25
     ac0:	3a 95       	dec	r19
     ac2:	e2 f7       	brpl	.-8      	; 0xabc <GPIO_Init+0x18>
     ac4:	80 95       	com	r24
     ac6:	90 95       	com	r25
     ac8:	82 23       	and	r24, r18
     aca:	80 83       	st	Z, r24
     acc:	08 95       	ret
     ace:	30 81       	ld	r19, Z
     ad0:	01 80       	ldd	r0, Z+1	; 0x01
     ad2:	f2 81       	ldd	r31, Z+2	; 0x02
     ad4:	e0 2d       	mov	r30, r0
     ad6:	22 91       	ld	r18, -Z
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <GPIO_Init+0x3e>
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	3a 95       	dec	r19
     ae4:	e2 f7       	brpl	.-8      	; 0xade <GPIO_Init+0x3a>
     ae6:	82 2b       	or	r24, r18
     ae8:	80 83       	st	Z, r24
     aea:	08 95       	ret

00000aec <GpioPinInit>:
     aec:	e1 ed       	ldi	r30, 0xD1	; 209
     aee:	f4 e0       	ldi	r31, 0x04	; 4
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	83 83       	std	Z+3, r24	; 0x03
     af4:	80 83       	st	Z, r24
     af6:	22 e0       	ldi	r18, 0x02	; 2
     af8:	31 e0       	ldi	r19, 0x01	; 1
     afa:	32 83       	std	Z+2, r19	; 0x02
     afc:	21 83       	std	Z+1, r18	; 0x01
     afe:	e5 ec       	ldi	r30, 0xC5	; 197
     b00:	f4 e0       	ldi	r31, 0x04	; 4
     b02:	13 82       	std	Z+3, r1	; 0x03
     b04:	10 82       	st	Z, r1
     b06:	32 83       	std	Z+2, r19	; 0x02
     b08:	21 83       	std	Z+1, r18	; 0x01
     b0a:	ed ec       	ldi	r30, 0xCD	; 205
     b0c:	f4 e0       	ldi	r31, 0x04	; 4
     b0e:	83 83       	std	Z+3, r24	; 0x03
     b10:	10 82       	st	Z, r1
     b12:	44 e3       	ldi	r20, 0x34	; 52
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	52 83       	std	Z+2, r21	; 0x02
     b18:	41 83       	std	Z+1, r20	; 0x01
     b1a:	e9 eb       	ldi	r30, 0xB9	; 185
     b1c:	f4 e0       	ldi	r31, 0x04	; 4
     b1e:	83 83       	std	Z+3, r24	; 0x03
     b20:	10 82       	st	Z, r1
     b22:	48 e2       	ldi	r20, 0x28	; 40
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	52 83       	std	Z+2, r21	; 0x02
     b28:	41 83       	std	Z+1, r20	; 0x01
     b2a:	ef e7       	ldi	r30, 0x7F	; 127
     b2c:	f4 e0       	ldi	r31, 0x04	; 4
     b2e:	83 83       	std	Z+3, r24	; 0x03
     b30:	96 e0       	ldi	r25, 0x06	; 6
     b32:	90 83       	st	Z, r25
     b34:	45 e2       	ldi	r20, 0x25	; 37
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	52 83       	std	Z+2, r21	; 0x02
     b3a:	41 83       	std	Z+1, r20	; 0x01
     b3c:	ed eb       	ldi	r30, 0xBD	; 189
     b3e:	f4 e0       	ldi	r31, 0x04	; 4
     b40:	83 83       	std	Z+3, r24	; 0x03
     b42:	95 e0       	ldi	r25, 0x05	; 5
     b44:	90 83       	st	Z, r25
     b46:	52 83       	std	Z+2, r21	; 0x02
     b48:	41 83       	std	Z+1, r20	; 0x01
     b4a:	ef e0       	ldi	r30, 0x0F	; 15
     b4c:	f5 e0       	ldi	r31, 0x05	; 5
     b4e:	83 83       	std	Z+3, r24	; 0x03
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	60 83       	st	Z, r22
     b54:	52 83       	std	Z+2, r21	; 0x02
     b56:	41 83       	std	Z+1, r20	; 0x01
     b58:	e7 e0       	ldi	r30, 0x07	; 7
     b5a:	f5 e0       	ldi	r31, 0x05	; 5
     b5c:	83 83       	std	Z+3, r24	; 0x03
     b5e:	90 83       	st	Z, r25
     b60:	32 83       	std	Z+2, r19	; 0x02
     b62:	21 83       	std	Z+1, r18	; 0x01
     b64:	e9 ec       	ldi	r30, 0xC9	; 201
     b66:	f4 e0       	ldi	r31, 0x04	; 4
     b68:	83 83       	std	Z+3, r24	; 0x03
     b6a:	60 83       	st	Z, r22
     b6c:	32 83       	std	Z+2, r19	; 0x02
     b6e:	21 83       	std	Z+1, r18	; 0x01
     b70:	eb e0       	ldi	r30, 0x0B	; 11
     b72:	f5 e0       	ldi	r31, 0x05	; 5
     b74:	83 83       	std	Z+3, r24	; 0x03
     b76:	43 e0       	ldi	r20, 0x03	; 3
     b78:	40 83       	st	Z, r20
     b7a:	32 83       	std	Z+2, r19	; 0x02
     b7c:	21 83       	std	Z+1, r18	; 0x01
     b7e:	e3 e8       	ldi	r30, 0x83	; 131
     b80:	f4 e0       	ldi	r31, 0x04	; 4
     b82:	83 83       	std	Z+3, r24	; 0x03
     b84:	27 e0       	ldi	r18, 0x07	; 7
     b86:	20 83       	st	Z, r18
     b88:	2b e2       	ldi	r18, 0x2B	; 43
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	32 83       	std	Z+2, r19	; 0x02
     b8e:	21 83       	std	Z+1, r18	; 0x01
     b90:	e1 ec       	ldi	r30, 0xC1	; 193
     b92:	f4 e0       	ldi	r31, 0x04	; 4
     b94:	83 83       	std	Z+3, r24	; 0x03
     b96:	40 83       	st	Z, r20
     b98:	2b e0       	ldi	r18, 0x0B	; 11
     b9a:	31 e0       	ldi	r19, 0x01	; 1
     b9c:	32 83       	std	Z+2, r19	; 0x02
     b9e:	21 83       	std	Z+1, r18	; 0x01
     ba0:	e3 e1       	ldi	r30, 0x13	; 19
     ba2:	f5 e0       	ldi	r31, 0x05	; 5
     ba4:	83 83       	std	Z+3, r24	; 0x03
     ba6:	90 83       	st	Z, r25
     ba8:	32 83       	std	Z+2, r19	; 0x02
     baa:	21 83       	std	Z+1, r18	; 0x01
     bac:	85 ec       	ldi	r24, 0xC5	; 197
     bae:	94 e0       	ldi	r25, 0x04	; 4
     bb0:	79 df       	rcall	.-270    	; 0xaa4 <GPIO_Init>
     bb2:	81 ed       	ldi	r24, 0xD1	; 209
     bb4:	94 e0       	ldi	r25, 0x04	; 4
     bb6:	76 df       	rcall	.-276    	; 0xaa4 <GPIO_Init>
     bb8:	8d ec       	ldi	r24, 0xCD	; 205
     bba:	94 e0       	ldi	r25, 0x04	; 4
     bbc:	73 df       	rcall	.-282    	; 0xaa4 <GPIO_Init>
     bbe:	89 eb       	ldi	r24, 0xB9	; 185
     bc0:	94 e0       	ldi	r25, 0x04	; 4
     bc2:	70 df       	rcall	.-288    	; 0xaa4 <GPIO_Init>
     bc4:	8f e7       	ldi	r24, 0x7F	; 127
     bc6:	94 e0       	ldi	r25, 0x04	; 4
     bc8:	6d df       	rcall	.-294    	; 0xaa4 <GPIO_Init>
     bca:	8d eb       	ldi	r24, 0xBD	; 189
     bcc:	94 e0       	ldi	r25, 0x04	; 4
     bce:	6a df       	rcall	.-300    	; 0xaa4 <GPIO_Init>
     bd0:	8f e0       	ldi	r24, 0x0F	; 15
     bd2:	95 e0       	ldi	r25, 0x05	; 5
     bd4:	67 df       	rcall	.-306    	; 0xaa4 <GPIO_Init>
     bd6:	87 e0       	ldi	r24, 0x07	; 7
     bd8:	95 e0       	ldi	r25, 0x05	; 5
     bda:	64 df       	rcall	.-312    	; 0xaa4 <GPIO_Init>
     bdc:	89 ec       	ldi	r24, 0xC9	; 201
     bde:	94 e0       	ldi	r25, 0x04	; 4
     be0:	61 df       	rcall	.-318    	; 0xaa4 <GPIO_Init>
     be2:	8b e0       	ldi	r24, 0x0B	; 11
     be4:	95 e0       	ldi	r25, 0x05	; 5
     be6:	5e df       	rcall	.-324    	; 0xaa4 <GPIO_Init>
     be8:	83 e8       	ldi	r24, 0x83	; 131
     bea:	94 e0       	ldi	r25, 0x04	; 4
     bec:	5b df       	rcall	.-330    	; 0xaa4 <GPIO_Init>
     bee:	81 ec       	ldi	r24, 0xC1	; 193
     bf0:	94 e0       	ldi	r25, 0x04	; 4
     bf2:	58 df       	rcall	.-336    	; 0xaa4 <GPIO_Init>
     bf4:	83 e1       	ldi	r24, 0x13	; 19
     bf6:	95 e0       	ldi	r25, 0x05	; 5
     bf8:	55 cf       	rjmp	.-342    	; 0xaa4 <GPIO_Init>
     bfa:	08 95       	ret

00000bfc <GPIO_WriteToPin>:
     bfc:	61 30       	cpi	r22, 0x01	; 1
     bfe:	89 f4       	brne	.+34     	; 0xc22 <GPIO_WriteToPin+0x26>
     c00:	dc 01       	movw	r26, r24
     c02:	3c 91       	ld	r19, X
     c04:	11 96       	adiw	r26, 0x01	; 1
     c06:	ed 91       	ld	r30, X+
     c08:	fc 91       	ld	r31, X
     c0a:	12 97       	sbiw	r26, 0x02	; 2
     c0c:	20 81       	ld	r18, Z
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <GPIO_WriteToPin+0x1c>
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	3a 95       	dec	r19
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <GPIO_WriteToPin+0x18>
     c1c:	82 2b       	or	r24, r18
     c1e:	80 83       	st	Z, r24
     c20:	08 95       	ret
     c22:	fc 01       	movw	r30, r24
     c24:	30 81       	ld	r19, Z
     c26:	01 80       	ldd	r0, Z+1	; 0x01
     c28:	f2 81       	ldd	r31, Z+2	; 0x02
     c2a:	e0 2d       	mov	r30, r0
     c2c:	20 81       	ld	r18, Z
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <GPIO_WriteToPin+0x3c>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	3a 95       	dec	r19
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <GPIO_WriteToPin+0x38>
     c3c:	80 95       	com	r24
     c3e:	90 95       	com	r25
     c40:	82 23       	and	r24, r18
     c42:	80 83       	st	Z, r24
     c44:	08 95       	ret

00000c46 <USART0_Init>:
     c46:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     c4a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     c4e:	88 e9       	ldi	r24, 0x98	; 152
     c50:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     c54:	86 e0       	ldi	r24, 0x06	; 6
     c56:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     c5a:	08 95       	ret

00000c5c <USART0_Transmit>:
     c5c:	e0 ec       	ldi	r30, 0xC0	; 192
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	90 81       	ld	r25, Z
     c62:	95 ff       	sbrs	r25, 5
     c64:	fd cf       	rjmp	.-6      	; 0xc60 <USART0_Transmit+0x4>
     c66:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     c6a:	08 95       	ret

00000c6c <USART0_transmitstring>:
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	ec 01       	movw	r28, r24
     c72:	88 81       	ld	r24, Y
     c74:	88 23       	and	r24, r24
     c76:	29 f0       	breq	.+10     	; 0xc82 <USART0_transmitstring+0x16>
     c78:	21 96       	adiw	r28, 0x01	; 1
     c7a:	f0 df       	rcall	.-32     	; 0xc5c <USART0_Transmit>
     c7c:	89 91       	ld	r24, Y+
     c7e:	81 11       	cpse	r24, r1
     c80:	fc cf       	rjmp	.-8      	; 0xc7a <USART0_transmitstring+0xe>
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <USART2_Init>:
     c88:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     c8c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     c90:	88 e9       	ldi	r24, 0x98	; 152
     c92:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     c96:	86 e0       	ldi	r24, 0x06	; 6
     c98:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     c9c:	08 95       	ret

00000c9e <USART2_Transmit>:
     c9e:	e0 ed       	ldi	r30, 0xD0	; 208
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	90 81       	ld	r25, Z
     ca4:	95 ff       	sbrs	r25, 5
     ca6:	fd cf       	rjmp	.-6      	; 0xca2 <USART2_Transmit+0x4>
     ca8:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     cac:	08 95       	ret

00000cae <USART2_Receive>:
     cae:	e0 ed       	ldi	r30, 0xD0	; 208
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	88 23       	and	r24, r24
     cb6:	ec f7       	brge	.-6      	; 0xcb2 <USART2_Receive+0x4>
     cb8:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     cbc:	08 95       	ret

00000cbe <USART0_Receive>:
     cbe:	e0 ec       	ldi	r30, 0xC0	; 192
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	88 23       	and	r24, r24
     cc6:	ec f7       	brge	.-6      	; 0xcc2 <USART0_Receive+0x4>
     cc8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     ccc:	08 95       	ret

00000cce <USART2_transmitstring>:
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
     cd4:	88 81       	ld	r24, Y
     cd6:	88 23       	and	r24, r24
     cd8:	29 f0       	breq	.+10     	; 0xce4 <USART2_transmitstring+0x16>
     cda:	21 96       	adiw	r28, 0x01	; 1
     cdc:	e0 df       	rcall	.-64     	; 0xc9e <USART2_Transmit>
     cde:	89 91       	ld	r24, Y+
     ce0:	81 11       	cpse	r24, r1
     ce2:	fc cf       	rjmp	.-8      	; 0xcdc <USART2_transmitstring+0xe>
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <Timer1_init>:
     cea:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     cee:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     cf2:	87 ef       	ldi	r24, 0xF7	; 247
     cf4:	92 ec       	ldi	r25, 0xC2	; 194
     cf6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     cfa:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     cfe:	85 e0       	ldi	r24, 0x05	; 5
     d00:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     d04:	ef e6       	ldi	r30, 0x6F	; 111
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	81 60       	ori	r24, 0x01	; 1
     d0c:	80 83       	st	Z, r24
     d0e:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <time_in_seconds+0x1>
     d12:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <time_in_seconds>
     d16:	08 95       	ret

00000d18 <MatchCommand>:
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	ec 01       	movw	r28, r24
     d22:	66 ec       	ldi	r22, 0xC6	; 198
     d24:	73 e0       	ldi	r23, 0x03	; 3
     d26:	4e d4       	rcall	.+2204   	; 0x15c4 <strtok>
     d28:	8c 01       	movw	r16, r24
     d2a:	68 ec       	ldi	r22, 0xC8	; 200
     d2c:	73 e0       	ldi	r23, 0x03	; 3
     d2e:	ce 01       	movw	r24, r28
     d30:	57 d4       	rcall	.+2222   	; 0x15e0 <strcmp>
     d32:	89 2b       	or	r24, r25
     d34:	09 f4       	brne	.+2      	; 0xd38 <MatchCommand+0x20>
     d36:	0f c1       	rjmp	.+542    	; 0xf56 <MatchCommand+0x23e>
     d38:	62 ed       	ldi	r22, 0xD2	; 210
     d3a:	73 e0       	ldi	r23, 0x03	; 3
     d3c:	ce 01       	movw	r24, r28
     d3e:	50 d4       	rcall	.+2208   	; 0x15e0 <strcmp>
     d40:	89 2b       	or	r24, r25
     d42:	09 f4       	brne	.+2      	; 0xd46 <MatchCommand+0x2e>
     d44:	0a c1       	rjmp	.+532    	; 0xf5a <MatchCommand+0x242>
     d46:	6c ed       	ldi	r22, 0xDC	; 220
     d48:	73 e0       	ldi	r23, 0x03	; 3
     d4a:	ce 01       	movw	r24, r28
     d4c:	49 d4       	rcall	.+2194   	; 0x15e0 <strcmp>
     d4e:	89 2b       	or	r24, r25
     d50:	09 f4       	brne	.+2      	; 0xd54 <MatchCommand+0x3c>
     d52:	05 c1       	rjmp	.+522    	; 0xf5e <MatchCommand+0x246>
     d54:	66 ee       	ldi	r22, 0xE6	; 230
     d56:	73 e0       	ldi	r23, 0x03	; 3
     d58:	ce 01       	movw	r24, r28
     d5a:	42 d4       	rcall	.+2180   	; 0x15e0 <strcmp>
     d5c:	89 2b       	or	r24, r25
     d5e:	09 f4       	brne	.+2      	; 0xd62 <MatchCommand+0x4a>
     d60:	00 c1       	rjmp	.+512    	; 0xf62 <MatchCommand+0x24a>
     d62:	60 ef       	ldi	r22, 0xF0	; 240
     d64:	73 e0       	ldi	r23, 0x03	; 3
     d66:	ce 01       	movw	r24, r28
     d68:	3b d4       	rcall	.+2166   	; 0x15e0 <strcmp>
     d6a:	89 2b       	or	r24, r25
     d6c:	09 f4       	brne	.+2      	; 0xd70 <MatchCommand+0x58>
     d6e:	fb c0       	rjmp	.+502    	; 0xf66 <MatchCommand+0x24e>
     d70:	67 ef       	ldi	r22, 0xF7	; 247
     d72:	73 e0       	ldi	r23, 0x03	; 3
     d74:	ce 01       	movw	r24, r28
     d76:	34 d4       	rcall	.+2152   	; 0x15e0 <strcmp>
     d78:	89 2b       	or	r24, r25
     d7a:	09 f4       	brne	.+2      	; 0xd7e <MatchCommand+0x66>
     d7c:	f6 c0       	rjmp	.+492    	; 0xf6a <MatchCommand+0x252>
     d7e:	62 ef       	ldi	r22, 0xF2	; 242
     d80:	72 e0       	ldi	r23, 0x02	; 2
     d82:	ce 01       	movw	r24, r28
     d84:	2d d4       	rcall	.+2138   	; 0x15e0 <strcmp>
     d86:	89 2b       	or	r24, r25
     d88:	09 f4       	brne	.+2      	; 0xd8c <MatchCommand+0x74>
     d8a:	f1 c0       	rjmp	.+482    	; 0xf6e <MatchCommand+0x256>
     d8c:	6d ef       	ldi	r22, 0xFD	; 253
     d8e:	73 e0       	ldi	r23, 0x03	; 3
     d90:	ce 01       	movw	r24, r28
     d92:	26 d4       	rcall	.+2124   	; 0x15e0 <strcmp>
     d94:	89 2b       	or	r24, r25
     d96:	09 f4       	brne	.+2      	; 0xd9a <MatchCommand+0x82>
     d98:	ec c0       	rjmp	.+472    	; 0xf72 <MatchCommand+0x25a>
     d9a:	66 e0       	ldi	r22, 0x06	; 6
     d9c:	74 e0       	ldi	r23, 0x04	; 4
     d9e:	ce 01       	movw	r24, r28
     da0:	1f d4       	rcall	.+2110   	; 0x15e0 <strcmp>
     da2:	89 2b       	or	r24, r25
     da4:	09 f4       	brne	.+2      	; 0xda8 <MatchCommand+0x90>
     da6:	e7 c0       	rjmp	.+462    	; 0xf76 <MatchCommand+0x25e>
     da8:	60 e1       	ldi	r22, 0x10	; 16
     daa:	74 e0       	ldi	r23, 0x04	; 4
     dac:	ce 01       	movw	r24, r28
     dae:	18 d4       	rcall	.+2096   	; 0x15e0 <strcmp>
     db0:	89 2b       	or	r24, r25
     db2:	09 f4       	brne	.+2      	; 0xdb6 <MatchCommand+0x9e>
     db4:	e2 c0       	rjmp	.+452    	; 0xf7a <MatchCommand+0x262>
     db6:	65 e1       	ldi	r22, 0x15	; 21
     db8:	74 e0       	ldi	r23, 0x04	; 4
     dba:	ce 01       	movw	r24, r28
     dbc:	11 d4       	rcall	.+2082   	; 0x15e0 <strcmp>
     dbe:	89 2b       	or	r24, r25
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <MatchCommand+0xac>
     dc2:	dd c0       	rjmp	.+442    	; 0xf7e <MatchCommand+0x266>
     dc4:	6a e1       	ldi	r22, 0x1A	; 26
     dc6:	74 e0       	ldi	r23, 0x04	; 4
     dc8:	ce 01       	movw	r24, r28
     dca:	0a d4       	rcall	.+2068   	; 0x15e0 <strcmp>
     dcc:	89 2b       	or	r24, r25
     dce:	09 f4       	brne	.+2      	; 0xdd2 <MatchCommand+0xba>
     dd0:	d8 c0       	rjmp	.+432    	; 0xf82 <MatchCommand+0x26a>
     dd2:	6f e1       	ldi	r22, 0x1F	; 31
     dd4:	74 e0       	ldi	r23, 0x04	; 4
     dd6:	ce 01       	movw	r24, r28
     dd8:	03 d4       	rcall	.+2054   	; 0x15e0 <strcmp>
     dda:	89 2b       	or	r24, r25
     ddc:	09 f4       	brne	.+2      	; 0xde0 <MatchCommand+0xc8>
     dde:	d3 c0       	rjmp	.+422    	; 0xf86 <MatchCommand+0x26e>
     de0:	64 e2       	ldi	r22, 0x24	; 36
     de2:	74 e0       	ldi	r23, 0x04	; 4
     de4:	ce 01       	movw	r24, r28
     de6:	fc d3       	rcall	.+2040   	; 0x15e0 <strcmp>
     de8:	89 2b       	or	r24, r25
     dea:	09 f4       	brne	.+2      	; 0xdee <MatchCommand+0xd6>
     dec:	ce c0       	rjmp	.+412    	; 0xf8a <MatchCommand+0x272>
     dee:	69 e2       	ldi	r22, 0x29	; 41
     df0:	74 e0       	ldi	r23, 0x04	; 4
     df2:	ce 01       	movw	r24, r28
     df4:	f5 d3       	rcall	.+2026   	; 0x15e0 <strcmp>
     df6:	89 2b       	or	r24, r25
     df8:	09 f4       	brne	.+2      	; 0xdfc <MatchCommand+0xe4>
     dfa:	c9 c0       	rjmp	.+402    	; 0xf8e <MatchCommand+0x276>
     dfc:	61 e3       	ldi	r22, 0x31	; 49
     dfe:	74 e0       	ldi	r23, 0x04	; 4
     e00:	ce 01       	movw	r24, r28
     e02:	ee d3       	rcall	.+2012   	; 0x15e0 <strcmp>
     e04:	89 2b       	or	r24, r25
     e06:	09 f4       	brne	.+2      	; 0xe0a <MatchCommand+0xf2>
     e08:	c4 c0       	rjmp	.+392    	; 0xf92 <MatchCommand+0x27a>
     e0a:	6b e3       	ldi	r22, 0x3B	; 59
     e0c:	74 e0       	ldi	r23, 0x04	; 4
     e0e:	c8 01       	movw	r24, r16
     e10:	e7 d3       	rcall	.+1998   	; 0x15e0 <strcmp>
     e12:	89 2b       	or	r24, r25
     e14:	e1 f4       	brne	.+56     	; 0xe4e <MatchCommand+0x136>
     e16:	66 ec       	ldi	r22, 0xC6	; 198
     e18:	73 e0       	ldi	r23, 0x03	; 3
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	d2 d3       	rcall	.+1956   	; 0x15c4 <strtok>
     e20:	dc 01       	movw	r26, r24
     e22:	2c 91       	ld	r18, X
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e2a:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     e2e:	11 96       	adiw	r26, 0x01	; 1
     e30:	8c 91       	ld	r24, X
     e32:	38 2b       	or	r19, r24
     e34:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e38:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     e3c:	82 e3       	ldi	r24, 0x32	; 50
     e3e:	e9 e4       	ldi	r30, 0x49	; 73
     e40:	f5 e0       	ldi	r31, 0x05	; 5
     e42:	df 01       	movw	r26, r30
     e44:	1d 92       	st	X+, r1
     e46:	8a 95       	dec	r24
     e48:	e9 f7       	brne	.-6      	; 0xe44 <MatchCommand+0x12c>
     e4a:	89 e0       	ldi	r24, 0x09	; 9
     e4c:	a5 c0       	rjmp	.+330    	; 0xf98 <MatchCommand+0x280>
     e4e:	62 e4       	ldi	r22, 0x42	; 66
     e50:	74 e0       	ldi	r23, 0x04	; 4
     e52:	c8 01       	movw	r24, r16
     e54:	c5 d3       	rcall	.+1930   	; 0x15e0 <strcmp>
     e56:	89 2b       	or	r24, r25
     e58:	d9 f4       	brne	.+54     	; 0xe90 <MatchCommand+0x178>
     e5a:	66 ec       	ldi	r22, 0xC6	; 198
     e5c:	73 e0       	ldi	r23, 0x03	; 3
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	b0 d3       	rcall	.+1888   	; 0x15c4 <strtok>
     e64:	fc 01       	movw	r30, r24
     e66:	20 81       	ld	r18, Z
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e6e:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	38 2b       	or	r19, r24
     e76:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e7a:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     e7e:	82 e3       	ldi	r24, 0x32	; 50
     e80:	e9 e4       	ldi	r30, 0x49	; 73
     e82:	f5 e0       	ldi	r31, 0x05	; 5
     e84:	df 01       	movw	r26, r30
     e86:	1d 92       	st	X+, r1
     e88:	8a 95       	dec	r24
     e8a:	e9 f7       	brne	.-6      	; 0xe86 <MatchCommand+0x16e>
     e8c:	8a e0       	ldi	r24, 0x0A	; 10
     e8e:	84 c0       	rjmp	.+264    	; 0xf98 <MatchCommand+0x280>
     e90:	6a e4       	ldi	r22, 0x4A	; 74
     e92:	74 e0       	ldi	r23, 0x04	; 4
     e94:	c8 01       	movw	r24, r16
     e96:	a4 d3       	rcall	.+1864   	; 0x15e0 <strcmp>
     e98:	89 2b       	or	r24, r25
     e9a:	d9 f4       	brne	.+54     	; 0xed2 <MatchCommand+0x1ba>
     e9c:	66 ec       	ldi	r22, 0xC6	; 198
     e9e:	73 e0       	ldi	r23, 0x03	; 3
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	8f d3       	rcall	.+1822   	; 0x15c4 <strtok>
     ea6:	fc 01       	movw	r30, r24
     ea8:	20 81       	ld	r18, Z
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     eb0:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     eb4:	81 81       	ldd	r24, Z+1	; 0x01
     eb6:	38 2b       	or	r19, r24
     eb8:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     ebc:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     ec0:	82 e3       	ldi	r24, 0x32	; 50
     ec2:	e9 e4       	ldi	r30, 0x49	; 73
     ec4:	f5 e0       	ldi	r31, 0x05	; 5
     ec6:	df 01       	movw	r26, r30
     ec8:	1d 92       	st	X+, r1
     eca:	8a 95       	dec	r24
     ecc:	e9 f7       	brne	.-6      	; 0xec8 <MatchCommand+0x1b0>
     ece:	8d e0       	ldi	r24, 0x0D	; 13
     ed0:	63 c0       	rjmp	.+198    	; 0xf98 <MatchCommand+0x280>
     ed2:	63 e5       	ldi	r22, 0x53	; 83
     ed4:	74 e0       	ldi	r23, 0x04	; 4
     ed6:	c8 01       	movw	r24, r16
     ed8:	83 d3       	rcall	.+1798   	; 0x15e0 <strcmp>
     eda:	89 2b       	or	r24, r25
     edc:	d9 f4       	brne	.+54     	; 0xf14 <MatchCommand+0x1fc>
     ede:	66 ec       	ldi	r22, 0xC6	; 198
     ee0:	73 e0       	ldi	r23, 0x03	; 3
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	6e d3       	rcall	.+1756   	; 0x15c4 <strtok>
     ee8:	fc 01       	movw	r30, r24
     eea:	20 81       	ld	r18, Z
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     ef2:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     ef6:	81 81       	ldd	r24, Z+1	; 0x01
     ef8:	38 2b       	or	r19, r24
     efa:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     efe:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     f02:	82 e3       	ldi	r24, 0x32	; 50
     f04:	e9 e4       	ldi	r30, 0x49	; 73
     f06:	f5 e0       	ldi	r31, 0x05	; 5
     f08:	df 01       	movw	r26, r30
     f0a:	1d 92       	st	X+, r1
     f0c:	8a 95       	dec	r24
     f0e:	e9 f7       	brne	.-6      	; 0xf0a <MatchCommand+0x1f2>
     f10:	88 e0       	ldi	r24, 0x08	; 8
     f12:	42 c0       	rjmp	.+132    	; 0xf98 <MatchCommand+0x280>
     f14:	6b e5       	ldi	r22, 0x5B	; 91
     f16:	74 e0       	ldi	r23, 0x04	; 4
     f18:	c8 01       	movw	r24, r16
     f1a:	62 d3       	rcall	.+1732   	; 0x15e0 <strcmp>
     f1c:	89 2b       	or	r24, r25
     f1e:	d9 f5       	brne	.+118    	; 0xf96 <MatchCommand+0x27e>
     f20:	66 ec       	ldi	r22, 0xC6	; 198
     f22:	73 e0       	ldi	r23, 0x03	; 3
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	4d d3       	rcall	.+1690   	; 0x15c4 <strtok>
     f2a:	fc 01       	movw	r30, r24
     f2c:	20 81       	ld	r18, Z
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     f34:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     f38:	81 81       	ldd	r24, Z+1	; 0x01
     f3a:	38 2b       	or	r19, r24
     f3c:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     f40:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     f44:	82 e3       	ldi	r24, 0x32	; 50
     f46:	e9 e4       	ldi	r30, 0x49	; 73
     f48:	f5 e0       	ldi	r31, 0x05	; 5
     f4a:	df 01       	movw	r26, r30
     f4c:	1d 92       	st	X+, r1
     f4e:	8a 95       	dec	r24
     f50:	e9 f7       	brne	.-6      	; 0xf4c <MatchCommand+0x234>
     f52:	83 e1       	ldi	r24, 0x13	; 19
     f54:	21 c0       	rjmp	.+66     	; 0xf98 <MatchCommand+0x280>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	1f c0       	rjmp	.+62     	; 0xf98 <MatchCommand+0x280>
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	1d c0       	rjmp	.+58     	; 0xf98 <MatchCommand+0x280>
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	1b c0       	rjmp	.+54     	; 0xf98 <MatchCommand+0x280>
     f62:	84 e0       	ldi	r24, 0x04	; 4
     f64:	19 c0       	rjmp	.+50     	; 0xf98 <MatchCommand+0x280>
     f66:	85 e0       	ldi	r24, 0x05	; 5
     f68:	17 c0       	rjmp	.+46     	; 0xf98 <MatchCommand+0x280>
     f6a:	86 e0       	ldi	r24, 0x06	; 6
     f6c:	15 c0       	rjmp	.+42     	; 0xf98 <MatchCommand+0x280>
     f6e:	84 e6       	ldi	r24, 0x64	; 100
     f70:	13 c0       	rjmp	.+38     	; 0xf98 <MatchCommand+0x280>
     f72:	87 e0       	ldi	r24, 0x07	; 7
     f74:	11 c0       	rjmp	.+34     	; 0xf98 <MatchCommand+0x280>
     f76:	8b e0       	ldi	r24, 0x0B	; 11
     f78:	0f c0       	rjmp	.+30     	; 0xf98 <MatchCommand+0x280>
     f7a:	8c e0       	ldi	r24, 0x0C	; 12
     f7c:	0d c0       	rjmp	.+26     	; 0xf98 <MatchCommand+0x280>
     f7e:	8e e0       	ldi	r24, 0x0E	; 14
     f80:	0b c0       	rjmp	.+22     	; 0xf98 <MatchCommand+0x280>
     f82:	8f e0       	ldi	r24, 0x0F	; 15
     f84:	09 c0       	rjmp	.+18     	; 0xf98 <MatchCommand+0x280>
     f86:	80 e1       	ldi	r24, 0x10	; 16
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <MatchCommand+0x280>
     f8a:	81 e1       	ldi	r24, 0x11	; 17
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <MatchCommand+0x280>
     f8e:	82 e1       	ldi	r24, 0x12	; 18
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <MatchCommand+0x280>
     f92:	84 e1       	ldi	r24, 0x14	; 20
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <MatchCommand+0x280>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	08 95       	ret

00000fa2 <Send_FF_to_Display>:
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	5b de       	rcall	.-842    	; 0xc5c <USART0_Transmit>
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	59 de       	rcall	.-846    	; 0xc5c <USART0_Transmit>
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	57 de       	rcall	.-850    	; 0xc5c <USART0_Transmit>
     fae:	82 e3       	ldi	r24, 0x32	; 50
     fb0:	e5 ed       	ldi	r30, 0xD5	; 213
     fb2:	f4 e0       	ldi	r31, 0x04	; 4
     fb4:	df 01       	movw	r26, r30
     fb6:	1d 92       	st	X+, r1
     fb8:	8a 95       	dec	r24
     fba:	e9 f7       	brne	.-6      	; 0xfb6 <Send_FF_to_Display+0x14>
     fbc:	08 95       	ret

00000fbe <EEPROM_DisplayDataInit>:
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	c0 e0       	ldi	r28, 0x00	; 0
     fc4:	d0 e0       	ldi	r29, 0x00	; 0
     fc6:	ce 01       	movw	r24, r28
     fc8:	5b dd       	rcall	.-1354   	; 0xa80 <EEPROM_Read2Bytes>
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	21 f4       	brne	.+8      	; 0xfd6 <EEPROM_DisplayDataInit+0x18>
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	ce 01       	movw	r24, r28
     fd4:	45 dd       	rcall	.-1398   	; 0xa60 <EEPROM_Write2Bytes>
     fd6:	22 96       	adiw	r28, 0x02	; 2
     fd8:	c2 36       	cpi	r28, 0x62	; 98
     fda:	d1 05       	cpc	r29, r1
     fdc:	a1 f7       	brne	.-24     	; 0xfc6 <EEPROM_DisplayDataInit+0x8>
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <ReagentSelected>:
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	08 2f       	mov	r16, r24
     ff2:	10 e0       	ldi	r17, 0x00	; 0
     ff4:	0f 2e       	mov	r0, r31
     ff6:	f2 e3       	ldi	r31, 0x32	; 50
     ff8:	ef 2e       	mov	r14, r31
     ffa:	f0 2d       	mov	r31, r0
     ffc:	c6 2f       	mov	r28, r22
     ffe:	d0 e0       	ldi	r29, 0x00	; 0
    1000:	ff 24       	eor	r15, r15
    1002:	f3 94       	inc	r15
    1004:	2f ef       	ldi	r18, 0xFF	; 255
    1006:	81 ee       	ldi	r24, 0xE1	; 225
    1008:	94 e0       	ldi	r25, 0x04	; 4
    100a:	21 50       	subi	r18, 0x01	; 1
    100c:	80 40       	sbci	r24, 0x00	; 0
    100e:	90 40       	sbci	r25, 0x00	; 0
    1010:	e1 f7       	brne	.-8      	; 0x100a <ReagentSelected+0x26>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <ReagentSelected+0x30>
    1014:	00 00       	nop
    1016:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <OneTimeRunFunFlag>
    101a:	91 11       	cpse	r25, r1
    101c:	12 c0       	rjmp	.+36     	; 0x1042 <ReagentSelected+0x5e>
    101e:	83 e6       	ldi	r24, 0x63	; 99
    1020:	94 e0       	ldi	r25, 0x04	; 4
    1022:	24 de       	rcall	.-952    	; 0xc6c <USART0_transmitstring>
    1024:	c8 01       	movw	r24, r16
    1026:	2c dd       	rcall	.-1448   	; 0xa80 <EEPROM_Read2Bytes>
    1028:	4a e0       	ldi	r20, 0x0A	; 10
    102a:	65 ed       	ldi	r22, 0xD5	; 213
    102c:	74 e0       	ldi	r23, 0x04	; 4
    102e:	0f d3       	rcall	.+1566   	; 0x164e <__itoa_ncheck>
    1030:	85 ed       	ldi	r24, 0xD5	; 213
    1032:	94 e0       	ldi	r25, 0x04	; 4
    1034:	1b de       	rcall	.-970    	; 0xc6c <USART0_transmitstring>
    1036:	b5 df       	rcall	.-150    	; 0xfa2 <Send_FF_to_Display>
    1038:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <OneTimeRunFunFlag>
    103c:	8f 5f       	subi	r24, 0xFF	; 255
    103e:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <OneTimeRunFunFlag>
    1042:	89 e4       	ldi	r24, 0x49	; 73
    1044:	95 e0       	ldi	r25, 0x05	; 5
    1046:	68 de       	rcall	.-816    	; 0xd18 <MatchCommand>
    1048:	88 30       	cpi	r24, 0x08	; 8
    104a:	09 f0       	breq	.+2      	; 0x104e <ReagentSelected+0x6a>
    104c:	50 c0       	rjmp	.+160    	; 0x10ee <ReagentSelected+0x10a>
    104e:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1052:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1056:	c8 01       	movw	r24, r16
    1058:	03 dd       	rcall	.-1530   	; 0xa60 <EEPROM_Write2Bytes>
    105a:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <OneTimeRunFunFlag>
    105e:	af ef       	ldi	r26, 0xFF	; 255
    1060:	b1 ee       	ldi	r27, 0xE1	; 225
    1062:	24 e0       	ldi	r18, 0x04	; 4
    1064:	a1 50       	subi	r26, 0x01	; 1
    1066:	b0 40       	sbci	r27, 0x00	; 0
    1068:	20 40       	sbci	r18, 0x00	; 0
    106a:	e1 f7       	brne	.-8      	; 0x1064 <ReagentSelected+0x80>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <ReagentSelected+0x8a>
    106e:	00 00       	nop
    1070:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <OneTimeRunFunFlag>
    1074:	91 11       	cpse	r25, r1
    1076:	12 c0       	rjmp	.+36     	; 0x109c <ReagentSelected+0xb8>
    1078:	83 e6       	ldi	r24, 0x63	; 99
    107a:	94 e0       	ldi	r25, 0x04	; 4
    107c:	f7 dd       	rcall	.-1042   	; 0xc6c <USART0_transmitstring>
    107e:	ce 01       	movw	r24, r28
    1080:	ff dc       	rcall	.-1538   	; 0xa80 <EEPROM_Read2Bytes>
    1082:	4a e0       	ldi	r20, 0x0A	; 10
    1084:	65 ed       	ldi	r22, 0xD5	; 213
    1086:	74 e0       	ldi	r23, 0x04	; 4
    1088:	e2 d2       	rcall	.+1476   	; 0x164e <__itoa_ncheck>
    108a:	85 ed       	ldi	r24, 0xD5	; 213
    108c:	94 e0       	ldi	r25, 0x04	; 4
    108e:	ee dd       	rcall	.-1060   	; 0xc6c <USART0_transmitstring>
    1090:	88 df       	rcall	.-240    	; 0xfa2 <Send_FF_to_Display>
    1092:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <OneTimeRunFunFlag>
    1096:	9f 5f       	subi	r25, 0xFF	; 255
    1098:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <OneTimeRunFunFlag>
    109c:	89 e4       	ldi	r24, 0x49	; 73
    109e:	95 e0       	ldi	r25, 0x05	; 5
    10a0:	3b de       	rcall	.-906    	; 0xd18 <MatchCommand>
    10a2:	8d 30       	cpi	r24, 0x0D	; 13
    10a4:	89 f4       	brne	.+34     	; 0x10c8 <ReagentSelected+0xe4>
    10a6:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    10aa:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    10ae:	ce 01       	movw	r24, r28
    10b0:	d7 dc       	rcall	.-1618   	; 0xa60 <EEPROM_Write2Bytes>
    10b2:	95 e0       	ldi	r25, 0x05	; 5
    10b4:	e2 ef       	ldi	r30, 0xF2	; 242
    10b6:	f2 e0       	ldi	r31, 0x02	; 2
    10b8:	a9 e4       	ldi	r26, 0x49	; 73
    10ba:	b5 e0       	ldi	r27, 0x05	; 5
    10bc:	01 90       	ld	r0, Z+
    10be:	0d 92       	st	X+, r0
    10c0:	9a 95       	dec	r25
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <ReagentSelected+0xd8>
    10c4:	f0 92 7a 04 	sts	0x047A, r15	; 0x80047a <flag>
    10c8:	89 e4       	ldi	r24, 0x49	; 73
    10ca:	95 e0       	ldi	r25, 0x05	; 5
    10cc:	25 de       	rcall	.-950    	; 0xd18 <MatchCommand>
    10ce:	84 36       	cpi	r24, 0x64	; 100
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <ReagentSelected+0xf0>
    10d2:	c5 cf       	rjmp	.-118    	; 0x105e <ReagentSelected+0x7a>
    10d4:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <OneTimeRunFunFlag>
    10d8:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <flag>
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	39 f0       	breq	.+14     	; 0x10ee <ReagentSelected+0x10a>
    10e0:	e9 e4       	ldi	r30, 0x49	; 73
    10e2:	f5 e0       	ldi	r31, 0x05	; 5
    10e4:	df 01       	movw	r26, r30
    10e6:	2e 2d       	mov	r18, r14
    10e8:	1d 92       	st	X+, r1
    10ea:	2a 95       	dec	r18
    10ec:	e9 f7       	brne	.-6      	; 0x10e8 <ReagentSelected+0x104>
    10ee:	89 e4       	ldi	r24, 0x49	; 73
    10f0:	95 e0       	ldi	r25, 0x05	; 5
    10f2:	12 de       	rcall	.-988    	; 0xd18 <MatchCommand>
    10f4:	84 36       	cpi	r24, 0x64	; 100
    10f6:	09 f0       	breq	.+2      	; 0x10fa <ReagentSelected+0x116>
    10f8:	85 cf       	rjmp	.-246    	; 0x1004 <ReagentSelected+0x20>
    10fa:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <OneTimeRunFunFlag>
    10fe:	82 e3       	ldi	r24, 0x32	; 50
    1100:	e9 e4       	ldi	r30, 0x49	; 73
    1102:	f5 e0       	ldi	r31, 0x05	; 5
    1104:	df 01       	movw	r26, r30
    1106:	1d 92       	st	X+, r1
    1108:	8a 95       	dec	r24
    110a:	e9 f7       	brne	.-6      	; 0x1106 <ReagentSelected+0x122>
    110c:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <flag>
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ff 90       	pop	r15
    111a:	ef 90       	pop	r14
    111c:	08 95       	ret

0000111e <StartBlowerTimeSelected>:
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	c8 2f       	mov	r28, r24
    1124:	d0 e0       	ldi	r29, 0x00	; 0
    1126:	2f ef       	ldi	r18, 0xFF	; 255
    1128:	81 ee       	ldi	r24, 0xE1	; 225
    112a:	94 e0       	ldi	r25, 0x04	; 4
    112c:	21 50       	subi	r18, 0x01	; 1
    112e:	80 40       	sbci	r24, 0x00	; 0
    1130:	90 40       	sbci	r25, 0x00	; 0
    1132:	e1 f7       	brne	.-8      	; 0x112c <StartBlowerTimeSelected+0xe>
    1134:	00 c0       	rjmp	.+0      	; 0x1136 <StartBlowerTimeSelected+0x18>
    1136:	00 00       	nop
    1138:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <OneTimeRunFunFlag>
    113c:	91 11       	cpse	r25, r1
    113e:	12 c0       	rjmp	.+36     	; 0x1164 <StartBlowerTimeSelected+0x46>
    1140:	83 e6       	ldi	r24, 0x63	; 99
    1142:	94 e0       	ldi	r25, 0x04	; 4
    1144:	93 dd       	rcall	.-1242   	; 0xc6c <USART0_transmitstring>
    1146:	ce 01       	movw	r24, r28
    1148:	9b dc       	rcall	.-1738   	; 0xa80 <EEPROM_Read2Bytes>
    114a:	4a e0       	ldi	r20, 0x0A	; 10
    114c:	65 ed       	ldi	r22, 0xD5	; 213
    114e:	74 e0       	ldi	r23, 0x04	; 4
    1150:	7e d2       	rcall	.+1276   	; 0x164e <__itoa_ncheck>
    1152:	85 ed       	ldi	r24, 0xD5	; 213
    1154:	94 e0       	ldi	r25, 0x04	; 4
    1156:	8a dd       	rcall	.-1260   	; 0xc6c <USART0_transmitstring>
    1158:	24 df       	rcall	.-440    	; 0xfa2 <Send_FF_to_Display>
    115a:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <OneTimeRunFunFlag>
    115e:	9f 5f       	subi	r25, 0xFF	; 255
    1160:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <OneTimeRunFunFlag>
    1164:	89 e4       	ldi	r24, 0x49	; 73
    1166:	95 e0       	ldi	r25, 0x05	; 5
    1168:	d7 dd       	rcall	.-1106   	; 0xd18 <MatchCommand>
    116a:	89 30       	cpi	r24, 0x09	; 9
    116c:	79 f4       	brne	.+30     	; 0x118c <StartBlowerTimeSelected+0x6e>
    116e:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1172:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1176:	ce 01       	movw	r24, r28
    1178:	73 dc       	rcall	.-1818   	; 0xa60 <EEPROM_Write2Bytes>
    117a:	95 e0       	ldi	r25, 0x05	; 5
    117c:	e2 ef       	ldi	r30, 0xF2	; 242
    117e:	f2 e0       	ldi	r31, 0x02	; 2
    1180:	a9 e4       	ldi	r26, 0x49	; 73
    1182:	b5 e0       	ldi	r27, 0x05	; 5
    1184:	01 90       	ld	r0, Z+
    1186:	0d 92       	st	X+, r0
    1188:	9a 95       	dec	r25
    118a:	e1 f7       	brne	.-8      	; 0x1184 <StartBlowerTimeSelected+0x66>
    118c:	89 e4       	ldi	r24, 0x49	; 73
    118e:	95 e0       	ldi	r25, 0x05	; 5
    1190:	c3 dd       	rcall	.-1146   	; 0xd18 <MatchCommand>
    1192:	84 36       	cpi	r24, 0x64	; 100
    1194:	09 f0       	breq	.+2      	; 0x1198 <StartBlowerTimeSelected+0x7a>
    1196:	c7 cf       	rjmp	.-114    	; 0x1126 <StartBlowerTimeSelected+0x8>
    1198:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <OneTimeRunFunFlag>
    119c:	82 e3       	ldi	r24, 0x32	; 50
    119e:	e9 e4       	ldi	r30, 0x49	; 73
    11a0:	f5 e0       	ldi	r31, 0x05	; 5
    11a2:	df 01       	movw	r26, r30
    11a4:	1d 92       	st	X+, r1
    11a6:	8a 95       	dec	r24
    11a8:	e9 f7       	brne	.-6      	; 0x11a4 <StartBlowerTimeSelected+0x86>
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <EndBlowerTimeSelected>:
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	c8 2f       	mov	r28, r24
    11b6:	d0 e0       	ldi	r29, 0x00	; 0
    11b8:	2f ef       	ldi	r18, 0xFF	; 255
    11ba:	81 ee       	ldi	r24, 0xE1	; 225
    11bc:	94 e0       	ldi	r25, 0x04	; 4
    11be:	21 50       	subi	r18, 0x01	; 1
    11c0:	80 40       	sbci	r24, 0x00	; 0
    11c2:	90 40       	sbci	r25, 0x00	; 0
    11c4:	e1 f7       	brne	.-8      	; 0x11be <EndBlowerTimeSelected+0xe>
    11c6:	00 c0       	rjmp	.+0      	; 0x11c8 <EndBlowerTimeSelected+0x18>
    11c8:	00 00       	nop
    11ca:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <OneTimeRunFunFlag>
    11ce:	91 11       	cpse	r25, r1
    11d0:	12 c0       	rjmp	.+36     	; 0x11f6 <EndBlowerTimeSelected+0x46>
    11d2:	83 e6       	ldi	r24, 0x63	; 99
    11d4:	94 e0       	ldi	r25, 0x04	; 4
    11d6:	4a dd       	rcall	.-1388   	; 0xc6c <USART0_transmitstring>
    11d8:	ce 01       	movw	r24, r28
    11da:	52 dc       	rcall	.-1884   	; 0xa80 <EEPROM_Read2Bytes>
    11dc:	4a e0       	ldi	r20, 0x0A	; 10
    11de:	65 ed       	ldi	r22, 0xD5	; 213
    11e0:	74 e0       	ldi	r23, 0x04	; 4
    11e2:	35 d2       	rcall	.+1130   	; 0x164e <__itoa_ncheck>
    11e4:	85 ed       	ldi	r24, 0xD5	; 213
    11e6:	94 e0       	ldi	r25, 0x04	; 4
    11e8:	41 dd       	rcall	.-1406   	; 0xc6c <USART0_transmitstring>
    11ea:	db de       	rcall	.-586    	; 0xfa2 <Send_FF_to_Display>
    11ec:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <OneTimeRunFunFlag>
    11f0:	9f 5f       	subi	r25, 0xFF	; 255
    11f2:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <OneTimeRunFunFlag>
    11f6:	89 e4       	ldi	r24, 0x49	; 73
    11f8:	95 e0       	ldi	r25, 0x05	; 5
    11fa:	8e dd       	rcall	.-1252   	; 0xd18 <MatchCommand>
    11fc:	8a 30       	cpi	r24, 0x0A	; 10
    11fe:	79 f4       	brne	.+30     	; 0x121e <EndBlowerTimeSelected+0x6e>
    1200:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1204:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1208:	ce 01       	movw	r24, r28
    120a:	2a dc       	rcall	.-1964   	; 0xa60 <EEPROM_Write2Bytes>
    120c:	95 e0       	ldi	r25, 0x05	; 5
    120e:	e2 ef       	ldi	r30, 0xF2	; 242
    1210:	f2 e0       	ldi	r31, 0x02	; 2
    1212:	a9 e4       	ldi	r26, 0x49	; 73
    1214:	b5 e0       	ldi	r27, 0x05	; 5
    1216:	01 90       	ld	r0, Z+
    1218:	0d 92       	st	X+, r0
    121a:	9a 95       	dec	r25
    121c:	e1 f7       	brne	.-8      	; 0x1216 <EndBlowerTimeSelected+0x66>
    121e:	89 e4       	ldi	r24, 0x49	; 73
    1220:	95 e0       	ldi	r25, 0x05	; 5
    1222:	7a dd       	rcall	.-1292   	; 0xd18 <MatchCommand>
    1224:	84 36       	cpi	r24, 0x64	; 100
    1226:	09 f0       	breq	.+2      	; 0x122a <EndBlowerTimeSelected+0x7a>
    1228:	c7 cf       	rjmp	.-114    	; 0x11b8 <EndBlowerTimeSelected+0x8>
    122a:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <OneTimeRunFunFlag>
    122e:	82 e3       	ldi	r24, 0x32	; 50
    1230:	e9 e4       	ldi	r30, 0x49	; 73
    1232:	f5 e0       	ldi	r31, 0x05	; 5
    1234:	df 01       	movw	r26, r30
    1236:	1d 92       	st	X+, r1
    1238:	8a 95       	dec	r24
    123a:	e9 f7       	brne	.-6      	; 0x1236 <EndBlowerTimeSelected+0x86>
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <SpinTimeSelected>:
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	c8 2f       	mov	r28, r24
    1248:	d0 e0       	ldi	r29, 0x00	; 0
    124a:	2f ef       	ldi	r18, 0xFF	; 255
    124c:	81 ee       	ldi	r24, 0xE1	; 225
    124e:	94 e0       	ldi	r25, 0x04	; 4
    1250:	21 50       	subi	r18, 0x01	; 1
    1252:	80 40       	sbci	r24, 0x00	; 0
    1254:	90 40       	sbci	r25, 0x00	; 0
    1256:	e1 f7       	brne	.-8      	; 0x1250 <SpinTimeSelected+0xe>
    1258:	00 c0       	rjmp	.+0      	; 0x125a <SpinTimeSelected+0x18>
    125a:	00 00       	nop
    125c:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <OneTimeRunFunFlag>
    1260:	91 11       	cpse	r25, r1
    1262:	12 c0       	rjmp	.+36     	; 0x1288 <SpinTimeSelected+0x46>
    1264:	83 e6       	ldi	r24, 0x63	; 99
    1266:	94 e0       	ldi	r25, 0x04	; 4
    1268:	01 dd       	rcall	.-1534   	; 0xc6c <USART0_transmitstring>
    126a:	ce 01       	movw	r24, r28
    126c:	09 dc       	rcall	.-2030   	; 0xa80 <EEPROM_Read2Bytes>
    126e:	4a e0       	ldi	r20, 0x0A	; 10
    1270:	65 ed       	ldi	r22, 0xD5	; 213
    1272:	74 e0       	ldi	r23, 0x04	; 4
    1274:	ec d1       	rcall	.+984    	; 0x164e <__itoa_ncheck>
    1276:	85 ed       	ldi	r24, 0xD5	; 213
    1278:	94 e0       	ldi	r25, 0x04	; 4
    127a:	f8 dc       	rcall	.-1552   	; 0xc6c <USART0_transmitstring>
    127c:	92 de       	rcall	.-732    	; 0xfa2 <Send_FF_to_Display>
    127e:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <OneTimeRunFunFlag>
    1282:	9f 5f       	subi	r25, 0xFF	; 255
    1284:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <OneTimeRunFunFlag>
    1288:	89 e4       	ldi	r24, 0x49	; 73
    128a:	95 e0       	ldi	r25, 0x05	; 5
    128c:	45 dd       	rcall	.-1398   	; 0xd18 <MatchCommand>
    128e:	83 31       	cpi	r24, 0x13	; 19
    1290:	79 f4       	brne	.+30     	; 0x12b0 <SpinTimeSelected+0x6e>
    1292:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1296:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    129a:	ce 01       	movw	r24, r28
    129c:	e1 db       	rcall	.-2110   	; 0xa60 <EEPROM_Write2Bytes>
    129e:	95 e0       	ldi	r25, 0x05	; 5
    12a0:	e2 ef       	ldi	r30, 0xF2	; 242
    12a2:	f2 e0       	ldi	r31, 0x02	; 2
    12a4:	a9 e4       	ldi	r26, 0x49	; 73
    12a6:	b5 e0       	ldi	r27, 0x05	; 5
    12a8:	01 90       	ld	r0, Z+
    12aa:	0d 92       	st	X+, r0
    12ac:	9a 95       	dec	r25
    12ae:	e1 f7       	brne	.-8      	; 0x12a8 <SpinTimeSelected+0x66>
    12b0:	89 e4       	ldi	r24, 0x49	; 73
    12b2:	95 e0       	ldi	r25, 0x05	; 5
    12b4:	31 dd       	rcall	.-1438   	; 0xd18 <MatchCommand>
    12b6:	84 36       	cpi	r24, 0x64	; 100
    12b8:	09 f0       	breq	.+2      	; 0x12bc <SpinTimeSelected+0x7a>
    12ba:	c7 cf       	rjmp	.-114    	; 0x124a <SpinTimeSelected+0x8>
    12bc:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <OneTimeRunFunFlag>
    12c0:	82 e3       	ldi	r24, 0x32	; 50
    12c2:	e9 e4       	ldi	r30, 0x49	; 73
    12c4:	f5 e0       	ldi	r31, 0x05	; 5
    12c6:	df 01       	movw	r26, r30
    12c8:	1d 92       	st	X+, r1
    12ca:	8a 95       	dec	r24
    12cc:	e9 f7       	brne	.-6      	; 0x12c8 <SpinTimeSelected+0x86>
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <Increase_gradually_motor>:
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	c0 e0       	ldi	r28, 0x00	; 0
    12da:	d0 e0       	ldi	r29, 0x00	; 0
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	89 eb       	ldi	r24, 0xB9	; 185
    12e0:	94 e0       	ldi	r25, 0x04	; 4
    12e2:	8c dc       	rcall	.-1768   	; 0xbfc <GPIO_WriteToPin>
    12e4:	80 ea       	ldi	r24, 0xA0	; 160
    12e6:	8a 95       	dec	r24
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <Increase_gradually_motor+0x12>
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	89 eb       	ldi	r24, 0xB9	; 185
    12ee:	94 e0       	ldi	r25, 0x04	; 4
    12f0:	85 dc       	rcall	.-1782   	; 0xbfc <GPIO_WriteToPin>
    12f2:	80 ea       	ldi	r24, 0xA0	; 160
    12f4:	8a 95       	dec	r24
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <Increase_gradually_motor+0x20>
    12f8:	21 96       	adiw	r28, 0x01	; 1
    12fa:	c1 15       	cp	r28, r1
    12fc:	82 e3       	ldi	r24, 0x32	; 50
    12fe:	d8 07       	cpc	r29, r24
    1300:	69 f7       	brne	.-38     	; 0x12dc <Increase_gradually_motor+0x8>
    1302:	c0 e0       	ldi	r28, 0x00	; 0
    1304:	d0 e0       	ldi	r29, 0x00	; 0
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	89 eb       	ldi	r24, 0xB9	; 185
    130a:	94 e0       	ldi	r25, 0x04	; 4
    130c:	77 dc       	rcall	.-1810   	; 0xbfc <GPIO_WriteToPin>
    130e:	80 e5       	ldi	r24, 0x50	; 80
    1310:	8a 95       	dec	r24
    1312:	f1 f7       	brne	.-4      	; 0x1310 <Increase_gradually_motor+0x3c>
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	89 eb       	ldi	r24, 0xB9	; 185
    1318:	94 e0       	ldi	r25, 0x04	; 4
    131a:	70 dc       	rcall	.-1824   	; 0xbfc <GPIO_WriteToPin>
    131c:	80 e5       	ldi	r24, 0x50	; 80
    131e:	8a 95       	dec	r24
    1320:	f1 f7       	brne	.-4      	; 0x131e <Increase_gradually_motor+0x4a>
    1322:	21 96       	adiw	r28, 0x01	; 1
    1324:	c1 15       	cp	r28, r1
    1326:	82 e3       	ldi	r24, 0x32	; 50
    1328:	d8 07       	cpc	r29, r24
    132a:	69 f7       	brne	.-38     	; 0x1306 <Increase_gradually_motor+0x32>
    132c:	c0 e0       	ldi	r28, 0x00	; 0
    132e:	d0 e0       	ldi	r29, 0x00	; 0
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	89 eb       	ldi	r24, 0xB9	; 185
    1334:	94 e0       	ldi	r25, 0x04	; 4
    1336:	62 dc       	rcall	.-1852   	; 0xbfc <GPIO_WriteToPin>
    1338:	80 e4       	ldi	r24, 0x40	; 64
    133a:	8a 95       	dec	r24
    133c:	f1 f7       	brne	.-4      	; 0x133a <Increase_gradually_motor+0x66>
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	89 eb       	ldi	r24, 0xB9	; 185
    1342:	94 e0       	ldi	r25, 0x04	; 4
    1344:	5b dc       	rcall	.-1866   	; 0xbfc <GPIO_WriteToPin>
    1346:	80 e4       	ldi	r24, 0x40	; 64
    1348:	8a 95       	dec	r24
    134a:	f1 f7       	brne	.-4      	; 0x1348 <Increase_gradually_motor+0x74>
    134c:	21 96       	adiw	r28, 0x01	; 1
    134e:	c1 15       	cp	r28, r1
    1350:	88 ec       	ldi	r24, 0xC8	; 200
    1352:	d8 07       	cpc	r29, r24
    1354:	69 f7       	brne	.-38     	; 0x1330 <Increase_gradually_motor+0x5c>
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	08 95       	ret

0000135c <Decrease_gradually_motor>:
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	c0 e0       	ldi	r28, 0x00	; 0
    1362:	d0 e0       	ldi	r29, 0x00	; 0
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	89 eb       	ldi	r24, 0xB9	; 185
    1368:	94 e0       	ldi	r25, 0x04	; 4
    136a:	48 dc       	rcall	.-1904   	; 0xbfc <GPIO_WriteToPin>
    136c:	80 e4       	ldi	r24, 0x40	; 64
    136e:	8a 95       	dec	r24
    1370:	f1 f7       	brne	.-4      	; 0x136e <Decrease_gradually_motor+0x12>
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	89 eb       	ldi	r24, 0xB9	; 185
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	41 dc       	rcall	.-1918   	; 0xbfc <GPIO_WriteToPin>
    137a:	80 e4       	ldi	r24, 0x40	; 64
    137c:	8a 95       	dec	r24
    137e:	f1 f7       	brne	.-4      	; 0x137c <Decrease_gradually_motor+0x20>
    1380:	21 96       	adiw	r28, 0x01	; 1
    1382:	c1 15       	cp	r28, r1
    1384:	88 ec       	ldi	r24, 0xC8	; 200
    1386:	d8 07       	cpc	r29, r24
    1388:	69 f7       	brne	.-38     	; 0x1364 <Decrease_gradually_motor+0x8>
    138a:	c0 e0       	ldi	r28, 0x00	; 0
    138c:	d0 e0       	ldi	r29, 0x00	; 0
    138e:	61 e0       	ldi	r22, 0x01	; 1
    1390:	89 eb       	ldi	r24, 0xB9	; 185
    1392:	94 e0       	ldi	r25, 0x04	; 4
    1394:	33 dc       	rcall	.-1946   	; 0xbfc <GPIO_WriteToPin>
    1396:	80 e5       	ldi	r24, 0x50	; 80
    1398:	8a 95       	dec	r24
    139a:	f1 f7       	brne	.-4      	; 0x1398 <Decrease_gradually_motor+0x3c>
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	89 eb       	ldi	r24, 0xB9	; 185
    13a0:	94 e0       	ldi	r25, 0x04	; 4
    13a2:	2c dc       	rcall	.-1960   	; 0xbfc <GPIO_WriteToPin>
    13a4:	80 e5       	ldi	r24, 0x50	; 80
    13a6:	8a 95       	dec	r24
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <Decrease_gradually_motor+0x4a>
    13aa:	21 96       	adiw	r28, 0x01	; 1
    13ac:	c1 15       	cp	r28, r1
    13ae:	82 e3       	ldi	r24, 0x32	; 50
    13b0:	d8 07       	cpc	r29, r24
    13b2:	69 f7       	brne	.-38     	; 0x138e <Decrease_gradually_motor+0x32>
    13b4:	c0 e0       	ldi	r28, 0x00	; 0
    13b6:	d0 e0       	ldi	r29, 0x00	; 0
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	89 eb       	ldi	r24, 0xB9	; 185
    13bc:	94 e0       	ldi	r25, 0x04	; 4
    13be:	1e dc       	rcall	.-1988   	; 0xbfc <GPIO_WriteToPin>
    13c0:	80 ea       	ldi	r24, 0xA0	; 160
    13c2:	8a 95       	dec	r24
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <Decrease_gradually_motor+0x66>
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	89 eb       	ldi	r24, 0xB9	; 185
    13ca:	94 e0       	ldi	r25, 0x04	; 4
    13cc:	17 dc       	rcall	.-2002   	; 0xbfc <GPIO_WriteToPin>
    13ce:	80 ea       	ldi	r24, 0xA0	; 160
    13d0:	8a 95       	dec	r24
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <Decrease_gradually_motor+0x74>
    13d4:	21 96       	adiw	r28, 0x01	; 1
    13d6:	c1 15       	cp	r28, r1
    13d8:	82 e3       	ldi	r24, 0x32	; 50
    13da:	d8 07       	cpc	r29, r24
    13dc:	69 f7       	brne	.-38     	; 0x13b8 <Decrease_gradually_motor+0x5c>
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	08 95       	ret

000013e4 <Spin_motor>:
    13e4:	8f 92       	push	r8
    13e6:	9f 92       	push	r9
    13e8:	af 92       	push	r10
    13ea:	bf 92       	push	r11
    13ec:	cf 92       	push	r12
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	88 23       	and	r24, r24
    13f6:	99 f1       	breq	.+102    	; 0x145e <Spin_motor+0x7a>
    13f8:	f8 2e       	mov	r15, r24
    13fa:	6c df       	rcall	.-296    	; 0x12d4 <Increase_gradually_motor>
    13fc:	ad ec       	ldi	r26, 0xCD	; 205
    13fe:	fa 9e       	mul	r15, r26
    1400:	a1 2d       	mov	r26, r1
    1402:	11 24       	eor	r1, r1
    1404:	a6 95       	lsr	r26
    1406:	a6 95       	lsr	r26
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	11 97       	sbiw	r26, 0x01	; 1
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	3c eb       	ldi	r19, 0xBC	; 188
    1410:	42 e0       	ldi	r20, 0x02	; 2
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	b8 d0       	rcall	.+368    	; 0x1586 <__mulshisi3>
    1416:	4b 01       	movw	r8, r22
    1418:	5c 01       	movw	r10, r24
    141a:	67 2b       	or	r22, r23
    141c:	68 2b       	or	r22, r24
    141e:	69 2b       	or	r22, r25
    1420:	e9 f0       	breq	.+58     	; 0x145c <Spin_motor+0x78>
    1422:	c1 2c       	mov	r12, r1
    1424:	d1 2c       	mov	r13, r1
    1426:	76 01       	movw	r14, r12
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	89 eb       	ldi	r24, 0xB9	; 185
    142c:	94 e0       	ldi	r25, 0x04	; 4
    142e:	e6 db       	rcall	.-2100   	; 0xbfc <GPIO_WriteToPin>
    1430:	8a e2       	ldi	r24, 0x2A	; 42
    1432:	8a 95       	dec	r24
    1434:	f1 f7       	brne	.-4      	; 0x1432 <Spin_motor+0x4e>
    1436:	00 c0       	rjmp	.+0      	; 0x1438 <Spin_motor+0x54>
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	89 eb       	ldi	r24, 0xB9	; 185
    143c:	94 e0       	ldi	r25, 0x04	; 4
    143e:	de db       	rcall	.-2116   	; 0xbfc <GPIO_WriteToPin>
    1440:	8a e2       	ldi	r24, 0x2A	; 42
    1442:	8a 95       	dec	r24
    1444:	f1 f7       	brne	.-4      	; 0x1442 <Spin_motor+0x5e>
    1446:	00 c0       	rjmp	.+0      	; 0x1448 <Spin_motor+0x64>
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	c8 1a       	sub	r12, r24
    144c:	d8 0a       	sbc	r13, r24
    144e:	e8 0a       	sbc	r14, r24
    1450:	f8 0a       	sbc	r15, r24
    1452:	c8 14       	cp	r12, r8
    1454:	d9 04       	cpc	r13, r9
    1456:	ea 04       	cpc	r14, r10
    1458:	fb 04       	cpc	r15, r11
    145a:	31 f7       	brne	.-52     	; 0x1428 <Spin_motor+0x44>
    145c:	7f df       	rcall	.-258    	; 0x135c <Decrease_gradually_motor>
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	bf 90       	pop	r11
    1468:	af 90       	pop	r10
    146a:	9f 90       	pop	r9
    146c:	8f 90       	pop	r8
    146e:	08 95       	ret

00001470 <Send_Text_On_Screen>:
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	bc 01       	movw	r22, r24
    147a:	2f ef       	ldi	r18, 0xFF	; 255
    147c:	81 ee       	ldi	r24, 0xE1	; 225
    147e:	94 e0       	ldi	r25, 0x04	; 4
    1480:	21 50       	subi	r18, 0x01	; 1
    1482:	80 40       	sbci	r24, 0x00	; 0
    1484:	90 40       	sbci	r25, 0x00	; 0
    1486:	e1 f7       	brne	.-8      	; 0x1480 <Send_Text_On_Screen+0x10>
    1488:	00 c0       	rjmp	.+0      	; 0x148a <Send_Text_On_Screen+0x1a>
    148a:	00 00       	nop
    148c:	c5 ed       	ldi	r28, 0xD5	; 213
    148e:	d4 e0       	ldi	r29, 0x04	; 4
    1490:	de 01       	movw	r26, r28
    1492:	0d 90       	ld	r0, X+
    1494:	00 20       	and	r0, r0
    1496:	e9 f7       	brne	.-6      	; 0x1492 <Send_Text_On_Screen+0x22>
    1498:	11 97       	sbiw	r26, 0x01	; 1
    149a:	9a e0       	ldi	r25, 0x0A	; 10
    149c:	eb e6       	ldi	r30, 0x6B	; 107
    149e:	f4 e0       	ldi	r31, 0x04	; 4
    14a0:	01 90       	ld	r0, Z+
    14a2:	0d 92       	st	X+, r0
    14a4:	9a 95       	dec	r25
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <Send_Text_On_Screen+0x30>
    14a8:	fe 01       	movw	r30, r28
    14aa:	01 90       	ld	r0, Z+
    14ac:	00 20       	and	r0, r0
    14ae:	e9 f7       	brne	.-6      	; 0x14aa <Send_Text_On_Screen+0x3a>
    14b0:	31 97       	sbiw	r30, 0x01	; 1
    14b2:	02 e2       	ldi	r16, 0x22	; 34
    14b4:	10 e0       	ldi	r17, 0x00	; 0
    14b6:	11 83       	std	Z+1, r17	; 0x01
    14b8:	00 83       	st	Z, r16
    14ba:	ce 01       	movw	r24, r28
    14bc:	86 d0       	rcall	.+268    	; 0x15ca <strcat>
    14be:	fe 01       	movw	r30, r28
    14c0:	01 90       	ld	r0, Z+
    14c2:	00 20       	and	r0, r0
    14c4:	e9 f7       	brne	.-6      	; 0x14c0 <Send_Text_On_Screen+0x50>
    14c6:	31 97       	sbiw	r30, 0x01	; 1
    14c8:	11 83       	std	Z+1, r17	; 0x01
    14ca:	00 83       	st	Z, r16
    14cc:	ce 01       	movw	r24, r28
    14ce:	ce db       	rcall	.-2148   	; 0xc6c <USART0_transmitstring>
    14d0:	ce 01       	movw	r24, r28
    14d2:	fd db       	rcall	.-2054   	; 0xcce <USART2_transmitstring>
    14d4:	66 dd       	rcall	.-1332   	; 0xfa2 <Send_FF_to_Display>
    14d6:	82 e3       	ldi	r24, 0x32	; 50
    14d8:	fe 01       	movw	r30, r28
    14da:	11 92       	st	Z+, r1
    14dc:	8a 95       	dec	r24
    14de:	e9 f7       	brne	.-6      	; 0x14da <Send_Text_On_Screen+0x6a>
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	08 95       	ret

000014ea <Blower_ON>:
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	ec 01       	movw	r28, r24
    14f0:	fc db       	rcall	.-2056   	; 0xcea <Timer1_init>
    14f2:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <time_in_seconds>
    14f6:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <time_in_seconds+0x1>
    14fa:	c8 17       	cp	r28, r24
    14fc:	d9 07       	cpc	r29, r25
    14fe:	59 f0       	breq	.+22     	; 0x1516 <Blower_ON+0x2c>
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	81 ec       	ldi	r24, 0xC1	; 193
    1504:	94 e0       	ldi	r25, 0x04	; 4
    1506:	7a db       	rcall	.-2316   	; 0xbfc <GPIO_WriteToPin>
    1508:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <time_in_seconds>
    150c:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <time_in_seconds+0x1>
    1510:	8c 17       	cp	r24, r28
    1512:	9d 07       	cpc	r25, r29
    1514:	a9 f7       	brne	.-22     	; 0x1500 <Blower_ON+0x16>
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	81 ec       	ldi	r24, 0xC1	; 193
    151a:	94 e0       	ldi	r25, 0x04	; 4
    151c:	6f db       	rcall	.-2338   	; 0xbfc <GPIO_WriteToPin>
    151e:	ef e6       	ldi	r30, 0x6F	; 111
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8e 7f       	andi	r24, 0xFE	; 254
    1526:	80 83       	st	Z, r24
    1528:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	08 95       	ret

00001532 <Reagent_Wait_Time>:
		_delay_ms(1);
	}
}

void Reagent_Wait_Time(uint16_t wait_Time)
{
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	ec 01       	movw	r28, r24
	Timer1_init();
    1538:	d8 db       	rcall	.-2128   	; 0xcea <Timer1_init>
// 	itoa(time_in_seconds, buffer, 10);
// 	USART2_transmitstring("\ntime =");
// 	USART2_transmitstring(buffer);
// 	memset(buffer, '\0', PACKET_SIZE * sizeof(buffer[0]));	// rec_bufferglob clear
	while( (wait_Time - time_in_seconds) !=0 )
    153a:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <time_in_seconds>
    153e:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <time_in_seconds+0x1>
    1542:	c8 17       	cp	r28, r24
    1544:	d9 07       	cpc	r29, r25
    1546:	69 f0       	breq	.+26     	; 0x1562 <Reagent_Wait_Time+0x30>
    1548:	8f e1       	ldi	r24, 0x1F	; 31
    154a:	9e e4       	ldi	r25, 0x4E	; 78
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <Reagent_Wait_Time+0x1a>
    1550:	00 c0       	rjmp	.+0      	; 0x1552 <Reagent_Wait_Time+0x20>
    1552:	00 00       	nop
    1554:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <time_in_seconds>
    1558:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <time_in_seconds+0x1>
    155c:	8c 17       	cp	r24, r28
    155e:	9d 07       	cpc	r25, r29
    1560:	99 f7       	brne	.-26     	; 0x1548 <Reagent_Wait_Time+0x16>
 		_delay_ms(5);
	TIMSK1 &= ~(1<<0);	// Timer1 Interrupt disable
    1562:	ef e6       	ldi	r30, 0x6F	; 111
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8e 7f       	andi	r24, 0xFE	; 254
    156a:	80 83       	st	Z, r24
	TCCR1B = 0;			// Timer1 OFF
    156c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	//USART2_transmitstring("here");
	//time_in_seconds=0;
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <__tablejump2__>:
    1576:	ee 0f       	add	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	88 1f       	adc	r24, r24
    157c:	8b bf       	out	0x3b, r24	; 59
    157e:	07 90       	elpm	r0, Z+
    1580:	f6 91       	elpm	r31, Z
    1582:	e0 2d       	mov	r30, r0
    1584:	19 94       	eijmp

00001586 <__mulshisi3>:
    1586:	b7 ff       	sbrs	r27, 7
    1588:	04 c0       	rjmp	.+8      	; 0x1592 <__muluhisi3>

0000158a <__mulohisi3>:
    158a:	03 d0       	rcall	.+6      	; 0x1592 <__muluhisi3>
    158c:	82 1b       	sub	r24, r18
    158e:	93 0b       	sbc	r25, r19
    1590:	08 95       	ret

00001592 <__muluhisi3>:
    1592:	09 d0       	rcall	.+18     	; 0x15a6 <__umulhisi3>
    1594:	a5 9f       	mul	r26, r21
    1596:	90 0d       	add	r25, r0
    1598:	b4 9f       	mul	r27, r20
    159a:	90 0d       	add	r25, r0
    159c:	a4 9f       	mul	r26, r20
    159e:	80 0d       	add	r24, r0
    15a0:	91 1d       	adc	r25, r1
    15a2:	11 24       	eor	r1, r1
    15a4:	08 95       	ret

000015a6 <__umulhisi3>:
    15a6:	a2 9f       	mul	r26, r18
    15a8:	b0 01       	movw	r22, r0
    15aa:	b3 9f       	mul	r27, r19
    15ac:	c0 01       	movw	r24, r0
    15ae:	a3 9f       	mul	r26, r19
    15b0:	70 0d       	add	r23, r0
    15b2:	81 1d       	adc	r24, r1
    15b4:	11 24       	eor	r1, r1
    15b6:	91 1d       	adc	r25, r1
    15b8:	b2 9f       	mul	r27, r18
    15ba:	70 0d       	add	r23, r0
    15bc:	81 1d       	adc	r24, r1
    15be:	11 24       	eor	r1, r1
    15c0:	91 1d       	adc	r25, r1
    15c2:	08 95       	ret

000015c4 <strtok>:
    15c4:	46 e7       	ldi	r20, 0x76	; 118
    15c6:	54 e0       	ldi	r21, 0x04	; 4
    15c8:	1b c0       	rjmp	.+54     	; 0x1600 <strtok_r>

000015ca <strcat>:
    15ca:	fb 01       	movw	r30, r22
    15cc:	dc 01       	movw	r26, r24
    15ce:	0d 90       	ld	r0, X+
    15d0:	00 20       	and	r0, r0
    15d2:	e9 f7       	brne	.-6      	; 0x15ce <strcat+0x4>
    15d4:	11 97       	sbiw	r26, 0x01	; 1
    15d6:	01 90       	ld	r0, Z+
    15d8:	0d 92       	st	X+, r0
    15da:	00 20       	and	r0, r0
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <strcat+0xc>
    15de:	08 95       	ret

000015e0 <strcmp>:
    15e0:	fb 01       	movw	r30, r22
    15e2:	dc 01       	movw	r26, r24
    15e4:	8d 91       	ld	r24, X+
    15e6:	01 90       	ld	r0, Z+
    15e8:	80 19       	sub	r24, r0
    15ea:	01 10       	cpse	r0, r1
    15ec:	d9 f3       	breq	.-10     	; 0x15e4 <strcmp+0x4>
    15ee:	99 0b       	sbc	r25, r25
    15f0:	08 95       	ret

000015f2 <strcpy>:
    15f2:	fb 01       	movw	r30, r22
    15f4:	dc 01       	movw	r26, r24
    15f6:	01 90       	ld	r0, Z+
    15f8:	0d 92       	st	X+, r0
    15fa:	00 20       	and	r0, r0
    15fc:	e1 f7       	brne	.-8      	; 0x15f6 <strcpy+0x4>
    15fe:	08 95       	ret

00001600 <strtok_r>:
    1600:	fa 01       	movw	r30, r20
    1602:	a1 91       	ld	r26, Z+
    1604:	b0 81       	ld	r27, Z
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	19 f4       	brne	.+6      	; 0x1610 <strtok_r+0x10>
    160a:	10 97       	sbiw	r26, 0x00	; 0
    160c:	e1 f0       	breq	.+56     	; 0x1646 <strtok_r+0x46>
    160e:	cd 01       	movw	r24, r26
    1610:	dc 01       	movw	r26, r24
    1612:	cd 01       	movw	r24, r26
    1614:	0d 90       	ld	r0, X+
    1616:	00 20       	and	r0, r0
    1618:	11 f4       	brne	.+4      	; 0x161e <strtok_r+0x1e>
    161a:	c0 01       	movw	r24, r0
    161c:	13 c0       	rjmp	.+38     	; 0x1644 <strtok_r+0x44>
    161e:	fb 01       	movw	r30, r22
    1620:	21 91       	ld	r18, Z+
    1622:	22 23       	and	r18, r18
    1624:	19 f0       	breq	.+6      	; 0x162c <strtok_r+0x2c>
    1626:	20 15       	cp	r18, r0
    1628:	d9 f7       	brne	.-10     	; 0x1620 <strtok_r+0x20>
    162a:	f3 cf       	rjmp	.-26     	; 0x1612 <strtok_r+0x12>
    162c:	fb 01       	movw	r30, r22
    162e:	21 91       	ld	r18, Z+
    1630:	20 15       	cp	r18, r0
    1632:	19 f4       	brne	.+6      	; 0x163a <strtok_r+0x3a>
    1634:	1e 92       	st	-X, r1
    1636:	11 96       	adiw	r26, 0x01	; 1
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <strtok_r+0x46>
    163a:	22 23       	and	r18, r18
    163c:	c1 f7       	brne	.-16     	; 0x162e <strtok_r+0x2e>
    163e:	0d 90       	ld	r0, X+
    1640:	00 20       	and	r0, r0
    1642:	a1 f7       	brne	.-24     	; 0x162c <strtok_r+0x2c>
    1644:	d0 01       	movw	r26, r0
    1646:	fa 01       	movw	r30, r20
    1648:	a1 93       	st	Z+, r26
    164a:	b0 83       	st	Z, r27
    164c:	08 95       	ret

0000164e <__itoa_ncheck>:
    164e:	bb 27       	eor	r27, r27
    1650:	4a 30       	cpi	r20, 0x0A	; 10
    1652:	31 f4       	brne	.+12     	; 0x1660 <__itoa_ncheck+0x12>
    1654:	99 23       	and	r25, r25
    1656:	22 f4       	brpl	.+8      	; 0x1660 <__itoa_ncheck+0x12>
    1658:	bd e2       	ldi	r27, 0x2D	; 45
    165a:	90 95       	com	r25
    165c:	81 95       	neg	r24
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <__utoa_common>

00001662 <__utoa_ncheck>:
    1662:	bb 27       	eor	r27, r27

00001664 <__utoa_common>:
    1664:	fb 01       	movw	r30, r22
    1666:	55 27       	eor	r21, r21
    1668:	aa 27       	eor	r26, r26
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	aa 1f       	adc	r26, r26
    1670:	a4 17       	cp	r26, r20
    1672:	10 f0       	brcs	.+4      	; 0x1678 <__utoa_common+0x14>
    1674:	a4 1b       	sub	r26, r20
    1676:	83 95       	inc	r24
    1678:	50 51       	subi	r21, 0x10	; 16
    167a:	b9 f7       	brne	.-18     	; 0x166a <__utoa_common+0x6>
    167c:	a0 5d       	subi	r26, 0xD0	; 208
    167e:	aa 33       	cpi	r26, 0x3A	; 58
    1680:	08 f0       	brcs	.+2      	; 0x1684 <__utoa_common+0x20>
    1682:	a9 5d       	subi	r26, 0xD9	; 217
    1684:	a1 93       	st	Z+, r26
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	79 f7       	brne	.-34     	; 0x1668 <__utoa_common+0x4>
    168a:	b1 11       	cpse	r27, r1
    168c:	b1 93       	st	Z+, r27
    168e:	11 92       	st	Z+, r1
    1690:	cb 01       	movw	r24, r22
    1692:	00 c0       	rjmp	.+0      	; 0x1694 <strrev>

00001694 <strrev>:
    1694:	dc 01       	movw	r26, r24
    1696:	fc 01       	movw	r30, r24
    1698:	67 2f       	mov	r22, r23
    169a:	71 91       	ld	r23, Z+
    169c:	77 23       	and	r23, r23
    169e:	e1 f7       	brne	.-8      	; 0x1698 <strrev+0x4>
    16a0:	32 97       	sbiw	r30, 0x02	; 2
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <strrev+0x18>
    16a4:	7c 91       	ld	r23, X
    16a6:	6d 93       	st	X+, r22
    16a8:	70 83       	st	Z, r23
    16aa:	62 91       	ld	r22, -Z
    16ac:	ae 17       	cp	r26, r30
    16ae:	bf 07       	cpc	r27, r31
    16b0:	c8 f3       	brcs	.-14     	; 0x16a4 <strrev+0x10>
    16b2:	08 95       	ret

000016b4 <_exit>:
    16b4:	f8 94       	cli

000016b6 <__stop_program>:
    16b6:	ff cf       	rjmp	.-2      	; 0x16b6 <__stop_program>
