
Slide_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000028e  00800200  0000148a  0000151e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000148a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000105  0080048e  0080048e  000017ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e7b  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e3  00000000  00000000  00005817  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016de  00000000  00000000  000068fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  00007fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a69  00000000  00000000  00008488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019dc  00000000  00000000  00008ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9d c0       	rjmp	.+314    	; 0x13c <__ctors_end>
       2:	00 00       	nop
       4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
       6:	00 00       	nop
       8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
       a:	00 00       	nop
       c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
       e:	00 00       	nop
      10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
      12:	00 00       	nop
      14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
      1e:	00 00       	nop
      20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
      22:	00 00       	nop
      24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
      26:	00 00       	nop
      28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a7 c0       	rjmp	.+334    	; 0x17c <__bad_interrupt>
      2e:	00 00       	nop
      30:	a5 c0       	rjmp	.+330    	; 0x17c <__bad_interrupt>
      32:	00 00       	nop
      34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
      36:	00 00       	nop
      38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
      3e:	00 00       	nop
      40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
      42:	00 00       	nop
      44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
      46:	00 00       	nop
      48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
      4e:	00 00       	nop
      50:	75 c4       	rjmp	.+2282   	; 0x93c <__vector_20>
      52:	00 00       	nop
      54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
      56:	00 00       	nop
      58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
      5e:	00 00       	nop
      60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
      62:	00 00       	nop
      64:	f5 c3       	rjmp	.+2026   	; 0x850 <__vector_25>
      66:	00 00       	nop
      68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
      6e:	00 00       	nop
      70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
      72:	00 00       	nop
      74:	83 c0       	rjmp	.+262    	; 0x17c <__bad_interrupt>
      76:	00 00       	nop
      78:	81 c0       	rjmp	.+258    	; 0x17c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7f c0       	rjmp	.+254    	; 0x17c <__bad_interrupt>
      7e:	00 00       	nop
      80:	7d c0       	rjmp	.+250    	; 0x17c <__bad_interrupt>
      82:	00 00       	nop
      84:	7b c0       	rjmp	.+246    	; 0x17c <__bad_interrupt>
      86:	00 00       	nop
      88:	79 c0       	rjmp	.+242    	; 0x17c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	77 c0       	rjmp	.+238    	; 0x17c <__bad_interrupt>
      8e:	00 00       	nop
      90:	75 c0       	rjmp	.+234    	; 0x17c <__bad_interrupt>
      92:	00 00       	nop
      94:	73 c0       	rjmp	.+230    	; 0x17c <__bad_interrupt>
      96:	00 00       	nop
      98:	71 c0       	rjmp	.+226    	; 0x17c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6f c0       	rjmp	.+222    	; 0x17c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6d c0       	rjmp	.+218    	; 0x17c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6b c0       	rjmp	.+214    	; 0x17c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	69 c0       	rjmp	.+210    	; 0x17c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	67 c0       	rjmp	.+206    	; 0x17c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	65 c0       	rjmp	.+202    	; 0x17c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	63 c0       	rjmp	.+198    	; 0x17c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	61 c0       	rjmp	.+194    	; 0x17c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5f c0       	rjmp	.+190    	; 0x17c <__bad_interrupt>
      be:	00 00       	nop
      c0:	5d c0       	rjmp	.+186    	; 0x17c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5b c0       	rjmp	.+182    	; 0x17c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	59 c0       	rjmp	.+178    	; 0x17c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	54 c3       	rjmp	.+1704   	; 0x776 <__vector_51>
      ce:	00 00       	nop
      d0:	55 c0       	rjmp	.+170    	; 0x17c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	53 c0       	rjmp	.+166    	; 0x17c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	51 c0       	rjmp	.+162    	; 0x17c <__bad_interrupt>
      da:	00 00       	nop
      dc:	4f c0       	rjmp	.+158    	; 0x17c <__bad_interrupt>
      de:	00 00       	nop
      e0:	4d c0       	rjmp	.+154    	; 0x17c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a1 01       	movw	r20, r2
      e6:	ba 01       	movw	r22, r20
      e8:	ba 01       	movw	r22, r20
      ea:	ba 01       	movw	r22, r20
      ec:	a4 01       	movw	r20, r8
      ee:	a7 01       	movw	r20, r14
      f0:	ba 01       	movw	r22, r20
      f2:	ab 01       	movw	r20, r22
      f4:	af 01       	movw	r20, r30
      f6:	b3 01       	movw	r22, r6
      f8:	b7 01       	movw	r22, r14
      fa:	00 02       	muls	r16, r16
      fc:	19 02       	muls	r17, r25
      fe:	19 02       	muls	r17, r25
     100:	19 02       	muls	r17, r25
     102:	03 02       	muls	r16, r19
     104:	06 02       	muls	r16, r22
     106:	19 02       	muls	r17, r25
     108:	0a 02       	muls	r16, r26
     10a:	0e 02       	muls	r16, r30
     10c:	12 02       	muls	r17, r18
     10e:	16 02       	muls	r17, r22
     110:	5f 02       	muls	r21, r31
     112:	78 02       	muls	r23, r24
     114:	78 02       	muls	r23, r24
     116:	78 02       	muls	r23, r24
     118:	62 02       	muls	r22, r18
     11a:	65 02       	muls	r22, r21
     11c:	78 02       	muls	r23, r24
     11e:	69 02       	muls	r22, r25
     120:	6d 02       	muls	r22, r29
     122:	71 02       	muls	r23, r17
     124:	75 02       	muls	r23, r21
     126:	be 02       	muls	r27, r30
     128:	d7 02       	muls	r29, r23
     12a:	d7 02       	muls	r29, r23
     12c:	d7 02       	muls	r29, r23
     12e:	c1 02       	muls	r28, r17
     130:	c4 02       	muls	r28, r20
     132:	d7 02       	muls	r29, r23
     134:	c8 02       	muls	r28, r24
     136:	cc 02       	muls	r28, r28
     138:	d0 02       	muls	r29, r16
     13a:	d4 02       	muls	r29, r20

0000013c <__ctors_end>:
     13c:	11 24       	eor	r1, r1
     13e:	1f be       	out	0x3f, r1	; 63
     140:	cf ef       	ldi	r28, 0xFF	; 255
     142:	d1 e2       	ldi	r29, 0x21	; 33
     144:	de bf       	out	0x3e, r29	; 62
     146:	cd bf       	out	0x3d, r28	; 61
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0c bf       	out	0x3c, r16	; 60

0000014c <__do_copy_data>:
     14c:	14 e0       	ldi	r17, 0x04	; 4
     14e:	a0 e0       	ldi	r26, 0x00	; 0
     150:	b2 e0       	ldi	r27, 0x02	; 2
     152:	ea e8       	ldi	r30, 0x8A	; 138
     154:	f4 e1       	ldi	r31, 0x14	; 20
     156:	00 e0       	ldi	r16, 0x00	; 0
     158:	0b bf       	out	0x3b, r16	; 59
     15a:	02 c0       	rjmp	.+4      	; 0x160 <__do_copy_data+0x14>
     15c:	07 90       	elpm	r0, Z+
     15e:	0d 92       	st	X+, r0
     160:	ae 38       	cpi	r26, 0x8E	; 142
     162:	b1 07       	cpc	r27, r17
     164:	d9 f7       	brne	.-10     	; 0x15c <__do_copy_data+0x10>

00000166 <__do_clear_bss>:
     166:	25 e0       	ldi	r18, 0x05	; 5
     168:	ae e8       	ldi	r26, 0x8E	; 142
     16a:	b4 e0       	ldi	r27, 0x04	; 4
     16c:	01 c0       	rjmp	.+2      	; 0x170 <.do_clear_bss_start>

0000016e <.do_clear_bss_loop>:
     16e:	1d 92       	st	X+, r1

00000170 <.do_clear_bss_start>:
     170:	a3 39       	cpi	r26, 0x93	; 147
     172:	b2 07       	cpc	r27, r18
     174:	e1 f7       	brne	.-8      	; 0x16e <.do_clear_bss_loop>
     176:	03 d0       	rcall	.+6      	; 0x17e <main>
     178:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <_exit>

0000017c <__bad_interrupt>:
     17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <main>:
	//uint8_t OneTimeRunFunFlag=0;
	uint32_t counting = 0;
	
	
	float stepdelay;
	USART2_Init(MYUBRR);
     17e:	87 e6       	ldi	r24, 0x67	; 103
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	4e d5       	rcall	.+2716   	; 0xc20 <USART2_Init>
	USART0_Init(MYUBRR);
     184:	87 e6       	ldi	r24, 0x67	; 103
     186:	90 e0       	ldi	r25, 0x00	; 0
	GpioPinInit();
     188:	2a d5       	rcall	.+2644   	; 0xbde <USART0_Init>
     18a:	7c d4       	rcall	.+2296   	; 0xa84 <GpioPinInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18c:	2f ef       	ldi	r18, 0xFF	; 255
     18e:	83 ed       	ldi	r24, 0xD3	; 211
     190:	90 e3       	ldi	r25, 0x30	; 48
     192:	21 50       	subi	r18, 0x01	; 1
     194:	80 40       	sbci	r24, 0x00	; 0
     196:	90 40       	sbci	r25, 0x00	; 0
     198:	e1 f7       	brne	.-8      	; 0x192 <main+0x14>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x1e>
	_delay_ms(1000);
	//Timer1_init();
	USART2_transmitstring("sdjcsdb");
     19c:	00 00       	nop
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	92 e0       	ldi	r25, 0x02	; 2
	USART0_transmitstring("page Main");
     1a2:	61 d5       	rcall	.+2754   	; 0xc66 <USART2_transmitstring>
     1a4:	8a e0       	ldi	r24, 0x0A	; 10
     1a6:	92 e0       	ldi	r25, 0x02	; 2
	Send_FF_to_Display();
     1a8:	2d d5       	rcall	.+2650   	; 0xc04 <USART0_transmitstring>
	if (EEPROM_Read2Bytes(P4_REG_E_WAIT_TIME_ADD)==0xFFFF)
     1aa:	c7 d6       	rcall	.+3470   	; 0xf3a <Send_FF_to_Display>
     1ac:	8e e5       	ldi	r24, 0x5E	; 94
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	33 d4       	rcall	.+2150   	; 0xa18 <EEPROM_Read2Bytes>
     1b2:	01 96       	adiw	r24, 0x01	; 1
		EEPROM_DisplayDataInit();
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <main+0x3a>
     1b6:	cf d6       	rcall	.+3486   	; 0xf56 <EEPROM_DisplayDataInit>
	GPIO_WriteToPin(&Motor_Dir, HIGH);
     1b8:	61 e0       	ldi	r22, 0x01	; 1
     1ba:	85 ee       	ldi	r24, 0xE5	; 229
     1bc:	94 e0       	ldi	r25, 0x04	; 4
     1be:	ea d4       	rcall	.+2516   	; 0xb94 <GPIO_WriteToPin>
     1c0:	78 94       	sei
	//TIMSK1 &= ~(1<<0);	// Interrupt disable

	sei();		// To enable Global Interrupt, cli(); for disable
     1c2:	c2 e3       	ldi	r28, 0x32	; 50
												break;
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P3_REG_A_END_BLOWER_TIME_ADD);
     1c4:	bf ef       	ldi	r27, 0xFF	; 255
     1c6:	21 ee       	ldi	r18, 0xE1	; 225
     1c8:	84 e0       	ldi	r24, 0x04	; 4
     1ca:	b1 50       	subi	r27, 0x01	; 1
     1cc:	20 40       	sbci	r18, 0x00	; 0
     1ce:	80 40       	sbci	r24, 0x00	; 0
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x4c>
     1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x56>
     1d4:	00 00       	nop
    while (1) 
    {	
		_delay_ms(DELAY_IN_LOOP);
		//USART2_transmitstring("\nat Home ");
		//USART0_transmitstring("Home ");
		switch(MatchCommand(rec_bufferglob))
     1d6:	81 e6       	ldi	r24, 0x61	; 97
     1d8:	95 e0       	ldi	r25, 0x05	; 5
     1da:	6a d5       	rcall	.+2772   	; 0xcb0 <MatchCommand>
     1dc:	83 30       	cpi	r24, 0x03	; 3
     1de:	09 f4       	brne	.+2      	; 0x1e2 <main+0x64>
     1e0:	42 c1       	rjmp	.+644    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     1e2:	30 f4       	brcc	.+12     	; 0x1f0 <main+0x72>
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	69 f0       	breq	.+26     	; 0x202 <main+0x84>
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	09 f4       	brne	.+2      	; 0x1ee <main+0x70>
     1ec:	dd c0       	rjmp	.+442    	; 0x3a8 <main+0x22a>
     1ee:	ea cf       	rjmp	.-44     	; 0x1c4 <main+0x46>
     1f0:	82 31       	cpi	r24, 0x12	; 18
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <main+0x78>
     1f4:	f6 c1       	rjmp	.+1004   	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     1f6:	84 31       	cpi	r24, 0x14	; 20
     1f8:	09 f4       	brne	.+2      	; 0x1fc <main+0x7e>
     1fa:	ff c1       	rjmp	.+1022   	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	11 f7       	brne	.-60     	; 0x1c4 <main+0x46>
     200:	91 c1       	rjmp	.+802    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     202:	9f ef       	ldi	r25, 0xFF	; 255
     204:	a1 ee       	ldi	r26, 0xE1	; 225
     206:	b4 e0       	ldi	r27, 0x04	; 4
     208:	91 50       	subi	r25, 0x01	; 1
     20a:	a0 40       	sbci	r26, 0x00	; 0
     20c:	b0 40       	sbci	r27, 0x00	; 0
     20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x8a>
     210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x94>
     212:	00 00       	nop
					{	
						
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     214:	81 e6       	ldi	r24, 0x61	; 97
     216:	95 e0       	ldi	r25, 0x05	; 5
     218:	4b d5       	rcall	.+2710   	; 0xcb0 <MatchCommand>
     21a:	85 30       	cpi	r24, 0x05	; 5
     21c:	09 f4       	brne	.+2      	; 0x220 <main+0xa2>
     21e:	79 c0       	rjmp	.+242    	; 0x312 <main+0x194>
     220:	86 30       	cpi	r24, 0x06	; 6
     222:	09 f0       	breq	.+2      	; 0x226 <main+0xa8>
     224:	b3 c0       	rjmp	.+358    	; 0x38c <main+0x20e>
     226:	2f ef       	ldi	r18, 0xFF	; 255
     228:	81 ee       	ldi	r24, 0xE1	; 225
     22a:	94 e0       	ldi	r25, 0x04	; 4
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	80 40       	sbci	r24, 0x00	; 0
     230:	90 40       	sbci	r25, 0x00	; 0
     232:	e1 f7       	brne	.-8      	; 0x22c <main+0xae>
     234:	00 c0       	rjmp	.+0      	; 0x236 <main+0xb8>
							{	
								case START:
									{
										_delay_ms(100);
										USART0_transmitstring("page STATUS");
     236:	00 00       	nop
     238:	84 e1       	ldi	r24, 0x14	; 20
     23a:	92 e0       	ldi	r25, 0x02	; 2
     23c:	e3 d4       	rcall	.+2502   	; 0xc04 <USART0_transmitstring>
										Send_FF_to_Display();
     23e:	7d d6       	rcall	.+3322   	; 0xf3a <Send_FF_to_Display>
     240:	80 e2       	ldi	r24, 0x20	; 32
										Send_Text_On_Screen("Program 1 Initiated");
     242:	92 e0       	ldi	r25, 0x02	; 2
     244:	0e 94 3f 09 	call	0x127e	; 0x127e <Send_Text_On_Screen>
     248:	af ef       	ldi	r26, 0xFF	; 255
     24a:	bd e3       	ldi	r27, 0x3D	; 61
     24c:	29 e4       	ldi	r18, 0x49	; 73
     24e:	a1 50       	subi	r26, 0x01	; 1
     250:	b0 40       	sbci	r27, 0x00	; 0
     252:	20 40       	sbci	r18, 0x00	; 0
     254:	e1 f7       	brne	.-8      	; 0x24e <main+0xd0>
     256:	00 c0       	rjmp	.+0      	; 0x258 <main+0xda>
     258:	00 00       	nop
										_delay_ms(1500);
										
										Send_Text_On_Screen("Drying Cycle In Progress...");
     25a:	84 e3       	ldi	r24, 0x34	; 52
     25c:	92 e0       	ldi	r25, 0x02	; 2
     25e:	0e 94 3f 09 	call	0x127e	; 0x127e <Send_Text_On_Screen>
										Blower_ON(EEPROM_Read2Bytes(P1_REG_A_START_BLOWER_TIME_ADD));
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	d8 d3       	rcall	.+1968   	; 0xa18 <EEPROM_Read2Bytes>
     268:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Blower_ON>
										
										Send_Text_On_Screen("Cycle 1 In Progress...");
     26c:	80 e5       	ldi	r24, 0x50	; 80
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	0e 94 3f 09 	call	0x127e	; 0x127e <Send_Text_On_Screen>
										Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_A_QTY_ADD), &Reagent_A_pump);
     274:	84 e0       	ldi	r24, 0x04	; 4
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	cf d3       	rcall	.+1950   	; 0xa18 <EEPROM_Read2Bytes>
     27a:	67 e9       	ldi	r22, 0x97	; 151
     27c:	74 e0       	ldi	r23, 0x04	; 4
										Reagent_Wait_Time(EEPROM_Read2Bytes(P1_REG_A_WAIT_TIME_ADD));
     27e:	0e 94 a0 09 	call	0x1340	; 0x1340 <Dispense_Reagent>
     282:	86 e0       	ldi	r24, 0x06	; 6
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	c8 d3       	rcall	.+1936   	; 0xa18 <EEPROM_Read2Bytes>
										//Spin_motor(EEPROM_Read2Bytes(SPIN_TIME_ADD));
										
										Send_Text_On_Screen("Cycle 2 In Progress...");
     288:	0e 94 a1 09 	call	0x1342	; 0x1342 <Reagent_Wait_Time>
     28c:	87 e6       	ldi	r24, 0x67	; 103
										Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_B_QTY_ADD), &Reagent_B_pump);
     28e:	92 e0       	ldi	r25, 0x02	; 2
     290:	f6 d7       	rcall	.+4076   	; 0x127e <Send_Text_On_Screen>
     292:	88 e0       	ldi	r24, 0x08	; 8
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	c0 d3       	rcall	.+1920   	; 0xa18 <EEPROM_Read2Bytes>
     298:	65 ed       	ldi	r22, 0xD5	; 213
     29a:	74 e0       	ldi	r23, 0x04	; 4
										
										Send_Text_On_Screen("Cycle 3 In Progress...");
     29c:	0e 94 a0 09 	call	0x1340	; 0x1340 <Dispense_Reagent>
     2a0:	8e e7       	ldi	r24, 0x7E	; 126
										Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_C_QTY_ADD), &Reagent_C_pump);
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	ec d7       	rcall	.+4056   	; 0x127e <Send_Text_On_Screen>
     2a6:	8c e0       	ldi	r24, 0x0C	; 12
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	b6 d3       	rcall	.+1900   	; 0xa18 <EEPROM_Read2Bytes>
     2ac:	67 e2       	ldi	r22, 0x27	; 39
										
										Send_Text_On_Screen("Cycle 4 In Progress...");
     2ae:	75 e0       	ldi	r23, 0x05	; 5
     2b0:	0e 94 a0 09 	call	0x1340	; 0x1340 <Dispense_Reagent>
										Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_D_QTY_ADD), &Reagent_D_pump);
     2b4:	85 e9       	ldi	r24, 0x95	; 149
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	e2 d7       	rcall	.+4036   	; 0x127e <Send_Text_On_Screen>
     2ba:	80 e1       	ldi	r24, 0x10	; 16
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	ac d3       	rcall	.+1880   	; 0xa18 <EEPROM_Read2Bytes>
     2c0:	6f e1       	ldi	r22, 0x1F	; 31
     2c2:	75 e0       	ldi	r23, 0x05	; 5
										 										
 										Send_Text_On_Screen("Cycle 5 In Progress...");
     2c4:	0e 94 a0 09 	call	0x1340	; 0x1340 <Dispense_Reagent>
     2c8:	8c ea       	ldi	r24, 0xAC	; 172
 										Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_E_QTY_ADD), &Reagent_E_pump); 
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	d8 d7       	rcall	.+4016   	; 0x127e <Send_Text_On_Screen>
     2ce:	84 e1       	ldi	r24, 0x14	; 20
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	a2 d3       	rcall	.+1860   	; 0xa18 <EEPROM_Read2Bytes>
     2d4:	61 ee       	ldi	r22, 0xE1	; 225
																				
										Send_Text_On_Screen("Draining Cycle In Progress...");
     2d6:	74 e0       	ldi	r23, 0x04	; 4
     2d8:	0e 94 a0 09 	call	0x1340	; 0x1340 <Dispense_Reagent>
     2dc:	83 ec       	ldi	r24, 0xC3	; 195
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	ce d7       	rcall	.+3996   	; 0x127e <Send_Text_On_Screen>
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	93 ed       	ldi	r25, 0xD3	; 211
     2e6:	a0 e3       	ldi	r26, 0x30	; 48
     2e8:	81 50       	subi	r24, 0x01	; 1
     2ea:	90 40       	sbci	r25, 0x00	; 0
     2ec:	a0 40       	sbci	r26, 0x00	; 0
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x16a>
										_delay_ms(1000);
										Send_Text_On_Screen("End of Program 1, Please remove the slide tray.");
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x174>
     2f2:	00 00       	nop
     2f4:	81 ee       	ldi	r24, 0xE1	; 225
     2f6:	92 e0       	ldi	r25, 0x02	; 2
										Blower_ON(EEPROM_Read2Bytes(P1_REG_A_END_BLOWER_TIME_ADD));
     2f8:	c2 d7       	rcall	.+3972   	; 0x127e <Send_Text_On_Screen>
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	8c d3       	rcall	.+1816   	; 0xa18 <EEPROM_Read2Bytes>
     300:	fb d7       	rcall	.+4086   	; 0x12f8 <Blower_ON>
										
										memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     302:	e1 e6       	ldi	r30, 0x61	; 97
     304:	f5 e0       	ldi	r31, 0x05	; 5
     306:	df 01       	movw	r26, r30
     308:	2c 2f       	mov	r18, r28
     30a:	1d 92       	st	X+, r1
     30c:	2a 95       	dec	r18
     30e:	e9 f7       	brne	.-6      	; 0x30a <main+0x18c>
										break;
     310:	3d c0       	rjmp	.+122    	; 0x38c <main+0x20e>
     312:	8f ef       	ldi	r24, 0xFF	; 255
     314:	91 ee       	ldi	r25, 0xE1	; 225
     316:	a4 e0       	ldi	r26, 0x04	; 4
     318:	81 50       	subi	r24, 0x01	; 1
     31a:	90 40       	sbci	r25, 0x00	; 0
     31c:	a0 40       	sbci	r26, 0x00	; 0
     31e:	e1 f7       	brne	.-8      	; 0x318 <main+0x19a>
								case P1EDIT:
									{	
										while(1)
										{
											_delay_ms(DELAY_IN_LOOP);
											switch(MatchCommand(rec_bufferglob))
     320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x1a4>
     322:	00 00       	nop
     324:	81 e6       	ldi	r24, 0x61	; 97
     326:	95 e0       	ldi	r25, 0x05	; 5
     328:	c3 d4       	rcall	.+2438   	; 0xcb0 <MatchCommand>
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	fc 01       	movw	r30, r24
     32e:	37 97       	sbiw	r30, 0x07	; 7
     330:	eb 30       	cpi	r30, 0x0B	; 11
     332:	f1 05       	cpc	r31, r1
     334:	f8 f4       	brcc	.+62     	; 0x374 <main+0x1f6>
     336:	88 27       	eor	r24, r24
     338:	ee 58       	subi	r30, 0x8E	; 142
											{
												case REG_START_BLO_TIME:
												{
													StartBlowerTimeSelected(P1_REG_A_START_BLOWER_TIME_ADD);
     33a:	ff 4f       	sbci	r31, 0xFF	; 255
     33c:	8f 4f       	sbci	r24, 0xFF	; 255
													break;
     33e:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__tablejump2__>
												}
													
												case REG_END_BLO_TIME:
												{
													EndBlowerTimeSelected(P1_REG_A_END_BLOWER_TIME_ADD);
     342:	80 e0       	ldi	r24, 0x00	; 0
													break;
     344:	c1 d6       	rcall	.+3458   	; 0x10c8 <StartBlowerTimeSelected>
												}
												
												case REGA:
												{
													ReagentSelected(P1_REG_A_QTY_ADD, P1_REG_A_WAIT_TIME_ADD);
     346:	16 c0       	rjmp	.+44     	; 0x374 <main+0x1f6>
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	07 d7       	rcall	.+3598   	; 0x115a <EndBlowerTimeSelected>
     34c:	13 c0       	rjmp	.+38     	; 0x374 <main+0x1f6>
													break;
     34e:	66 e0       	ldi	r22, 0x06	; 6
												}
												
												case REGB:
												{
													ReagentSelected(P1_REG_B_QTY_ADD, P1_REG_B_WAIT_TIME_ADD);
     350:	84 e0       	ldi	r24, 0x04	; 4
     352:	14 d6       	rcall	.+3112   	; 0xf7c <ReagentSelected>
     354:	0f c0       	rjmp	.+30     	; 0x374 <main+0x1f6>
     356:	6a e0       	ldi	r22, 0x0A	; 10
													break;
												}
												
												case REGC:
												{
													ReagentSelected(P1_REG_C_QTY_ADD, P1_REG_C_WAIT_TIME_ADD);
     358:	88 e0       	ldi	r24, 0x08	; 8
     35a:	10 d6       	rcall	.+3104   	; 0xf7c <ReagentSelected>
     35c:	0b c0       	rjmp	.+22     	; 0x374 <main+0x1f6>
     35e:	6e e0       	ldi	r22, 0x0E	; 14
													break;
     360:	8c e0       	ldi	r24, 0x0C	; 12
												}
												
												case REGD:
												{
													ReagentSelected(P1_REG_D_QTY_ADD, P1_REG_D_WAIT_TIME_ADD);
     362:	0c d6       	rcall	.+3096   	; 0xf7c <ReagentSelected>
     364:	07 c0       	rjmp	.+14     	; 0x374 <main+0x1f6>
     366:	62 e1       	ldi	r22, 0x12	; 18
     368:	80 e1       	ldi	r24, 0x10	; 16
													break;
     36a:	08 d6       	rcall	.+3088   	; 0xf7c <ReagentSelected>
												}
												case REGE:
												{
													ReagentSelected(P1_REG_E_QTY_ADD, P1_REG_E_WAIT_TIME_ADD);
     36c:	03 c0       	rjmp	.+6      	; 0x374 <main+0x1f6>
     36e:	66 e1       	ldi	r22, 0x16	; 22
     370:	84 e1       	ldi	r24, 0x14	; 20
     372:	04 d6       	rcall	.+3080   	; 0xf7c <ReagentSelected>
													break;
												}
													
											}
											
											if (MatchCommand(rec_bufferglob)==BACK)
     374:	81 e6       	ldi	r24, 0x61	; 97
     376:	95 e0       	ldi	r25, 0x05	; 5
     378:	9b d4       	rcall	.+2358   	; 0xcb0 <MatchCommand>
     37a:	84 36       	cpi	r24, 0x64	; 100
     37c:	51 f6       	brne	.-108    	; 0x312 <main+0x194>
     37e:	e1 e6       	ldi	r30, 0x61	; 97
											{
												memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     380:	f5 e0       	ldi	r31, 0x05	; 5
     382:	df 01       	movw	r26, r30
     384:	2c 2f       	mov	r18, r28
     386:	1d 92       	st	X+, r1
     388:	2a 95       	dec	r18
     38a:	e9 f7       	brne	.-6      	; 0x386 <main+0x208>
										break;
									}
									
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     38c:	81 e6       	ldi	r24, 0x61	; 97
     38e:	95 e0       	ldi	r25, 0x05	; 5
     390:	8f d4       	rcall	.+2334   	; 0xcb0 <MatchCommand>
     392:	84 36       	cpi	r24, 0x64	; 100
     394:	09 f0       	breq	.+2      	; 0x398 <main+0x21a>
     396:	35 cf       	rjmp	.-406    	; 0x202 <main+0x84>
								{
									memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     398:	e1 e6       	ldi	r30, 0x61	; 97
     39a:	f5 e0       	ldi	r31, 0x05	; 5
     39c:	df 01       	movw	r26, r30
     39e:	2c 2f       	mov	r18, r28
     3a0:	1d 92       	st	X+, r1
     3a2:	2a 95       	dec	r18
     3a4:	e9 f7       	brne	.-6      	; 0x3a0 <main+0x222>
									break;
								}
						}
						
						break;
     3a6:	0e cf       	rjmp	.-484    	; 0x1c4 <main+0x46>
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	91 ee       	ldi	r25, 0xE1	; 225
     3ac:	a4 e0       	ldi	r26, 0x04	; 4
     3ae:	81 50       	subi	r24, 0x01	; 1
     3b0:	90 40       	sbci	r25, 0x00	; 0
     3b2:	a0 40       	sbci	r26, 0x00	; 0
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x230>
			case PROGRAM_2:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <main+0x23a>
     3b8:	00 00       	nop
     3ba:	81 e6       	ldi	r24, 0x61	; 97
     3bc:	95 e0       	ldi	r25, 0x05	; 5
     3be:	78 d4       	rcall	.+2288   	; 0xcb0 <MatchCommand>
     3c0:	85 30       	cpi	r24, 0x05	; 5
     3c2:	39 f0       	breq	.+14     	; 0x3d2 <main+0x254>
     3c4:	86 30       	cpi	r24, 0x06	; 6
							{
								case START:
								{
									USART2_transmitstring("Start");
     3c6:	09 f0       	breq	.+2      	; 0x3ca <main+0x24c>
     3c8:	40 c0       	rjmp	.+128    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3ca:	81 e1       	ldi	r24, 0x11	; 17
     3cc:	93 e0       	ldi	r25, 0x03	; 3
     3ce:	4b d4       	rcall	.+2198   	; 0xc66 <USART2_transmitstring>
     3d0:	3c c0       	rjmp	.+120    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3d2:	bf ef       	ldi	r27, 0xFF	; 255
     3d4:	21 ee       	ldi	r18, 0xE1	; 225
     3d6:	84 e0       	ldi	r24, 0x04	; 4
     3d8:	b1 50       	subi	r27, 0x01	; 1
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     3da:	20 40       	sbci	r18, 0x00	; 0
     3dc:	80 40       	sbci	r24, 0x00	; 0
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x25a>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x264>
     3e2:	00 00       	nop
     3e4:	81 e6       	ldi	r24, 0x61	; 97
     3e6:	95 e0       	ldi	r25, 0x05	; 5
     3e8:	63 d4       	rcall	.+2246   	; 0xcb0 <MatchCommand>
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	fc 01       	movw	r30, r24
     3ee:	37 97       	sbiw	r30, 0x07	; 7
     3f0:	eb 30       	cpi	r30, 0x0B	; 11
     3f2:	f1 05       	cpc	r31, r1
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P2_REG_A_START_BLOWER_TIME_ADD);
     3f4:	f0 f4       	brcc	.+60     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     3f6:	88 27       	eor	r24, r24
     3f8:	e3 58       	subi	r30, 0x83	; 131
												break;
     3fa:	ff 4f       	sbci	r31, 0xFF	; 255
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P2_REG_A_END_BLOWER_TIME_ADD);
     3fc:	8f 4f       	sbci	r24, 0xFF	; 255
     3fe:	c3 c7       	rjmp	.+3974   	; 0x1386 <__tablejump2__>
												break;
     400:	88 e1       	ldi	r24, 0x18	; 24
											}
											
											case REGA:
											{
												ReagentSelected(P2_REG_A_QTY_ADD, P2_REG_A_WAIT_TIME_ADD);
     402:	62 d6       	rcall	.+3268   	; 0x10c8 <StartBlowerTimeSelected>
     404:	16 c0       	rjmp	.+44     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     406:	8a e1       	ldi	r24, 0x1A	; 26
     408:	a8 d6       	rcall	.+3408   	; 0x115a <EndBlowerTimeSelected>
												break;
     40a:	13 c0       	rjmp	.+38     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
											}
											
											case REGB:
											{
												ReagentSelected(P2_REG_B_QTY_ADD, P2_REG_B_WAIT_TIME_ADD);
     40c:	6e e1       	ldi	r22, 0x1E	; 30
     40e:	8c e1       	ldi	r24, 0x1C	; 28
     410:	b5 d5       	rcall	.+2922   	; 0xf7c <ReagentSelected>
     412:	0f c0       	rjmp	.+30     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
												break;
     414:	62 e2       	ldi	r22, 0x22	; 34
											}
											
											case REGC:
											{
												ReagentSelected(P2_REG_C_QTY_ADD, P2_REG_C_WAIT_TIME_ADD);
     416:	80 e2       	ldi	r24, 0x20	; 32
     418:	b1 d5       	rcall	.+2914   	; 0xf7c <ReagentSelected>
     41a:	0b c0       	rjmp	.+22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     41c:	66 e2       	ldi	r22, 0x26	; 38
												break;
     41e:	84 e2       	ldi	r24, 0x24	; 36
											}
											
											case REGD:
											{
												ReagentSelected(P2_REG_D_QTY_ADD, P2_REG_D_WAIT_TIME_ADD);
     420:	ad d5       	rcall	.+2906   	; 0xf7c <ReagentSelected>
     422:	07 c0       	rjmp	.+14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     424:	6a e2       	ldi	r22, 0x2A	; 42
     426:	88 e2       	ldi	r24, 0x28	; 40
												break;
     428:	a9 d5       	rcall	.+2898   	; 0xf7c <ReagentSelected>
											}
											case REGE:
											{
												ReagentSelected(P2_REG_E_QTY_ADD, P2_REG_E_WAIT_TIME_ADD);
     42a:	03 c0       	rjmp	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42c:	6e e2       	ldi	r22, 0x2E	; 46
     42e:	8c e2       	ldi	r24, 0x2C	; 44
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     430:	a5 d5       	rcall	.+2890   	; 0xf7c <ReagentSelected>
     432:	81 e6       	ldi	r24, 0x61	; 97
     434:	95 e0       	ldi	r25, 0x05	; 5
     436:	3c d4       	rcall	.+2168   	; 0xcb0 <MatchCommand>
     438:	84 36       	cpi	r24, 0x64	; 100
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     43a:	59 f6       	brne	.-106    	; 0x3d2 <main+0x254>
     43c:	e1 e6       	ldi	r30, 0x61	; 97
     43e:	f5 e0       	ldi	r31, 0x05	; 5
     440:	df 01       	movw	r26, r30
     442:	2c 2f       	mov	r18, r28
     444:	1d 92       	st	X+, r1
     446:	2a 95       	dec	r18
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     448:	e9 f7       	brne	.-6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     44a:	81 e6       	ldi	r24, 0x61	; 97
     44c:	95 e0       	ldi	r25, 0x05	; 5
     44e:	30 d4       	rcall	.+2144   	; 0xcb0 <MatchCommand>
     450:	84 36       	cpi	r24, 0x64	; 100
     452:	09 f0       	breq	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     454:	a9 cf       	rjmp	.-174    	; 0x3a8 <main+0x22a>
     456:	e1 e6       	ldi	r30, 0x61	; 97
     458:	f5 e0       	ldi	r31, 0x05	; 5
     45a:	df 01       	movw	r26, r30
     45c:	2c 2f       	mov	r18, r28
     45e:	1d 92       	st	X+, r1
								break;
							}
						}
						break;
     460:	2a 95       	dec	r18
     462:	e9 f7       	brne	.-6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     464:	af ce       	rjmp	.-674    	; 0x1c4 <main+0x46>
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	91 ee       	ldi	r25, 0xE1	; 225
     46a:	a4 e0       	ldi	r26, 0x04	; 4
     46c:	81 50       	subi	r24, 0x01	; 1
     46e:	90 40       	sbci	r25, 0x00	; 0
			case PROGRAM_3:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     470:	a0 40       	sbci	r26, 0x00	; 0
     472:	e1 f7       	brne	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     474:	00 c0       	rjmp	.+0      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     476:	00 00       	nop
     478:	81 e6       	ldi	r24, 0x61	; 97
     47a:	95 e0       	ldi	r25, 0x05	; 5
     47c:	19 d4       	rcall	.+2098   	; 0xcb0 <MatchCommand>
							{
								case START:
								{
									USART2_transmitstring("Start");
     47e:	85 30       	cpi	r24, 0x05	; 5
     480:	39 f0       	breq	.+14     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     482:	86 30       	cpi	r24, 0x06	; 6
     484:	09 f0       	breq	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     486:	40 c0       	rjmp	.+128    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     488:	81 e1       	ldi	r24, 0x11	; 17
     48a:	93 e0       	ldi	r25, 0x03	; 3
     48c:	ec d3       	rcall	.+2008   	; 0xc66 <USART2_transmitstring>
     48e:	3c c0       	rjmp	.+120    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     490:	bf ef       	ldi	r27, 0xFF	; 255
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     492:	21 ee       	ldi	r18, 0xE1	; 225
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	b1 50       	subi	r27, 0x01	; 1
     498:	20 40       	sbci	r18, 0x00	; 0
     49a:	80 40       	sbci	r24, 0x00	; 0
     49c:	e1 f7       	brne	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     4a0:	00 00       	nop
     4a2:	81 e6       	ldi	r24, 0x61	; 97
     4a4:	95 e0       	ldi	r25, 0x05	; 5
     4a6:	04 d4       	rcall	.+2056   	; 0xcb0 <MatchCommand>
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	fc 01       	movw	r30, r24
     4ac:	37 97       	sbiw	r30, 0x07	; 7
     4ae:	eb 30       	cpi	r30, 0x0B	; 11
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P3_REG_A_START_BLOWER_TIME_ADD);
     4b0:	f1 05       	cpc	r31, r1
     4b2:	f0 f4       	brcc	.+60     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4b4:	88 27       	eor	r24, r24
												break;
     4b6:	e8 57       	subi	r30, 0x78	; 120
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P3_REG_A_END_BLOWER_TIME_ADD);
     4b8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ba:	8f 4f       	sbci	r24, 0xFF	; 255
     4bc:	64 c7       	rjmp	.+3784   	; 0x1386 <__tablejump2__>
												break;
     4be:	80 e3       	ldi	r24, 0x30	; 48
											}
											
											case REGA:
											{
												ReagentSelected(P3_REG_A_QTY_ADD, P3_REG_A_WAIT_TIME_ADD);
     4c0:	03 d6       	rcall	.+3078   	; 0x10c8 <StartBlowerTimeSelected>
     4c2:	16 c0       	rjmp	.+44     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4c4:	8c 2f       	mov	r24, r28
     4c6:	49 d6       	rcall	.+3218   	; 0x115a <EndBlowerTimeSelected>
												break;
     4c8:	13 c0       	rjmp	.+38     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
											}
											
											case REGB:
											{
												ReagentSelected(P3_REG_B_QTY_ADD, P3_REG_B_WAIT_TIME_ADD);
     4ca:	66 e3       	ldi	r22, 0x36	; 54
     4cc:	84 e3       	ldi	r24, 0x34	; 52
     4ce:	56 d5       	rcall	.+2732   	; 0xf7c <ReagentSelected>
												break;
     4d0:	0f c0       	rjmp	.+30     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
											}
											
											case REGC:
											{
												ReagentSelected(P3_REG_C_QTY_ADD, P3_REG_C_WAIT_TIME_ADD);
     4d2:	6a e3       	ldi	r22, 0x3A	; 58
     4d4:	88 e3       	ldi	r24, 0x38	; 56
     4d6:	52 d5       	rcall	.+2724   	; 0xf7c <ReagentSelected>
     4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
												break;
     4da:	6e e3       	ldi	r22, 0x3E	; 62
											}
											
											case REGD:
											{
												ReagentSelected(P3_REG_D_QTY_ADD, P3_REG_D_WAIT_TIME_ADD);
     4dc:	8c e3       	ldi	r24, 0x3C	; 60
     4de:	4e d5       	rcall	.+2716   	; 0xf7c <ReagentSelected>
     4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
												break;
     4e2:	62 e4       	ldi	r22, 0x42	; 66
											}
											case REGE:
											{
												ReagentSelected(P3_REG_E_QTY_ADD, P3_REG_E_WAIT_TIME_ADD);
     4e4:	80 e4       	ldi	r24, 0x40	; 64
     4e6:	4a d5       	rcall	.+2708   	; 0xf7c <ReagentSelected>
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ea:	66 e4       	ldi	r22, 0x46	; 70
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     4ec:	84 e4       	ldi	r24, 0x44	; 68
     4ee:	46 d5       	rcall	.+2700   	; 0xf7c <ReagentSelected>
     4f0:	81 e6       	ldi	r24, 0x61	; 97
     4f2:	95 e0       	ldi	r25, 0x05	; 5
     4f4:	dd d3       	rcall	.+1978   	; 0xcb0 <MatchCommand>
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     4f6:	84 36       	cpi	r24, 0x64	; 100
     4f8:	59 f6       	brne	.-106    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     4fa:	e1 e6       	ldi	r30, 0x61	; 97
     4fc:	f5 e0       	ldi	r31, 0x05	; 5
     4fe:	df 01       	movw	r26, r30
     500:	2c 2f       	mov	r18, r28
     502:	1d 92       	st	X+, r1
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     504:	2a 95       	dec	r18
     506:	e9 f7       	brne	.-6      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     508:	81 e6       	ldi	r24, 0x61	; 97
     50a:	95 e0       	ldi	r25, 0x05	; 5
     50c:	d1 d3       	rcall	.+1954   	; 0xcb0 <MatchCommand>
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     50e:	84 36       	cpi	r24, 0x64	; 100
     510:	09 f0       	breq	.+2      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     512:	a9 cf       	rjmp	.-174    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     514:	e1 e6       	ldi	r30, 0x61	; 97
     516:	f5 e0       	ldi	r31, 0x05	; 5
								break;
							}
						}
						break;
     518:	df 01       	movw	r26, r30
     51a:	2c 2f       	mov	r18, r28
     51c:	1d 92       	st	X+, r1
     51e:	2a 95       	dec	r18
     520:	e9 f7       	brne	.-6      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     522:	50 ce       	rjmp	.-864    	; 0x1c4 <main+0x46>
     524:	8f ef       	ldi	r24, 0xFF	; 255
     526:	91 ee       	ldi	r25, 0xE1	; 225
			case PROGRAM_4:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     528:	a4 e0       	ldi	r26, 0x04	; 4
     52a:	81 50       	subi	r24, 0x01	; 1
     52c:	90 40       	sbci	r25, 0x00	; 0
     52e:	a0 40       	sbci	r26, 0x00	; 0
     530:	e1 f7       	brne	.-8      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     532:	00 c0       	rjmp	.+0      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     534:	00 00       	nop
							{
								case START:
								{
									USART2_transmitstring("Start");
     536:	81 e6       	ldi	r24, 0x61	; 97
     538:	95 e0       	ldi	r25, 0x05	; 5
     53a:	ba d3       	rcall	.+1908   	; 0xcb0 <MatchCommand>
     53c:	85 30       	cpi	r24, 0x05	; 5
									break;
     53e:	39 f0       	breq	.+14     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     540:	86 30       	cpi	r24, 0x06	; 6
     542:	09 f0       	breq	.+2      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     544:	40 c0       	rjmp	.+128    	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     546:	81 e1       	ldi	r24, 0x11	; 17
     548:	93 e0       	ldi	r25, 0x03	; 3
     54a:	8d d3       	rcall	.+1818   	; 0xc66 <USART2_transmitstring>
     54c:	3c c0       	rjmp	.+120    	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     54e:	bf ef       	ldi	r27, 0xFF	; 255
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     550:	21 ee       	ldi	r18, 0xE1	; 225
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	b1 50       	subi	r27, 0x01	; 1
     556:	20 40       	sbci	r18, 0x00	; 0
     558:	80 40       	sbci	r24, 0x00	; 0
     55a:	e1 f7       	brne	.-8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     55e:	00 00       	nop
     560:	81 e6       	ldi	r24, 0x61	; 97
     562:	95 e0       	ldi	r25, 0x05	; 5
     564:	a5 d3       	rcall	.+1866   	; 0xcb0 <MatchCommand>
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	fc 01       	movw	r30, r24
     56a:	37 97       	sbiw	r30, 0x07	; 7
     56c:	eb 30       	cpi	r30, 0x0B	; 11
     56e:	f1 05       	cpc	r31, r1
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P4_REG_A_START_BLOWER_TIME_ADD);
     570:	f0 f4       	brcc	.+60     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     572:	88 27       	eor	r24, r24
												break;
     574:	ed 56       	subi	r30, 0x6D	; 109
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P4_REG_A_END_BLOWER_TIME_ADD);
     576:	ff 4f       	sbci	r31, 0xFF	; 255
     578:	8f 4f       	sbci	r24, 0xFF	; 255
     57a:	05 c7       	rjmp	.+3594   	; 0x1386 <__tablejump2__>
												break;
     57c:	88 e4       	ldi	r24, 0x48	; 72
											}
											
											case REGA:
											{
												ReagentSelected(P4_REG_A_QTY_ADD, P4_REG_A_WAIT_TIME_ADD);
     57e:	a4 d5       	rcall	.+2888   	; 0x10c8 <StartBlowerTimeSelected>
     580:	16 c0       	rjmp	.+44     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     582:	8a e4       	ldi	r24, 0x4A	; 74
												break;
     584:	ea d5       	rcall	.+3028   	; 0x115a <EndBlowerTimeSelected>
											}
											
											case REGB:
											{
												ReagentSelected(P4_REG_B_QTY_ADD, P4_REG_B_WAIT_TIME_ADD);
     586:	13 c0       	rjmp	.+38     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     588:	6e e4       	ldi	r22, 0x4E	; 78
     58a:	8c e4       	ldi	r24, 0x4C	; 76
												break;
     58c:	f7 d4       	rcall	.+2542   	; 0xf7c <ReagentSelected>
											}
											
											case REGC:
											{
												ReagentSelected(P4_REG_C_QTY_ADD, P4_REG_C_WAIT_TIME_ADD);
     58e:	0f c0       	rjmp	.+30     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     590:	62 e5       	ldi	r22, 0x52	; 82
     592:	80 e5       	ldi	r24, 0x50	; 80
												break;
     594:	f3 d4       	rcall	.+2534   	; 0xf7c <ReagentSelected>
											}
											
											case REGD:
											{
												ReagentSelected(P4_REG_D_QTY_ADD, P4_REG_D_WAIT_TIME_ADD);
     596:	0b c0       	rjmp	.+22     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     598:	66 e5       	ldi	r22, 0x56	; 86
     59a:	84 e5       	ldi	r24, 0x54	; 84
												break;
     59c:	ef d4       	rcall	.+2526   	; 0xf7c <ReagentSelected>
											}
											case REGE:
											{
												ReagentSelected(P4_REG_E_QTY_ADD, P4_REG_E_WAIT_TIME_ADD);
     59e:	07 c0       	rjmp	.+14     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5a0:	6a e5       	ldi	r22, 0x5A	; 90
     5a2:	88 e5       	ldi	r24, 0x58	; 88
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     5a4:	eb d4       	rcall	.+2518   	; 0xf7c <ReagentSelected>
     5a6:	03 c0       	rjmp	.+6      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5a8:	6e e5       	ldi	r22, 0x5E	; 94
     5aa:	8c e5       	ldi	r24, 0x5C	; 92
     5ac:	e7 d4       	rcall	.+2510   	; 0xf7c <ReagentSelected>
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     5ae:	81 e6       	ldi	r24, 0x61	; 97
     5b0:	95 e0       	ldi	r25, 0x05	; 5
     5b2:	7e d3       	rcall	.+1788   	; 0xcb0 <MatchCommand>
     5b4:	84 36       	cpi	r24, 0x64	; 100
     5b6:	59 f6       	brne	.-106    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     5b8:	e1 e6       	ldi	r30, 0x61	; 97
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     5ba:	f5 e0       	ldi	r31, 0x05	; 5
     5bc:	df 01       	movw	r26, r30
     5be:	2c 2f       	mov	r18, r28
     5c0:	1d 92       	st	X+, r1
     5c2:	2a 95       	dec	r18
     5c4:	e9 f7       	brne	.-6      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     5c6:	81 e6       	ldi	r24, 0x61	; 97
     5c8:	95 e0       	ldi	r25, 0x05	; 5
     5ca:	72 d3       	rcall	.+1764   	; 0xcb0 <MatchCommand>
     5cc:	84 36       	cpi	r24, 0x64	; 100
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     5d0:	a9 cf       	rjmp	.-174    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
								break;
							}
						}
						break;
     5d2:	e1 e6       	ldi	r30, 0x61	; 97
     5d4:	f5 e0       	ldi	r31, 0x05	; 5
     5d6:	df 01       	movw	r26, r30
     5d8:	2c 2f       	mov	r18, r28
     5da:	1d 92       	st	X+, r1
     5dc:	2a 95       	dec	r18
     5de:	e9 f7       	brne	.-6      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
     5e0:	f1 cd       	rjmp	.-1054   	; 0x1c4 <main+0x46>
     5e2:	8f ef       	ldi	r24, 0xFF	; 255
			case SERVICE:
				{
					while(1)
					{
						_delay_ms(DELAY_IN_LOOP);
						SpinTimeSelected(SPIN_TIME_ADD);
     5e4:	91 ee       	ldi	r25, 0xE1	; 225
     5e6:	a4 e0       	ldi	r26, 0x04	; 4
						break;
					}
					break;
     5e8:	81 50       	subi	r24, 0x01	; 1
				
			case TESTBENCH:
			{
				while(1)
				{
					if (!strcmp(rec_bufferglob, "motorA_ON"))
     5ea:	90 40       	sbci	r25, 0x00	; 0
     5ec:	a0 40       	sbci	r26, 0x00	; 0
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
     5f2:	00 00       	nop
     5f4:	80 e6       	ldi	r24, 0x60	; 96
     5f6:	fa d5       	rcall	.+3060   	; 0x11ec <SpinTimeSelected>
						GPIO_WriteToPin(&Reagent_A_pump, HIGH);
     5f8:	e5 cd       	rjmp	.-1078   	; 0x1c4 <main+0x46>
     5fa:	67 e1       	ldi	r22, 0x17	; 23
     5fc:	73 e0       	ldi	r23, 0x03	; 3
     5fe:	81 e6       	ldi	r24, 0x61	; 97
					if (!strcmp(rec_bufferglob, "motorA_OFF"))
     600:	95 e0       	ldi	r25, 0x05	; 5
     602:	d7 d6       	rcall	.+3502   	; 0x13b2 <strcmp>
     604:	89 2b       	or	r24, r25
     606:	21 f4       	brne	.+8      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	87 e9       	ldi	r24, 0x97	; 151
     60c:	94 e0       	ldi	r25, 0x04	; 4
						GPIO_WriteToPin(&Reagent_A_pump, LOW);
     60e:	c2 d2       	rcall	.+1412   	; 0xb94 <GPIO_WriteToPin>
     610:	61 e2       	ldi	r22, 0x21	; 33
     612:	73 e0       	ldi	r23, 0x03	; 3
     614:	81 e6       	ldi	r24, 0x61	; 97
						
					if (!strcmp(rec_bufferglob, "motorB_ON"))
     616:	95 e0       	ldi	r25, 0x05	; 5
     618:	cc d6       	rcall	.+3480   	; 0x13b2 <strcmp>
     61a:	89 2b       	or	r24, r25
     61c:	21 f4       	brne	.+8      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	87 e9       	ldi	r24, 0x97	; 151
     622:	94 e0       	ldi	r25, 0x04	; 4
						GPIO_WriteToPin(&Reagent_B_pump, HIGH);
     624:	b7 d2       	rcall	.+1390   	; 0xb94 <GPIO_WriteToPin>
     626:	6c e2       	ldi	r22, 0x2C	; 44
     628:	73 e0       	ldi	r23, 0x03	; 3
     62a:	81 e6       	ldi	r24, 0x61	; 97
					if (!strcmp(rec_bufferglob, "motorB_OFF"))
     62c:	95 e0       	ldi	r25, 0x05	; 5
     62e:	c1 d6       	rcall	.+3458   	; 0x13b2 <strcmp>
     630:	89 2b       	or	r24, r25
     632:	21 f4       	brne	.+8      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	85 ed       	ldi	r24, 0xD5	; 213
						GPIO_WriteToPin(&Reagent_B_pump, LOW);
     638:	94 e0       	ldi	r25, 0x04	; 4
     63a:	ac d2       	rcall	.+1368   	; 0xb94 <GPIO_WriteToPin>
     63c:	66 e3       	ldi	r22, 0x36	; 54
     63e:	73 e0       	ldi	r23, 0x03	; 3
						
					if (!strcmp(rec_bufferglob, "motorC_ON"))
     640:	81 e6       	ldi	r24, 0x61	; 97
     642:	95 e0       	ldi	r25, 0x05	; 5
     644:	b6 d6       	rcall	.+3436   	; 0x13b2 <strcmp>
     646:	89 2b       	or	r24, r25
     648:	21 f4       	brne	.+8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	85 ed       	ldi	r24, 0xD5	; 213
						GPIO_WriteToPin(&Reagent_C_pump, HIGH);
     64e:	94 e0       	ldi	r25, 0x04	; 4
     650:	a1 d2       	rcall	.+1346   	; 0xb94 <GPIO_WriteToPin>
     652:	61 e4       	ldi	r22, 0x41	; 65
     654:	73 e0       	ldi	r23, 0x03	; 3
					if (!strcmp(rec_bufferglob, "motorC_OFF"))
     656:	81 e6       	ldi	r24, 0x61	; 97
     658:	95 e0       	ldi	r25, 0x05	; 5
     65a:	ab d6       	rcall	.+3414   	; 0x13b2 <strcmp>
     65c:	89 2b       	or	r24, r25
     65e:	21 f4       	brne	.+8      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
     660:	61 e0       	ldi	r22, 0x01	; 1
     662:	87 e2       	ldi	r24, 0x27	; 39
						GPIO_WriteToPin(&Reagent_C_pump, LOW);
     664:	95 e0       	ldi	r25, 0x05	; 5
     666:	96 d2       	rcall	.+1324   	; 0xb94 <GPIO_WriteToPin>
     668:	6b e4       	ldi	r22, 0x4B	; 75
     66a:	73 e0       	ldi	r23, 0x03	; 3
						
					if (!strcmp(rec_bufferglob, "motorD_ON"))
     66c:	81 e6       	ldi	r24, 0x61	; 97
     66e:	95 e0       	ldi	r25, 0x05	; 5
     670:	a0 d6       	rcall	.+3392   	; 0x13b2 <strcmp>
     672:	89 2b       	or	r24, r25
     674:	21 f4       	brne	.+8      	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     676:	60 e0       	ldi	r22, 0x00	; 0
						GPIO_WriteToPin(&Reagent_D_pump, HIGH);
     678:	87 e2       	ldi	r24, 0x27	; 39
     67a:	95 e0       	ldi	r25, 0x05	; 5
     67c:	8b d2       	rcall	.+1302   	; 0xb94 <GPIO_WriteToPin>
     67e:	66 e5       	ldi	r22, 0x56	; 86
					if (!strcmp(rec_bufferglob, "motorD_OFF"))
     680:	73 e0       	ldi	r23, 0x03	; 3
     682:	81 e6       	ldi	r24, 0x61	; 97
     684:	95 e0       	ldi	r25, 0x05	; 5
     686:	95 d6       	rcall	.+3370   	; 0x13b2 <strcmp>
     688:	89 2b       	or	r24, r25
     68a:	21 f4       	brne	.+8      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     68c:	61 e0       	ldi	r22, 0x01	; 1
						GPIO_WriteToPin(&Reagent_D_pump, LOW);
     68e:	8f e1       	ldi	r24, 0x1F	; 31
     690:	95 e0       	ldi	r25, 0x05	; 5
     692:	80 d2       	rcall	.+1280   	; 0xb94 <GPIO_WriteToPin>
     694:	60 e6       	ldi	r22, 0x60	; 96
						
					if (!strcmp(rec_bufferglob, "motorE_ON"))
     696:	73 e0       	ldi	r23, 0x03	; 3
     698:	81 e6       	ldi	r24, 0x61	; 97
     69a:	95 e0       	ldi	r25, 0x05	; 5
     69c:	8a d6       	rcall	.+3348   	; 0x13b2 <strcmp>
     69e:	89 2b       	or	r24, r25
     6a0:	21 f4       	brne	.+8      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
						GPIO_WriteToPin(&Reagent_E_pump, HIGH);
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	8f e1       	ldi	r24, 0x1F	; 31
     6a6:	95 e0       	ldi	r25, 0x05	; 5
     6a8:	75 d2       	rcall	.+1258   	; 0xb94 <GPIO_WriteToPin>
     6aa:	6b e6       	ldi	r22, 0x6B	; 107
					if (!strcmp(rec_bufferglob, "motorE_OFF"))
     6ac:	73 e0       	ldi	r23, 0x03	; 3
     6ae:	81 e6       	ldi	r24, 0x61	; 97
     6b0:	95 e0       	ldi	r25, 0x05	; 5
     6b2:	7f d6       	rcall	.+3326   	; 0x13b2 <strcmp>
     6b4:	89 2b       	or	r24, r25
     6b6:	21 f4       	brne	.+8      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	81 ee       	ldi	r24, 0xE1	; 225
						GPIO_WriteToPin(&Reagent_E_pump, LOW);
     6bc:	94 e0       	ldi	r25, 0x04	; 4
     6be:	6a d2       	rcall	.+1236   	; 0xb94 <GPIO_WriteToPin>
     6c0:	65 e7       	ldi	r22, 0x75	; 117
     6c2:	73 e0       	ldi	r23, 0x03	; 3
     6c4:	81 e6       	ldi	r24, 0x61	; 97
					
					if (!strcmp(rec_bufferglob, "motorDRAIN_ON"))
     6c6:	95 e0       	ldi	r25, 0x05	; 5
     6c8:	74 d6       	rcall	.+3304   	; 0x13b2 <strcmp>
     6ca:	89 2b       	or	r24, r25
     6cc:	21 f4       	brne	.+8      	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	81 ee       	ldi	r24, 0xE1	; 225
     6d2:	94 e0       	ldi	r25, 0x04	; 4
     6d4:	5f d2       	rcall	.+1214   	; 0xb94 <GPIO_WriteToPin>
						GPIO_WriteToPin(&Drain_pump, HIGH);
     6d6:	60 e8       	ldi	r22, 0x80	; 128
     6d8:	73 e0       	ldi	r23, 0x03	; 3
     6da:	81 e6       	ldi	r24, 0x61	; 97
     6dc:	95 e0       	ldi	r25, 0x05	; 5
     6de:	69 d6       	rcall	.+3282   	; 0x13b2 <strcmp>
					if (!strcmp(rec_bufferglob, "motorDRAIN_OFF"))
     6e0:	89 2b       	or	r24, r25
     6e2:	21 f4       	brne	.+8      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	83 e2       	ldi	r24, 0x23	; 35
     6e8:	95 e0       	ldi	r25, 0x05	; 5
     6ea:	54 d2       	rcall	.+1192   	; 0xb94 <GPIO_WriteToPin>
     6ec:	6e e8       	ldi	r22, 0x8E	; 142
     6ee:	73 e0       	ldi	r23, 0x03	; 3
						GPIO_WriteToPin(&Drain_pump, LOW);
     6f0:	81 e6       	ldi	r24, 0x61	; 97
     6f2:	95 e0       	ldi	r25, 0x05	; 5
     6f4:	5e d6       	rcall	.+3260   	; 0x13b2 <strcmp>
     6f6:	89 2b       	or	r24, r25
     6f8:	21 f4       	brne	.+8      	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
					
					if (!strcmp(rec_bufferglob, "FAN_ON"))
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	83 e2       	ldi	r24, 0x23	; 35
     6fe:	95 e0       	ldi	r25, 0x05	; 5
     700:	49 d2       	rcall	.+1170   	; 0xb94 <GPIO_WriteToPin>
     702:	6d e9       	ldi	r22, 0x9D	; 157
     704:	73 e0       	ldi	r23, 0x03	; 3
     706:	81 e6       	ldi	r24, 0x61	; 97
     708:	95 e0       	ldi	r25, 0x05	; 5
						GPIO_WriteToPin(&Fan, HIGH);
     70a:	53 d6       	rcall	.+3238   	; 0x13b2 <strcmp>
     70c:	89 2b       	or	r24, r25
     70e:	21 f4       	brne	.+8      	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	8b e2       	ldi	r24, 0x2B	; 43
					if (!strcmp(rec_bufferglob, "FAN_OFF"))
     714:	95 e0       	ldi	r25, 0x05	; 5
     716:	3e d2       	rcall	.+1148   	; 0xb94 <GPIO_WriteToPin>
     718:	64 ea       	ldi	r22, 0xA4	; 164
     71a:	73 e0       	ldi	r23, 0x03	; 3
     71c:	81 e6       	ldi	r24, 0x61	; 97
     71e:	95 e0       	ldi	r25, 0x05	; 5
     720:	48 d6       	rcall	.+3216   	; 0x13b2 <strcmp>
     722:	89 2b       	or	r24, r25
						GPIO_WriteToPin(&Fan, LOW);
     724:	21 f4       	brne	.+8      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	8b e2       	ldi	r24, 0x2B	; 43
     72a:	95 e0       	ldi	r25, 0x05	; 5
     72c:	33 d2       	rcall	.+1126   	; 0xb94 <GPIO_WriteToPin>
					
					if (!strcmp(rec_bufferglob, "BLOWER_ON"))
     72e:	6c ea       	ldi	r22, 0xAC	; 172
     730:	73 e0       	ldi	r23, 0x03	; 3
     732:	81 e6       	ldi	r24, 0x61	; 97
     734:	95 e0       	ldi	r25, 0x05	; 5
     736:	3d d6       	rcall	.+3194   	; 0x13b2 <strcmp>
     738:	89 2b       	or	r24, r25
     73a:	21 f4       	brne	.+8      	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
     73c:	61 e0       	ldi	r22, 0x01	; 1
						GPIO_WriteToPin(&Blower, HIGH);
     73e:	89 ed       	ldi	r24, 0xD9	; 217
     740:	94 e0       	ldi	r25, 0x04	; 4
     742:	28 d2       	rcall	.+1104   	; 0xb94 <GPIO_WriteToPin>
     744:	66 eb       	ldi	r22, 0xB6	; 182
     746:	73 e0       	ldi	r23, 0x03	; 3
					if (!strcmp(rec_bufferglob, "BLOWER_OFF"))
     748:	81 e6       	ldi	r24, 0x61	; 97
     74a:	95 e0       	ldi	r25, 0x05	; 5
     74c:	32 d6       	rcall	.+3172   	; 0x13b2 <strcmp>
     74e:	89 2b       	or	r24, r25
     750:	21 f4       	brne	.+8      	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	89 ed       	ldi	r24, 0xD9	; 217
     756:	94 e0       	ldi	r25, 0x04	; 4
						GPIO_WriteToPin(&Blower, LOW);
     758:	1d d2       	rcall	.+1082   	; 0xb94 <GPIO_WriteToPin>
     75a:	81 e6       	ldi	r24, 0x61	; 97
     75c:	95 e0       	ldi	r25, 0x05	; 5
     75e:	a8 d2       	rcall	.+1360   	; 0xcb0 <MatchCommand>
     760:	84 36       	cpi	r24, 0x64	; 100
					
					
					if (MatchCommand(rec_bufferglob)==BACK)
     762:	09 f0       	breq	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
     764:	4a cf       	rjmp	.-364    	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
     766:	e1 e6       	ldi	r30, 0x61	; 97
     768:	f5 e0       	ldi	r31, 0x05	; 5
     76a:	df 01       	movw	r26, r30
     76c:	2c 2f       	mov	r18, r28
     76e:	1d 92       	st	X+, r1
					{
						memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     770:	2a 95       	dec	r18
     772:	e9 f7       	brne	.-6      	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
     774:	27 cd       	rjmp	.-1458   	; 0x1c4 <main+0x46>

00000776 <__vector_51>:
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
						break;
					}
					//memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
				}
				break;
     77e:	11 24       	eor	r1, r1
}



ISR(USART2_RX_vect)
{
     780:	0b b6       	in	r0, 0x3b	; 59
     782:	0f 92       	push	r0
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	4f 93       	push	r20
     78a:	5f 93       	push	r21
     78c:	6f 93       	push	r22
     78e:	7f 93       	push	r23
     790:	8f 93       	push	r24
     792:	9f 93       	push	r25
     794:	af 93       	push	r26
     796:	bf 93       	push	r27
     798:	cf 93       	push	r28
     79a:	ef 93       	push	r30
     79c:	ff 93       	push	r31
	unsigned char rec = USART2_Receive();
     79e:	53 d2       	rcall	.+1190   	; 0xc46 <USART2_Receive>
     7a0:	c8 2f       	mov	r28, r24
	USART2_Transmit(rec);
     7a2:	49 d2       	rcall	.+1170   	; 0xc36 <USART2_Transmit>
     7a4:	cc 33       	cpi	r28, 0x3C	; 60
	//USART0_Transmit(rec);
	if ( (rec == '<') && (rec_start == 0)) // new packet receiving
     7a6:	c1 f4       	brne	.+48     	; 0x7d8 <__vector_51+0x62>
     7a8:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <rec_start>
     7ac:	81 11       	cpse	r24, r1
     7ae:	16 c0       	rjmp	.+44     	; 0x7dc <__vector_51+0x66>
     7b0:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <myindex>
	{
		myindex = 0;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
		rec_start = 1;
     7b6:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <rec_start>
     7ba:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// rec_buff clear
     7bc:	ef e9       	ldi	r30, 0x9F	; 159
     7be:	f4 e0       	ldi	r31, 0x04	; 4
     7c0:	df 01       	movw	r26, r30
     7c2:	98 2f       	mov	r25, r24
     7c4:	1d 92       	st	X+, r1
     7c6:	9a 95       	dec	r25
     7c8:	e9 f7       	brne	.-6      	; 0x7c4 <__vector_51+0x4e>
     7ca:	e1 e6       	ldi	r30, 0x61	; 97
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     7cc:	f5 e0       	ldi	r31, 0x05	; 5
     7ce:	df 01       	movw	r26, r30
     7d0:	1d 92       	st	X+, r1
     7d2:	8a 95       	dec	r24
     7d4:	e9 f7       	brne	.-6      	; 0x7d0 <__vector_51+0x5a>
     7d6:	28 c0       	rjmp	.+80     	; 0x828 <__vector_51+0xb2>
     7d8:	ce 33       	cpi	r28, 0x3E	; 62
	}
	
	else if ( ( rec != '>') && (rec_start == 1)  )				// collecting data in buffer
     7da:	11 f1       	breq	.+68     	; 0x820 <__vector_51+0xaa>
     7dc:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <rec_start>
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	11 f5       	brne	.+68     	; 0x828 <__vector_51+0xb2>
     7e4:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <myindex>
	{
		rec_buff[myindex] = rec;
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	e1 56       	subi	r30, 0x61	; 97
     7ec:	fb 4f       	sbci	r31, 0xFB	; 251
     7ee:	c0 83       	st	Z, r28
     7f0:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <myindex>
		myindex++;
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <myindex>
     7fa:	16 c0       	rjmp	.+44     	; 0x828 <__vector_51+0xb2>
     7fc:	6f e9       	ldi	r22, 0x9F	; 159
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )					// ending character received
	{
		strcpy(rec_bufferglob, rec_buff);						// copy data into rec_bufferglob
     7fe:	74 e0       	ldi	r23, 0x04	; 4
     800:	81 e6       	ldi	r24, 0x61	; 97
     802:	95 e0       	ldi	r25, 0x05	; 5
     804:	df d5       	rcall	.+3006   	; 0x13c4 <strcpy>
     806:	81 e0       	ldi	r24, 0x01	; 1
		rec_stop = 1;											// rec_stop flag 1
     808:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <rec_stop>
     80c:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <rec_start>
		rec_start = 0;											// clear flag
     810:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// clearing rec_buff so that it can receive new data
     812:	ef e9       	ldi	r30, 0x9F	; 159
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	df 01       	movw	r26, r30
     818:	1d 92       	st	X+, r1
     81a:	8a 95       	dec	r24
     81c:	e9 f7       	brne	.-6      	; 0x818 <__vector_51+0xa2>
     81e:	04 c0       	rjmp	.+8      	; 0x828 <__vector_51+0xb2>
		
	}
}
     820:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <rec_start>
		myindex++;
		//rec = '\0';
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )					// ending character received
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	51 f3       	breq	.-44     	; 0x7fc <__vector_51+0x86>
     828:	ff 91       	pop	r31
		rec_stop = 1;											// rec_stop flag 1
		rec_start = 0;											// clear flag
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// clearing rec_buff so that it can receive new data
		
	}
}
     82a:	ef 91       	pop	r30
     82c:	cf 91       	pop	r28
     82e:	bf 91       	pop	r27
     830:	af 91       	pop	r26
     832:	9f 91       	pop	r25
     834:	8f 91       	pop	r24
     836:	7f 91       	pop	r23
     838:	6f 91       	pop	r22
     83a:	5f 91       	pop	r21
     83c:	4f 91       	pop	r20
     83e:	3f 91       	pop	r19
     840:	2f 91       	pop	r18
     842:	0f 90       	pop	r0
     844:	0b be       	out	0x3b, r0	; 59
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <__vector_25>:
     850:	1f 92       	push	r1



ISR(USART0_RX_vect)
{
     852:	0f 92       	push	r0
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	0f 92       	push	r0
     858:	11 24       	eor	r1, r1
     85a:	0b b6       	in	r0, 0x3b	; 59
     85c:	0f 92       	push	r0
     85e:	2f 93       	push	r18
     860:	3f 93       	push	r19
     862:	4f 93       	push	r20
     864:	5f 93       	push	r21
     866:	6f 93       	push	r22
     868:	7f 93       	push	r23
     86a:	8f 93       	push	r24
     86c:	9f 93       	push	r25
     86e:	af 93       	push	r26
     870:	bf 93       	push	r27
     872:	cf 93       	push	r28
     874:	ef 93       	push	r30
     876:	ff 93       	push	r31
	unsigned char rec = USART0_Receive();
     878:	ee d1       	rcall	.+988    	; 0xc56 <USART0_Receive>
     87a:	c8 2f       	mov	r28, r24
	USART2_Transmit(rec);
     87c:	dc d1       	rcall	.+952    	; 0xc36 <USART2_Transmit>
     87e:	cc 33       	cpi	r28, 0x3C	; 60
	//USART0_Transmit(rec);
	if ( (rec == '<') && (rec_start == 0)) // new packet
     880:	c1 f4       	brne	.+48     	; 0x8b2 <__vector_25+0x62>
     882:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <rec_start>
     886:	81 11       	cpse	r24, r1
     888:	16 c0       	rjmp	.+44     	; 0x8b6 <__vector_25+0x66>
     88a:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <myindex>
	{
		myindex = 0;
     88e:	81 e0       	ldi	r24, 0x01	; 1
		rec_start = 1;
     890:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <rec_start>
     894:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));
     896:	ef e9       	ldi	r30, 0x9F	; 159
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	df 01       	movw	r26, r30
     89c:	98 2f       	mov	r25, r24
     89e:	1d 92       	st	X+, r1
     8a0:	9a 95       	dec	r25
     8a2:	e9 f7       	brne	.-6      	; 0x89e <__vector_25+0x4e>
     8a4:	e1 e6       	ldi	r30, 0x61	; 97
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));
     8a6:	f5 e0       	ldi	r31, 0x05	; 5
     8a8:	df 01       	movw	r26, r30
     8aa:	1d 92       	st	X+, r1
     8ac:	8a 95       	dec	r24
     8ae:	e9 f7       	brne	.-6      	; 0x8aa <__vector_25+0x5a>
     8b0:	23 c0       	rjmp	.+70     	; 0x8f8 <__vector_25+0xa8>
     8b2:	ce 33       	cpi	r28, 0x3E	; 62
	}
	
	else if ( ( rec != '>') && (rec_start == 1)  )	// collecting data in buffer
     8b4:	51 f1       	breq	.+84     	; 0x90a <__vector_25+0xba>
     8b6:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <rec_start>
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	e9 f4       	brne	.+58     	; 0x8f8 <__vector_25+0xa8>
     8be:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <myindex>
	{
		rec_buff[myindex] = rec;
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	e1 56       	subi	r30, 0x61	; 97
     8c6:	fb 4f       	sbci	r31, 0xFB	; 251
     8c8:	c0 83       	st	Z, r28
     8ca:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <myindex>
		myindex++;
     8ce:	8f 5f       	subi	r24, 0xFF	; 255
     8d0:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <myindex>
     8d4:	11 c0       	rjmp	.+34     	; 0x8f8 <__vector_25+0xa8>
     8d6:	6f e9       	ldi	r22, 0x9F	; 159
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )
	{
		strcpy(rec_bufferglob, rec_buff);
     8d8:	74 e0       	ldi	r23, 0x04	; 4
     8da:	81 e6       	ldi	r24, 0x61	; 97
     8dc:	95 e0       	ldi	r25, 0x05	; 5
     8de:	72 d5       	rcall	.+2788   	; 0x13c4 <strcpy>
     8e0:	81 e0       	ldi	r24, 0x01	; 1
		//USART2_transmitstring(rec_bufferglob);
		rec_stop = 1;
     8e2:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <rec_stop>
     8e6:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <rec_start>
		rec_start = 0;
     8ea:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));
     8ec:	ef e9       	ldi	r30, 0x9F	; 159
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	df 01       	movw	r26, r30
     8f2:	1d 92       	st	X+, r1
     8f4:	8a 95       	dec	r24
     8f6:	e9 f7       	brne	.-6      	; 0x8f2 <__vector_25+0xa2>
     8f8:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <myindex>
		
	}
	if(myindex > (PACKET_SIZE -1 ))
     8fc:	82 33       	cpi	r24, 0x32	; 50
     8fe:	50 f0       	brcs	.+20     	; 0x914 <__vector_25+0xc4>
     900:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <myindex>
	{
		myindex = 0;
     904:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <rec_start>
		rec_start = 0;
     908:	05 c0       	rjmp	.+10     	; 0x914 <__vector_25+0xc4>
	}
}
     90a:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <rec_start>
		myindex++;
		//rec = '\0';
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	99 f7       	brne	.-26     	; 0x8f8 <__vector_25+0xa8>
     912:	e1 cf       	rjmp	.-62     	; 0x8d6 <__vector_25+0x86>
     914:	ff 91       	pop	r31
	if(myindex > (PACKET_SIZE -1 ))
	{
		myindex = 0;
		rec_start = 0;
	}
}
     916:	ef 91       	pop	r30
     918:	cf 91       	pop	r28
     91a:	bf 91       	pop	r27
     91c:	af 91       	pop	r26
     91e:	9f 91       	pop	r25
     920:	8f 91       	pop	r24
     922:	7f 91       	pop	r23
     924:	6f 91       	pop	r22
     926:	5f 91       	pop	r21
     928:	4f 91       	pop	r20
     92a:	3f 91       	pop	r19
     92c:	2f 91       	pop	r18
     92e:	0f 90       	pop	r0
     930:	0b be       	out	0x3b, r0	; 59
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <__vector_20>:
     93c:	1f 92       	push	r1
	TCCR1B = (5<<0);	// prescaler 1024
	
}
*/
ISR(TIMER1_OVF_vect)
{
     93e:	0f 92       	push	r0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	0f 92       	push	r0
     944:	11 24       	eor	r1, r1
     946:	0b b6       	in	r0, 0x3b	; 59
     948:	0f 92       	push	r0
     94a:	2f 93       	push	r18
     94c:	3f 93       	push	r19
     94e:	4f 93       	push	r20
     950:	5f 93       	push	r21
     952:	6f 93       	push	r22
     954:	7f 93       	push	r23
     956:	8f 93       	push	r24
     958:	9f 93       	push	r25
     95a:	af 93       	push	r26
     95c:	bf 93       	push	r27
     95e:	ef 93       	push	r30
     960:	ff 93       	push	r31
	time_in_seconds++;
     962:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <time_in_seconds>
     966:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <time_in_seconds+0x1>
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <time_in_seconds+0x1>
     970:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <time_in_seconds>
	itoa(time_in_seconds, buffer, 10);
     974:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <time_in_seconds>
     978:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <time_in_seconds+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     97c:	4a e0       	ldi	r20, 0x0A	; 10
     97e:	6d ee       	ldi	r22, 0xED	; 237
     980:	74 e0       	ldi	r23, 0x04	; 4
     982:	4e d5       	rcall	.+2716   	; 0x1420 <__itoa_ncheck>
	USART2_transmitstring("\ntime in seconds = ");
     984:	81 ec       	ldi	r24, 0xC1	; 193
     986:	93 e0       	ldi	r25, 0x03	; 3
     988:	6e d1       	rcall	.+732    	; 0xc66 <USART2_transmitstring>
	USART2_transmitstring(buffer);
     98a:	8d ee       	ldi	r24, 0xED	; 237
     98c:	94 e0       	ldi	r25, 0x04	; 4
     98e:	6b d1       	rcall	.+726    	; 0xc66 <USART2_transmitstring>
	memset(buffer, '\0', PACKET_SIZE * sizeof(buffer[0]));	// rec_bufferglob clear
     990:	82 e3       	ldi	r24, 0x32	; 50
     992:	ed ee       	ldi	r30, 0xED	; 237
     994:	f4 e0       	ldi	r31, 0x04	; 4
     996:	df 01       	movw	r26, r30
     998:	1d 92       	st	X+, r1
     99a:	8a 95       	dec	r24
     99c:	e9 f7       	brne	.-6      	; 0x998 <__vector_20+0x5c>
	TCNT1 =0xC2F7;	// This value will generate 1 Sec delay for prescaler 1024 and 16 mhz crystel
     99e:	87 ef       	ldi	r24, 0xF7	; 247
     9a0:	92 ec       	ldi	r25, 0xC2	; 194
     9a2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     9a6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCCR1B = (5<<0);	// prescaler 1024
     9aa:	85 e0       	ldi	r24, 0x05	; 5
     9ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
}
     9b0:	ff 91       	pop	r31
     9b2:	ef 91       	pop	r30
     9b4:	bf 91       	pop	r27
     9b6:	af 91       	pop	r26
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	7f 91       	pop	r23
     9be:	6f 91       	pop	r22
     9c0:	5f 91       	pop	r21
     9c2:	4f 91       	pop	r20
     9c4:	3f 91       	pop	r19
     9c6:	2f 91       	pop	r18
     9c8:	0f 90       	pop	r0
     9ca:	0b be       	out	0x3b, r0	; 59
     9cc:	0f 90       	pop	r0
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	0f 90       	pop	r0
     9d2:	1f 90       	pop	r1
     9d4:	18 95       	reti

000009d6 <EEPROM_write>:
	;
}

void my_delay_ms(uint32_t ms)
{
	while (0 < ms--)
     9d6:	f8 94       	cli
     9d8:	f9 99       	sbic	0x1f, 1	; 31
     9da:	fe cf       	rjmp	.-4      	; 0x9d8 <EEPROM_write+0x2>
     9dc:	92 bd       	out	0x22, r25	; 34
     9de:	81 bd       	out	0x21, r24	; 33
     9e0:	60 bd       	out	0x20, r22	; 32
     9e2:	fa 9a       	sbi	0x1f, 2	; 31
     9e4:	f9 9a       	sbi	0x1f, 1	; 31
     9e6:	78 94       	sei
     9e8:	08 95       	ret

000009ea <EEPROM_read>:
     9ea:	f9 99       	sbic	0x1f, 1	; 31
     9ec:	fe cf       	rjmp	.-4      	; 0x9ea <EEPROM_read>
     9ee:	92 bd       	out	0x22, r25	; 34
     9f0:	81 bd       	out	0x21, r24	; 33
     9f2:	f8 9a       	sbi	0x1f, 0	; 31
     9f4:	80 b5       	in	r24, 0x20	; 32
     9f6:	08 95       	ret

000009f8 <EEPROM_Write2Bytes>:
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ec 01       	movw	r28, r24
     a00:	17 2f       	mov	r17, r23
     a02:	f8 94       	cli
     a04:	e8 df       	rcall	.-48     	; 0x9d6 <EEPROM_write>
     a06:	61 2f       	mov	r22, r17
     a08:	ce 01       	movw	r24, r28
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	e4 df       	rcall	.-56     	; 0x9d6 <EEPROM_write>
     a0e:	78 94       	sei
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	08 95       	ret

00000a18 <EEPROM_Read2Bytes>:
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	8c 01       	movw	r16, r24
     a20:	e4 df       	rcall	.-56     	; 0x9ea <EEPROM_read>
     a22:	c8 2f       	mov	r28, r24
     a24:	c8 01       	movw	r24, r16
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	e0 df       	rcall	.-64     	; 0x9ea <EEPROM_read>
     a2a:	2c 2f       	mov	r18, r28
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	a9 01       	movw	r20, r18
     a30:	58 2b       	or	r21, r24
     a32:	ca 01       	movw	r24, r20
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	08 95       	ret

00000a3c <GPIO_Init>:
     a3c:	fc 01       	movw	r30, r24
     a3e:	83 81       	ldd	r24, Z+3	; 0x03
     a40:	81 11       	cpse	r24, r1
     a42:	11 c0       	rjmp	.+34     	; 0xa66 <GPIO_Init+0x2a>
     a44:	30 81       	ld	r19, Z
     a46:	01 80       	ldd	r0, Z+1	; 0x01
     a48:	f2 81       	ldd	r31, Z+2	; 0x02
     a4a:	e0 2d       	mov	r30, r0
     a4c:	22 91       	ld	r18, -Z
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <GPIO_Init+0x1c>
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	3a 95       	dec	r19
     a5a:	e2 f7       	brpl	.-8      	; 0xa54 <GPIO_Init+0x18>
     a5c:	80 95       	com	r24
     a5e:	90 95       	com	r25
     a60:	82 23       	and	r24, r18
     a62:	80 83       	st	Z, r24
     a64:	08 95       	ret
     a66:	30 81       	ld	r19, Z
     a68:	01 80       	ldd	r0, Z+1	; 0x01
     a6a:	f2 81       	ldd	r31, Z+2	; 0x02
     a6c:	e0 2d       	mov	r30, r0
     a6e:	22 91       	ld	r18, -Z
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <GPIO_Init+0x3e>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	3a 95       	dec	r19
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <GPIO_Init+0x3a>
     a7e:	82 2b       	or	r24, r18
     a80:	80 83       	st	Z, r24
     a82:	08 95       	ret

00000a84 <GpioPinInit>:
     a84:	e9 ee       	ldi	r30, 0xE9	; 233
     a86:	f4 e0       	ldi	r31, 0x04	; 4
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	83 83       	std	Z+3, r24	; 0x03
     a8c:	80 83       	st	Z, r24
     a8e:	22 e0       	ldi	r18, 0x02	; 2
     a90:	31 e0       	ldi	r19, 0x01	; 1
     a92:	32 83       	std	Z+2, r19	; 0x02
     a94:	21 83       	std	Z+1, r18	; 0x01
     a96:	ed ed       	ldi	r30, 0xDD	; 221
     a98:	f4 e0       	ldi	r31, 0x04	; 4
     a9a:	13 82       	std	Z+3, r1	; 0x03
     a9c:	10 82       	st	Z, r1
     a9e:	32 83       	std	Z+2, r19	; 0x02
     aa0:	21 83       	std	Z+1, r18	; 0x01
     aa2:	e5 ee       	ldi	r30, 0xE5	; 229
     aa4:	f4 e0       	ldi	r31, 0x04	; 4
     aa6:	83 83       	std	Z+3, r24	; 0x03
     aa8:	10 82       	st	Z, r1
     aaa:	44 e3       	ldi	r20, 0x34	; 52
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	52 83       	std	Z+2, r21	; 0x02
     ab0:	41 83       	std	Z+1, r20	; 0x01
     ab2:	e1 ed       	ldi	r30, 0xD1	; 209
     ab4:	f4 e0       	ldi	r31, 0x04	; 4
     ab6:	83 83       	std	Z+3, r24	; 0x03
     ab8:	10 82       	st	Z, r1
     aba:	48 e2       	ldi	r20, 0x28	; 40
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	52 83       	std	Z+2, r21	; 0x02
     ac0:	41 83       	std	Z+1, r20	; 0x01
     ac2:	e7 e9       	ldi	r30, 0x97	; 151
     ac4:	f4 e0       	ldi	r31, 0x04	; 4
     ac6:	83 83       	std	Z+3, r24	; 0x03
     ac8:	96 e0       	ldi	r25, 0x06	; 6
     aca:	90 83       	st	Z, r25
     acc:	45 e2       	ldi	r20, 0x25	; 37
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	52 83       	std	Z+2, r21	; 0x02
     ad2:	41 83       	std	Z+1, r20	; 0x01
     ad4:	e5 ed       	ldi	r30, 0xD5	; 213
     ad6:	f4 e0       	ldi	r31, 0x04	; 4
     ad8:	83 83       	std	Z+3, r24	; 0x03
     ada:	95 e0       	ldi	r25, 0x05	; 5
     adc:	90 83       	st	Z, r25
     ade:	52 83       	std	Z+2, r21	; 0x02
     ae0:	41 83       	std	Z+1, r20	; 0x01
     ae2:	e7 e2       	ldi	r30, 0x27	; 39
     ae4:	f5 e0       	ldi	r31, 0x05	; 5
     ae6:	83 83       	std	Z+3, r24	; 0x03
     ae8:	64 e0       	ldi	r22, 0x04	; 4
     aea:	60 83       	st	Z, r22
     aec:	52 83       	std	Z+2, r21	; 0x02
     aee:	41 83       	std	Z+1, r20	; 0x01
     af0:	ef e1       	ldi	r30, 0x1F	; 31
     af2:	f5 e0       	ldi	r31, 0x05	; 5
     af4:	83 83       	std	Z+3, r24	; 0x03
     af6:	90 83       	st	Z, r25
     af8:	32 83       	std	Z+2, r19	; 0x02
     afa:	21 83       	std	Z+1, r18	; 0x01
     afc:	e1 ee       	ldi	r30, 0xE1	; 225
     afe:	f4 e0       	ldi	r31, 0x04	; 4
     b00:	83 83       	std	Z+3, r24	; 0x03
     b02:	60 83       	st	Z, r22
     b04:	32 83       	std	Z+2, r19	; 0x02
     b06:	21 83       	std	Z+1, r18	; 0x01
     b08:	e3 e2       	ldi	r30, 0x23	; 35
     b0a:	f5 e0       	ldi	r31, 0x05	; 5
     b0c:	83 83       	std	Z+3, r24	; 0x03
     b0e:	43 e0       	ldi	r20, 0x03	; 3
     b10:	40 83       	st	Z, r20
     b12:	32 83       	std	Z+2, r19	; 0x02
     b14:	21 83       	std	Z+1, r18	; 0x01
     b16:	eb e9       	ldi	r30, 0x9B	; 155
     b18:	f4 e0       	ldi	r31, 0x04	; 4
     b1a:	83 83       	std	Z+3, r24	; 0x03
     b1c:	27 e0       	ldi	r18, 0x07	; 7
     b1e:	20 83       	st	Z, r18
     b20:	2b e2       	ldi	r18, 0x2B	; 43
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	32 83       	std	Z+2, r19	; 0x02
     b26:	21 83       	std	Z+1, r18	; 0x01
     b28:	e9 ed       	ldi	r30, 0xD9	; 217
     b2a:	f4 e0       	ldi	r31, 0x04	; 4
     b2c:	83 83       	std	Z+3, r24	; 0x03
     b2e:	40 83       	st	Z, r20
     b30:	2b e0       	ldi	r18, 0x0B	; 11
     b32:	31 e0       	ldi	r19, 0x01	; 1
     b34:	32 83       	std	Z+2, r19	; 0x02
     b36:	21 83       	std	Z+1, r18	; 0x01
     b38:	eb e2       	ldi	r30, 0x2B	; 43
     b3a:	f5 e0       	ldi	r31, 0x05	; 5
     b3c:	83 83       	std	Z+3, r24	; 0x03
     b3e:	90 83       	st	Z, r25
     b40:	32 83       	std	Z+2, r19	; 0x02
     b42:	21 83       	std	Z+1, r18	; 0x01
     b44:	8d ed       	ldi	r24, 0xDD	; 221
     b46:	94 e0       	ldi	r25, 0x04	; 4
     b48:	79 df       	rcall	.-270    	; 0xa3c <GPIO_Init>
     b4a:	89 ee       	ldi	r24, 0xE9	; 233
     b4c:	94 e0       	ldi	r25, 0x04	; 4
     b4e:	76 df       	rcall	.-276    	; 0xa3c <GPIO_Init>
     b50:	85 ee       	ldi	r24, 0xE5	; 229
     b52:	94 e0       	ldi	r25, 0x04	; 4
     b54:	73 df       	rcall	.-282    	; 0xa3c <GPIO_Init>
     b56:	81 ed       	ldi	r24, 0xD1	; 209
     b58:	94 e0       	ldi	r25, 0x04	; 4
     b5a:	70 df       	rcall	.-288    	; 0xa3c <GPIO_Init>
     b5c:	87 e9       	ldi	r24, 0x97	; 151
     b5e:	94 e0       	ldi	r25, 0x04	; 4
     b60:	6d df       	rcall	.-294    	; 0xa3c <GPIO_Init>
     b62:	85 ed       	ldi	r24, 0xD5	; 213
     b64:	94 e0       	ldi	r25, 0x04	; 4
     b66:	6a df       	rcall	.-300    	; 0xa3c <GPIO_Init>
     b68:	87 e2       	ldi	r24, 0x27	; 39
     b6a:	95 e0       	ldi	r25, 0x05	; 5
     b6c:	67 df       	rcall	.-306    	; 0xa3c <GPIO_Init>
     b6e:	8f e1       	ldi	r24, 0x1F	; 31
     b70:	95 e0       	ldi	r25, 0x05	; 5
     b72:	64 df       	rcall	.-312    	; 0xa3c <GPIO_Init>
     b74:	81 ee       	ldi	r24, 0xE1	; 225
     b76:	94 e0       	ldi	r25, 0x04	; 4
     b78:	61 df       	rcall	.-318    	; 0xa3c <GPIO_Init>
     b7a:	83 e2       	ldi	r24, 0x23	; 35
     b7c:	95 e0       	ldi	r25, 0x05	; 5
     b7e:	5e df       	rcall	.-324    	; 0xa3c <GPIO_Init>
     b80:	8b e9       	ldi	r24, 0x9B	; 155
     b82:	94 e0       	ldi	r25, 0x04	; 4
     b84:	5b df       	rcall	.-330    	; 0xa3c <GPIO_Init>
     b86:	89 ed       	ldi	r24, 0xD9	; 217
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	58 df       	rcall	.-336    	; 0xa3c <GPIO_Init>
     b8c:	8b e2       	ldi	r24, 0x2B	; 43
     b8e:	95 e0       	ldi	r25, 0x05	; 5
     b90:	55 cf       	rjmp	.-342    	; 0xa3c <GPIO_Init>
     b92:	08 95       	ret

00000b94 <GPIO_WriteToPin>:
     b94:	61 30       	cpi	r22, 0x01	; 1
     b96:	89 f4       	brne	.+34     	; 0xbba <GPIO_WriteToPin+0x26>
     b98:	dc 01       	movw	r26, r24
     b9a:	3c 91       	ld	r19, X
     b9c:	11 96       	adiw	r26, 0x01	; 1
     b9e:	ed 91       	ld	r30, X+
     ba0:	fc 91       	ld	r31, X
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 81       	ld	r18, Z
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <GPIO_WriteToPin+0x1c>
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	3a 95       	dec	r19
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <GPIO_WriteToPin+0x18>
     bb4:	82 2b       	or	r24, r18
     bb6:	80 83       	st	Z, r24
     bb8:	08 95       	ret
     bba:	fc 01       	movw	r30, r24
     bbc:	30 81       	ld	r19, Z
     bbe:	01 80       	ldd	r0, Z+1	; 0x01
     bc0:	f2 81       	ldd	r31, Z+2	; 0x02
     bc2:	e0 2d       	mov	r30, r0
     bc4:	20 81       	ld	r18, Z
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <GPIO_WriteToPin+0x3c>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	3a 95       	dec	r19
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <GPIO_WriteToPin+0x38>
     bd4:	80 95       	com	r24
     bd6:	90 95       	com	r25
     bd8:	82 23       	and	r24, r18
     bda:	80 83       	st	Z, r24
     bdc:	08 95       	ret

00000bde <USART0_Init>:
     bde:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     be2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     be6:	88 e9       	ldi	r24, 0x98	; 152
     be8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     bec:	86 e0       	ldi	r24, 0x06	; 6
     bee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     bf2:	08 95       	ret

00000bf4 <USART0_Transmit>:
     bf4:	e0 ec       	ldi	r30, 0xC0	; 192
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	90 81       	ld	r25, Z
     bfa:	95 ff       	sbrs	r25, 5
     bfc:	fd cf       	rjmp	.-6      	; 0xbf8 <USART0_Transmit+0x4>
     bfe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     c02:	08 95       	ret

00000c04 <USART0_transmitstring>:
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	ec 01       	movw	r28, r24
     c0a:	88 81       	ld	r24, Y
     c0c:	88 23       	and	r24, r24
     c0e:	29 f0       	breq	.+10     	; 0xc1a <USART0_transmitstring+0x16>
     c10:	21 96       	adiw	r28, 0x01	; 1
     c12:	f0 df       	rcall	.-32     	; 0xbf4 <USART0_Transmit>
     c14:	89 91       	ld	r24, Y+
     c16:	81 11       	cpse	r24, r1
     c18:	fc cf       	rjmp	.-8      	; 0xc12 <USART0_transmitstring+0xe>
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <USART2_Init>:
     c20:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     c24:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     c28:	88 e9       	ldi	r24, 0x98	; 152
     c2a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     c2e:	86 e0       	ldi	r24, 0x06	; 6
     c30:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     c34:	08 95       	ret

00000c36 <USART2_Transmit>:
     c36:	e0 ed       	ldi	r30, 0xD0	; 208
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	90 81       	ld	r25, Z
     c3c:	95 ff       	sbrs	r25, 5
     c3e:	fd cf       	rjmp	.-6      	; 0xc3a <USART2_Transmit+0x4>
     c40:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     c44:	08 95       	ret

00000c46 <USART2_Receive>:
     c46:	e0 ed       	ldi	r30, 0xD0	; 208
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	88 23       	and	r24, r24
     c4e:	ec f7       	brge	.-6      	; 0xc4a <USART2_Receive+0x4>
     c50:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     c54:	08 95       	ret

00000c56 <USART0_Receive>:
     c56:	e0 ec       	ldi	r30, 0xC0	; 192
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	88 23       	and	r24, r24
     c5e:	ec f7       	brge	.-6      	; 0xc5a <USART0_Receive+0x4>
     c60:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     c64:	08 95       	ret

00000c66 <USART2_transmitstring>:
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ec 01       	movw	r28, r24
     c6c:	88 81       	ld	r24, Y
     c6e:	88 23       	and	r24, r24
     c70:	29 f0       	breq	.+10     	; 0xc7c <USART2_transmitstring+0x16>
     c72:	21 96       	adiw	r28, 0x01	; 1
     c74:	e0 df       	rcall	.-64     	; 0xc36 <USART2_Transmit>
     c76:	89 91       	ld	r24, Y+
     c78:	81 11       	cpse	r24, r1
     c7a:	fc cf       	rjmp	.-8      	; 0xc74 <USART2_transmitstring+0xe>
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <Timer1_init>:
     c82:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     c86:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     c8a:	87 ef       	ldi	r24, 0xF7	; 247
     c8c:	92 ec       	ldi	r25, 0xC2	; 194
     c8e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     c92:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     c96:	85 e0       	ldi	r24, 0x05	; 5
     c98:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     c9c:	ef e6       	ldi	r30, 0x6F	; 111
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	81 60       	ori	r24, 0x01	; 1
     ca4:	80 83       	st	Z, r24
     ca6:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <time_in_seconds+0x1>
     caa:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <time_in_seconds>
     cae:	08 95       	ret

00000cb0 <MatchCommand>:
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	ec 01       	movw	r28, r24
     cba:	65 ed       	ldi	r22, 0xD5	; 213
     cbc:	73 e0       	ldi	r23, 0x03	; 3
     cbe:	6b d3       	rcall	.+1750   	; 0x1396 <strtok>
     cc0:	8c 01       	movw	r16, r24
     cc2:	67 ed       	ldi	r22, 0xD7	; 215
     cc4:	73 e0       	ldi	r23, 0x03	; 3
     cc6:	ce 01       	movw	r24, r28
     cc8:	74 d3       	rcall	.+1768   	; 0x13b2 <strcmp>
     cca:	89 2b       	or	r24, r25
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <MatchCommand+0x20>
     cce:	0f c1       	rjmp	.+542    	; 0xeee <MatchCommand+0x23e>
     cd0:	61 ee       	ldi	r22, 0xE1	; 225
     cd2:	73 e0       	ldi	r23, 0x03	; 3
     cd4:	ce 01       	movw	r24, r28
     cd6:	6d d3       	rcall	.+1754   	; 0x13b2 <strcmp>
     cd8:	89 2b       	or	r24, r25
     cda:	09 f4       	brne	.+2      	; 0xcde <MatchCommand+0x2e>
     cdc:	0a c1       	rjmp	.+532    	; 0xef2 <MatchCommand+0x242>
     cde:	6b ee       	ldi	r22, 0xEB	; 235
     ce0:	73 e0       	ldi	r23, 0x03	; 3
     ce2:	ce 01       	movw	r24, r28
     ce4:	66 d3       	rcall	.+1740   	; 0x13b2 <strcmp>
     ce6:	89 2b       	or	r24, r25
     ce8:	09 f4       	brne	.+2      	; 0xcec <MatchCommand+0x3c>
     cea:	05 c1       	rjmp	.+522    	; 0xef6 <MatchCommand+0x246>
     cec:	65 ef       	ldi	r22, 0xF5	; 245
     cee:	73 e0       	ldi	r23, 0x03	; 3
     cf0:	ce 01       	movw	r24, r28
     cf2:	5f d3       	rcall	.+1726   	; 0x13b2 <strcmp>
     cf4:	89 2b       	or	r24, r25
     cf6:	09 f4       	brne	.+2      	; 0xcfa <MatchCommand+0x4a>
     cf8:	00 c1       	rjmp	.+512    	; 0xefa <MatchCommand+0x24a>
     cfa:	6f ef       	ldi	r22, 0xFF	; 255
     cfc:	73 e0       	ldi	r23, 0x03	; 3
     cfe:	ce 01       	movw	r24, r28
     d00:	58 d3       	rcall	.+1712   	; 0x13b2 <strcmp>
     d02:	89 2b       	or	r24, r25
     d04:	09 f4       	brne	.+2      	; 0xd08 <MatchCommand+0x58>
     d06:	fb c0       	rjmp	.+502    	; 0xefe <MatchCommand+0x24e>
     d08:	66 e0       	ldi	r22, 0x06	; 6
     d0a:	74 e0       	ldi	r23, 0x04	; 4
     d0c:	ce 01       	movw	r24, r28
     d0e:	51 d3       	rcall	.+1698   	; 0x13b2 <strcmp>
     d10:	89 2b       	or	r24, r25
     d12:	09 f4       	brne	.+2      	; 0xd16 <MatchCommand+0x66>
     d14:	f6 c0       	rjmp	.+492    	; 0xf02 <MatchCommand+0x252>
     d16:	6c e0       	ldi	r22, 0x0C	; 12
     d18:	74 e0       	ldi	r23, 0x04	; 4
     d1a:	ce 01       	movw	r24, r28
     d1c:	4a d3       	rcall	.+1684   	; 0x13b2 <strcmp>
     d1e:	89 2b       	or	r24, r25
     d20:	09 f4       	brne	.+2      	; 0xd24 <MatchCommand+0x74>
     d22:	f1 c0       	rjmp	.+482    	; 0xf06 <MatchCommand+0x256>
     d24:	61 e1       	ldi	r22, 0x11	; 17
     d26:	74 e0       	ldi	r23, 0x04	; 4
     d28:	ce 01       	movw	r24, r28
     d2a:	43 d3       	rcall	.+1670   	; 0x13b2 <strcmp>
     d2c:	89 2b       	or	r24, r25
     d2e:	09 f4       	brne	.+2      	; 0xd32 <MatchCommand+0x82>
     d30:	ec c0       	rjmp	.+472    	; 0xf0a <MatchCommand+0x25a>
     d32:	6a e1       	ldi	r22, 0x1A	; 26
     d34:	74 e0       	ldi	r23, 0x04	; 4
     d36:	ce 01       	movw	r24, r28
     d38:	3c d3       	rcall	.+1656   	; 0x13b2 <strcmp>
     d3a:	89 2b       	or	r24, r25
     d3c:	09 f4       	brne	.+2      	; 0xd40 <MatchCommand+0x90>
     d3e:	e7 c0       	rjmp	.+462    	; 0xf0e <MatchCommand+0x25e>
     d40:	64 e2       	ldi	r22, 0x24	; 36
     d42:	74 e0       	ldi	r23, 0x04	; 4
     d44:	ce 01       	movw	r24, r28
     d46:	35 d3       	rcall	.+1642   	; 0x13b2 <strcmp>
     d48:	89 2b       	or	r24, r25
     d4a:	09 f4       	brne	.+2      	; 0xd4e <MatchCommand+0x9e>
     d4c:	e2 c0       	rjmp	.+452    	; 0xf12 <MatchCommand+0x262>
     d4e:	69 e2       	ldi	r22, 0x29	; 41
     d50:	74 e0       	ldi	r23, 0x04	; 4
     d52:	ce 01       	movw	r24, r28
     d54:	2e d3       	rcall	.+1628   	; 0x13b2 <strcmp>
     d56:	89 2b       	or	r24, r25
     d58:	09 f4       	brne	.+2      	; 0xd5c <MatchCommand+0xac>
     d5a:	dd c0       	rjmp	.+442    	; 0xf16 <MatchCommand+0x266>
     d5c:	6e e2       	ldi	r22, 0x2E	; 46
     d5e:	74 e0       	ldi	r23, 0x04	; 4
     d60:	ce 01       	movw	r24, r28
     d62:	27 d3       	rcall	.+1614   	; 0x13b2 <strcmp>
     d64:	89 2b       	or	r24, r25
     d66:	09 f4       	brne	.+2      	; 0xd6a <MatchCommand+0xba>
     d68:	d8 c0       	rjmp	.+432    	; 0xf1a <MatchCommand+0x26a>
     d6a:	63 e3       	ldi	r22, 0x33	; 51
     d6c:	74 e0       	ldi	r23, 0x04	; 4
     d6e:	ce 01       	movw	r24, r28
     d70:	20 d3       	rcall	.+1600   	; 0x13b2 <strcmp>
     d72:	89 2b       	or	r24, r25
     d74:	09 f4       	brne	.+2      	; 0xd78 <MatchCommand+0xc8>
     d76:	d3 c0       	rjmp	.+422    	; 0xf1e <MatchCommand+0x26e>
     d78:	68 e3       	ldi	r22, 0x38	; 56
     d7a:	74 e0       	ldi	r23, 0x04	; 4
     d7c:	ce 01       	movw	r24, r28
     d7e:	19 d3       	rcall	.+1586   	; 0x13b2 <strcmp>
     d80:	89 2b       	or	r24, r25
     d82:	09 f4       	brne	.+2      	; 0xd86 <MatchCommand+0xd6>
     d84:	ce c0       	rjmp	.+412    	; 0xf22 <MatchCommand+0x272>
     d86:	6d e3       	ldi	r22, 0x3D	; 61
     d88:	74 e0       	ldi	r23, 0x04	; 4
     d8a:	ce 01       	movw	r24, r28
     d8c:	12 d3       	rcall	.+1572   	; 0x13b2 <strcmp>
     d8e:	89 2b       	or	r24, r25
     d90:	09 f4       	brne	.+2      	; 0xd94 <MatchCommand+0xe4>
     d92:	c9 c0       	rjmp	.+402    	; 0xf26 <MatchCommand+0x276>
     d94:	65 e4       	ldi	r22, 0x45	; 69
     d96:	74 e0       	ldi	r23, 0x04	; 4
     d98:	ce 01       	movw	r24, r28
     d9a:	0b d3       	rcall	.+1558   	; 0x13b2 <strcmp>
     d9c:	89 2b       	or	r24, r25
     d9e:	09 f4       	brne	.+2      	; 0xda2 <MatchCommand+0xf2>
     da0:	c4 c0       	rjmp	.+392    	; 0xf2a <MatchCommand+0x27a>
     da2:	6f e4       	ldi	r22, 0x4F	; 79
     da4:	74 e0       	ldi	r23, 0x04	; 4
     da6:	c8 01       	movw	r24, r16
     da8:	04 d3       	rcall	.+1544   	; 0x13b2 <strcmp>
     daa:	89 2b       	or	r24, r25
     dac:	e1 f4       	brne	.+56     	; 0xde6 <MatchCommand+0x136>
     dae:	65 ed       	ldi	r22, 0xD5	; 213
     db0:	73 e0       	ldi	r23, 0x03	; 3
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	ef d2       	rcall	.+1502   	; 0x1396 <strtok>
     db8:	dc 01       	movw	r26, r24
     dba:	2c 91       	ld	r18, X
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     dc2:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     dc6:	11 96       	adiw	r26, 0x01	; 1
     dc8:	8c 91       	ld	r24, X
     dca:	38 2b       	or	r19, r24
     dcc:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     dd0:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     dd4:	82 e3       	ldi	r24, 0x32	; 50
     dd6:	e1 e6       	ldi	r30, 0x61	; 97
     dd8:	f5 e0       	ldi	r31, 0x05	; 5
     dda:	df 01       	movw	r26, r30
     ddc:	1d 92       	st	X+, r1
     dde:	8a 95       	dec	r24
     de0:	e9 f7       	brne	.-6      	; 0xddc <MatchCommand+0x12c>
     de2:	89 e0       	ldi	r24, 0x09	; 9
     de4:	a5 c0       	rjmp	.+330    	; 0xf30 <MatchCommand+0x280>
     de6:	66 e5       	ldi	r22, 0x56	; 86
     de8:	74 e0       	ldi	r23, 0x04	; 4
     dea:	c8 01       	movw	r24, r16
     dec:	e2 d2       	rcall	.+1476   	; 0x13b2 <strcmp>
     dee:	89 2b       	or	r24, r25
     df0:	d9 f4       	brne	.+54     	; 0xe28 <MatchCommand+0x178>
     df2:	65 ed       	ldi	r22, 0xD5	; 213
     df4:	73 e0       	ldi	r23, 0x03	; 3
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	cd d2       	rcall	.+1434   	; 0x1396 <strtok>
     dfc:	fc 01       	movw	r30, r24
     dfe:	20 81       	ld	r18, Z
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e06:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     e0a:	81 81       	ldd	r24, Z+1	; 0x01
     e0c:	38 2b       	or	r19, r24
     e0e:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e12:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     e16:	82 e3       	ldi	r24, 0x32	; 50
     e18:	e1 e6       	ldi	r30, 0x61	; 97
     e1a:	f5 e0       	ldi	r31, 0x05	; 5
     e1c:	df 01       	movw	r26, r30
     e1e:	1d 92       	st	X+, r1
     e20:	8a 95       	dec	r24
     e22:	e9 f7       	brne	.-6      	; 0xe1e <MatchCommand+0x16e>
     e24:	8a e0       	ldi	r24, 0x0A	; 10
     e26:	84 c0       	rjmp	.+264    	; 0xf30 <MatchCommand+0x280>
     e28:	6e e5       	ldi	r22, 0x5E	; 94
     e2a:	74 e0       	ldi	r23, 0x04	; 4
     e2c:	c8 01       	movw	r24, r16
     e2e:	c1 d2       	rcall	.+1410   	; 0x13b2 <strcmp>
     e30:	89 2b       	or	r24, r25
     e32:	d9 f4       	brne	.+54     	; 0xe6a <MatchCommand+0x1ba>
     e34:	65 ed       	ldi	r22, 0xD5	; 213
     e36:	73 e0       	ldi	r23, 0x03	; 3
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	ac d2       	rcall	.+1368   	; 0x1396 <strtok>
     e3e:	fc 01       	movw	r30, r24
     e40:	20 81       	ld	r18, Z
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e48:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     e4c:	81 81       	ldd	r24, Z+1	; 0x01
     e4e:	38 2b       	or	r19, r24
     e50:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e54:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     e58:	82 e3       	ldi	r24, 0x32	; 50
     e5a:	e1 e6       	ldi	r30, 0x61	; 97
     e5c:	f5 e0       	ldi	r31, 0x05	; 5
     e5e:	df 01       	movw	r26, r30
     e60:	1d 92       	st	X+, r1
     e62:	8a 95       	dec	r24
     e64:	e9 f7       	brne	.-6      	; 0xe60 <MatchCommand+0x1b0>
     e66:	8d e0       	ldi	r24, 0x0D	; 13
     e68:	63 c0       	rjmp	.+198    	; 0xf30 <MatchCommand+0x280>
     e6a:	67 e6       	ldi	r22, 0x67	; 103
     e6c:	74 e0       	ldi	r23, 0x04	; 4
     e6e:	c8 01       	movw	r24, r16
     e70:	a0 d2       	rcall	.+1344   	; 0x13b2 <strcmp>
     e72:	89 2b       	or	r24, r25
     e74:	d9 f4       	brne	.+54     	; 0xeac <MatchCommand+0x1fc>
     e76:	65 ed       	ldi	r22, 0xD5	; 213
     e78:	73 e0       	ldi	r23, 0x03	; 3
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	8b d2       	rcall	.+1302   	; 0x1396 <strtok>
     e80:	fc 01       	movw	r30, r24
     e82:	20 81       	ld	r18, Z
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e8a:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     e8e:	81 81       	ldd	r24, Z+1	; 0x01
     e90:	38 2b       	or	r19, r24
     e92:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e96:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     e9a:	82 e3       	ldi	r24, 0x32	; 50
     e9c:	e1 e6       	ldi	r30, 0x61	; 97
     e9e:	f5 e0       	ldi	r31, 0x05	; 5
     ea0:	df 01       	movw	r26, r30
     ea2:	1d 92       	st	X+, r1
     ea4:	8a 95       	dec	r24
     ea6:	e9 f7       	brne	.-6      	; 0xea2 <MatchCommand+0x1f2>
     ea8:	88 e0       	ldi	r24, 0x08	; 8
     eaa:	42 c0       	rjmp	.+132    	; 0xf30 <MatchCommand+0x280>
     eac:	6f e6       	ldi	r22, 0x6F	; 111
     eae:	74 e0       	ldi	r23, 0x04	; 4
     eb0:	c8 01       	movw	r24, r16
     eb2:	7f d2       	rcall	.+1278   	; 0x13b2 <strcmp>
     eb4:	89 2b       	or	r24, r25
     eb6:	d9 f5       	brne	.+118    	; 0xf2e <MatchCommand+0x27e>
     eb8:	65 ed       	ldi	r22, 0xD5	; 213
     eba:	73 e0       	ldi	r23, 0x03	; 3
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	6a d2       	rcall	.+1236   	; 0x1396 <strtok>
     ec2:	fc 01       	movw	r30, r24
     ec4:	20 81       	ld	r18, Z
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     ecc:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     ed0:	81 81       	ldd	r24, Z+1	; 0x01
     ed2:	38 2b       	or	r19, r24
     ed4:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     ed8:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     edc:	82 e3       	ldi	r24, 0x32	; 50
     ede:	e1 e6       	ldi	r30, 0x61	; 97
     ee0:	f5 e0       	ldi	r31, 0x05	; 5
     ee2:	df 01       	movw	r26, r30
     ee4:	1d 92       	st	X+, r1
     ee6:	8a 95       	dec	r24
     ee8:	e9 f7       	brne	.-6      	; 0xee4 <MatchCommand+0x234>
     eea:	83 e1       	ldi	r24, 0x13	; 19
     eec:	21 c0       	rjmp	.+66     	; 0xf30 <MatchCommand+0x280>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	1f c0       	rjmp	.+62     	; 0xf30 <MatchCommand+0x280>
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	1d c0       	rjmp	.+58     	; 0xf30 <MatchCommand+0x280>
     ef6:	83 e0       	ldi	r24, 0x03	; 3
     ef8:	1b c0       	rjmp	.+54     	; 0xf30 <MatchCommand+0x280>
     efa:	84 e0       	ldi	r24, 0x04	; 4
     efc:	19 c0       	rjmp	.+50     	; 0xf30 <MatchCommand+0x280>
     efe:	85 e0       	ldi	r24, 0x05	; 5
     f00:	17 c0       	rjmp	.+46     	; 0xf30 <MatchCommand+0x280>
     f02:	86 e0       	ldi	r24, 0x06	; 6
     f04:	15 c0       	rjmp	.+42     	; 0xf30 <MatchCommand+0x280>
     f06:	84 e6       	ldi	r24, 0x64	; 100
     f08:	13 c0       	rjmp	.+38     	; 0xf30 <MatchCommand+0x280>
     f0a:	87 e0       	ldi	r24, 0x07	; 7
     f0c:	11 c0       	rjmp	.+34     	; 0xf30 <MatchCommand+0x280>
     f0e:	8b e0       	ldi	r24, 0x0B	; 11
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <MatchCommand+0x280>
     f12:	8c e0       	ldi	r24, 0x0C	; 12
     f14:	0d c0       	rjmp	.+26     	; 0xf30 <MatchCommand+0x280>
     f16:	8e e0       	ldi	r24, 0x0E	; 14
     f18:	0b c0       	rjmp	.+22     	; 0xf30 <MatchCommand+0x280>
     f1a:	8f e0       	ldi	r24, 0x0F	; 15
     f1c:	09 c0       	rjmp	.+18     	; 0xf30 <MatchCommand+0x280>
     f1e:	80 e1       	ldi	r24, 0x10	; 16
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <MatchCommand+0x280>
     f22:	81 e1       	ldi	r24, 0x11	; 17
     f24:	05 c0       	rjmp	.+10     	; 0xf30 <MatchCommand+0x280>
     f26:	82 e1       	ldi	r24, 0x12	; 18
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <MatchCommand+0x280>
     f2a:	84 e1       	ldi	r24, 0x14	; 20
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <MatchCommand+0x280>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <Send_FF_to_Display>:
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
     f3c:	5b de       	rcall	.-842    	; 0xbf4 <USART0_Transmit>
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	59 de       	rcall	.-846    	; 0xbf4 <USART0_Transmit>
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	57 de       	rcall	.-850    	; 0xbf4 <USART0_Transmit>
     f46:	82 e3       	ldi	r24, 0x32	; 50
     f48:	ed ee       	ldi	r30, 0xED	; 237
     f4a:	f4 e0       	ldi	r31, 0x04	; 4
     f4c:	df 01       	movw	r26, r30
     f4e:	1d 92       	st	X+, r1
     f50:	8a 95       	dec	r24
     f52:	e9 f7       	brne	.-6      	; 0xf4e <Send_FF_to_Display+0x14>
     f54:	08 95       	ret

00000f56 <EEPROM_DisplayDataInit>:
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	c0 e0       	ldi	r28, 0x00	; 0
     f5c:	d0 e0       	ldi	r29, 0x00	; 0
     f5e:	ce 01       	movw	r24, r28
     f60:	5b dd       	rcall	.-1354   	; 0xa18 <EEPROM_Read2Bytes>
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	21 f4       	brne	.+8      	; 0xf6e <EEPROM_DisplayDataInit+0x18>
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	ce 01       	movw	r24, r28
     f6c:	45 dd       	rcall	.-1398   	; 0x9f8 <EEPROM_Write2Bytes>
     f6e:	22 96       	adiw	r28, 0x02	; 2
     f70:	c2 36       	cpi	r28, 0x62	; 98
     f72:	d1 05       	cpc	r29, r1
     f74:	a1 f7       	brne	.-24     	; 0xf5e <EEPROM_DisplayDataInit+0x8>
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <ReagentSelected>:
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	08 2f       	mov	r16, r24
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	0f 2e       	mov	r0, r31
     f8e:	f2 e3       	ldi	r31, 0x32	; 50
     f90:	ef 2e       	mov	r14, r31
     f92:	f0 2d       	mov	r31, r0
     f94:	c6 2f       	mov	r28, r22
     f96:	d0 e0       	ldi	r29, 0x00	; 0
     f98:	ff 24       	eor	r15, r15
     f9a:	f3 94       	inc	r15
     f9c:	2f ef       	ldi	r18, 0xFF	; 255
     f9e:	81 ee       	ldi	r24, 0xE1	; 225
     fa0:	94 e0       	ldi	r25, 0x04	; 4
     fa2:	21 50       	subi	r18, 0x01	; 1
     fa4:	80 40       	sbci	r24, 0x00	; 0
     fa6:	90 40       	sbci	r25, 0x00	; 0
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <ReagentSelected+0x26>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <ReagentSelected+0x30>
     fac:	00 00       	nop
     fae:	87 e7       	ldi	r24, 0x77	; 119
     fb0:	94 e0       	ldi	r25, 0x04	; 4
     fb2:	59 de       	rcall	.-846    	; 0xc66 <USART2_transmitstring>
     fb4:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <OneTimeRunFunFlag>
     fb8:	3e de       	rcall	.-900    	; 0xc36 <USART2_Transmit>
     fba:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <OneTimeRunFunFlag>
     fbe:	91 11       	cpse	r25, r1
     fc0:	12 c0       	rjmp	.+36     	; 0xfe6 <ReagentSelected+0x6a>
     fc2:	8c e7       	ldi	r24, 0x7C	; 124
     fc4:	94 e0       	ldi	r25, 0x04	; 4
     fc6:	1e de       	rcall	.-964    	; 0xc04 <USART0_transmitstring>
     fc8:	c8 01       	movw	r24, r16
     fca:	26 dd       	rcall	.-1460   	; 0xa18 <EEPROM_Read2Bytes>
     fcc:	4a e0       	ldi	r20, 0x0A	; 10
     fce:	6d ee       	ldi	r22, 0xED	; 237
     fd0:	74 e0       	ldi	r23, 0x04	; 4
     fd2:	26 d2       	rcall	.+1100   	; 0x1420 <__itoa_ncheck>
     fd4:	8d ee       	ldi	r24, 0xED	; 237
     fd6:	94 e0       	ldi	r25, 0x04	; 4
     fd8:	15 de       	rcall	.-982    	; 0xc04 <USART0_transmitstring>
     fda:	af df       	rcall	.-162    	; 0xf3a <Send_FF_to_Display>
     fdc:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <OneTimeRunFunFlag>
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <OneTimeRunFunFlag>
     fe6:	81 e6       	ldi	r24, 0x61	; 97
     fe8:	95 e0       	ldi	r25, 0x05	; 5
     fea:	62 de       	rcall	.-828    	; 0xcb0 <MatchCommand>
     fec:	88 30       	cpi	r24, 0x08	; 8
     fee:	09 f0       	breq	.+2      	; 0xff2 <ReagentSelected+0x76>
     ff0:	53 c0       	rjmp	.+166    	; 0x1098 <ReagentSelected+0x11c>
     ff2:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     ff6:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     ffa:	c8 01       	movw	r24, r16
     ffc:	fd dc       	rcall	.-1542   	; 0x9f8 <EEPROM_Write2Bytes>
     ffe:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <OneTimeRunFunFlag>
    1002:	af ef       	ldi	r26, 0xFF	; 255
    1004:	b1 ee       	ldi	r27, 0xE1	; 225
    1006:	24 e0       	ldi	r18, 0x04	; 4
    1008:	a1 50       	subi	r26, 0x01	; 1
    100a:	b0 40       	sbci	r27, 0x00	; 0
    100c:	20 40       	sbci	r18, 0x00	; 0
    100e:	e1 f7       	brne	.-8      	; 0x1008 <ReagentSelected+0x8c>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <ReagentSelected+0x96>
    1012:	00 00       	nop
    1014:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <OneTimeRunFunFlag>
    1018:	0e de       	rcall	.-996    	; 0xc36 <USART2_Transmit>
    101a:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <OneTimeRunFunFlag>
    101e:	91 11       	cpse	r25, r1
    1020:	12 c0       	rjmp	.+36     	; 0x1046 <ReagentSelected+0xca>
    1022:	8c e7       	ldi	r24, 0x7C	; 124
    1024:	94 e0       	ldi	r25, 0x04	; 4
    1026:	ee dd       	rcall	.-1060   	; 0xc04 <USART0_transmitstring>
    1028:	ce 01       	movw	r24, r28
    102a:	f6 dc       	rcall	.-1556   	; 0xa18 <EEPROM_Read2Bytes>
    102c:	4a e0       	ldi	r20, 0x0A	; 10
    102e:	6d ee       	ldi	r22, 0xED	; 237
    1030:	74 e0       	ldi	r23, 0x04	; 4
    1032:	f6 d1       	rcall	.+1004   	; 0x1420 <__itoa_ncheck>
    1034:	8d ee       	ldi	r24, 0xED	; 237
    1036:	94 e0       	ldi	r25, 0x04	; 4
    1038:	e5 dd       	rcall	.-1078   	; 0xc04 <USART0_transmitstring>
    103a:	7f df       	rcall	.-258    	; 0xf3a <Send_FF_to_Display>
    103c:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <OneTimeRunFunFlag>
    1040:	9f 5f       	subi	r25, 0xFF	; 255
    1042:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <OneTimeRunFunFlag>
    1046:	81 e6       	ldi	r24, 0x61	; 97
    1048:	95 e0       	ldi	r25, 0x05	; 5
    104a:	32 de       	rcall	.-924    	; 0xcb0 <MatchCommand>
    104c:	8d 30       	cpi	r24, 0x0D	; 13
    104e:	89 f4       	brne	.+34     	; 0x1072 <ReagentSelected+0xf6>
    1050:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1054:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1058:	ce 01       	movw	r24, r28
    105a:	ce dc       	rcall	.-1636   	; 0x9f8 <EEPROM_Write2Bytes>
    105c:	95 e0       	ldi	r25, 0x05	; 5
    105e:	ec e0       	ldi	r30, 0x0C	; 12
    1060:	f4 e0       	ldi	r31, 0x04	; 4
    1062:	a1 e6       	ldi	r26, 0x61	; 97
    1064:	b5 e0       	ldi	r27, 0x05	; 5
    1066:	01 90       	ld	r0, Z+
    1068:	0d 92       	st	X+, r0
    106a:	9a 95       	dec	r25
    106c:	e1 f7       	brne	.-8      	; 0x1066 <ReagentSelected+0xea>
    106e:	f0 92 92 04 	sts	0x0492, r15	; 0x800492 <flag>
    1072:	81 e6       	ldi	r24, 0x61	; 97
    1074:	95 e0       	ldi	r25, 0x05	; 5
    1076:	1c de       	rcall	.-968    	; 0xcb0 <MatchCommand>
    1078:	84 36       	cpi	r24, 0x64	; 100
    107a:	09 f0       	breq	.+2      	; 0x107e <ReagentSelected+0x102>
    107c:	c2 cf       	rjmp	.-124    	; 0x1002 <ReagentSelected+0x86>
    107e:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <OneTimeRunFunFlag>
    1082:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <flag>
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	39 f0       	breq	.+14     	; 0x1098 <ReagentSelected+0x11c>
    108a:	e1 e6       	ldi	r30, 0x61	; 97
    108c:	f5 e0       	ldi	r31, 0x05	; 5
    108e:	df 01       	movw	r26, r30
    1090:	2e 2d       	mov	r18, r14
    1092:	1d 92       	st	X+, r1
    1094:	2a 95       	dec	r18
    1096:	e9 f7       	brne	.-6      	; 0x1092 <ReagentSelected+0x116>
    1098:	81 e6       	ldi	r24, 0x61	; 97
    109a:	95 e0       	ldi	r25, 0x05	; 5
    109c:	09 de       	rcall	.-1006   	; 0xcb0 <MatchCommand>
    109e:	84 36       	cpi	r24, 0x64	; 100
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <ReagentSelected+0x128>
    10a2:	7c cf       	rjmp	.-264    	; 0xf9c <ReagentSelected+0x20>
    10a4:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <OneTimeRunFunFlag>
    10a8:	82 e3       	ldi	r24, 0x32	; 50
    10aa:	e1 e6       	ldi	r30, 0x61	; 97
    10ac:	f5 e0       	ldi	r31, 0x05	; 5
    10ae:	df 01       	movw	r26, r30
    10b0:	1d 92       	st	X+, r1
    10b2:	8a 95       	dec	r24
    10b4:	e9 f7       	brne	.-6      	; 0x10b0 <ReagentSelected+0x134>
    10b6:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <flag>
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	08 95       	ret

000010c8 <StartBlowerTimeSelected>:
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	c8 2f       	mov	r28, r24
    10ce:	d0 e0       	ldi	r29, 0x00	; 0
    10d0:	2f ef       	ldi	r18, 0xFF	; 255
    10d2:	81 ee       	ldi	r24, 0xE1	; 225
    10d4:	94 e0       	ldi	r25, 0x04	; 4
    10d6:	21 50       	subi	r18, 0x01	; 1
    10d8:	80 40       	sbci	r24, 0x00	; 0
    10da:	90 40       	sbci	r25, 0x00	; 0
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <StartBlowerTimeSelected+0xe>
    10de:	00 c0       	rjmp	.+0      	; 0x10e0 <StartBlowerTimeSelected+0x18>
    10e0:	00 00       	nop
    10e2:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <OneTimeRunFunFlag>
    10e6:	91 11       	cpse	r25, r1
    10e8:	12 c0       	rjmp	.+36     	; 0x110e <StartBlowerTimeSelected+0x46>
    10ea:	8c e7       	ldi	r24, 0x7C	; 124
    10ec:	94 e0       	ldi	r25, 0x04	; 4
    10ee:	8a dd       	rcall	.-1260   	; 0xc04 <USART0_transmitstring>
    10f0:	ce 01       	movw	r24, r28
    10f2:	92 dc       	rcall	.-1756   	; 0xa18 <EEPROM_Read2Bytes>
    10f4:	4a e0       	ldi	r20, 0x0A	; 10
    10f6:	6d ee       	ldi	r22, 0xED	; 237
    10f8:	74 e0       	ldi	r23, 0x04	; 4
    10fa:	92 d1       	rcall	.+804    	; 0x1420 <__itoa_ncheck>
    10fc:	8d ee       	ldi	r24, 0xED	; 237
    10fe:	94 e0       	ldi	r25, 0x04	; 4
    1100:	81 dd       	rcall	.-1278   	; 0xc04 <USART0_transmitstring>
    1102:	1b df       	rcall	.-458    	; 0xf3a <Send_FF_to_Display>
    1104:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <OneTimeRunFunFlag>
    1108:	9f 5f       	subi	r25, 0xFF	; 255
    110a:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <OneTimeRunFunFlag>
    110e:	81 e6       	ldi	r24, 0x61	; 97
    1110:	95 e0       	ldi	r25, 0x05	; 5
    1112:	ce dd       	rcall	.-1124   	; 0xcb0 <MatchCommand>
    1114:	89 30       	cpi	r24, 0x09	; 9
    1116:	79 f4       	brne	.+30     	; 0x1136 <StartBlowerTimeSelected+0x6e>
    1118:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    111c:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1120:	ce 01       	movw	r24, r28
    1122:	6a dc       	rcall	.-1836   	; 0x9f8 <EEPROM_Write2Bytes>
    1124:	95 e0       	ldi	r25, 0x05	; 5
    1126:	ec e0       	ldi	r30, 0x0C	; 12
    1128:	f4 e0       	ldi	r31, 0x04	; 4
    112a:	a1 e6       	ldi	r26, 0x61	; 97
    112c:	b5 e0       	ldi	r27, 0x05	; 5
    112e:	01 90       	ld	r0, Z+
    1130:	0d 92       	st	X+, r0
    1132:	9a 95       	dec	r25
    1134:	e1 f7       	brne	.-8      	; 0x112e <StartBlowerTimeSelected+0x66>
    1136:	81 e6       	ldi	r24, 0x61	; 97
    1138:	95 e0       	ldi	r25, 0x05	; 5
    113a:	ba dd       	rcall	.-1164   	; 0xcb0 <MatchCommand>
    113c:	84 36       	cpi	r24, 0x64	; 100
    113e:	09 f0       	breq	.+2      	; 0x1142 <StartBlowerTimeSelected+0x7a>
    1140:	c7 cf       	rjmp	.-114    	; 0x10d0 <StartBlowerTimeSelected+0x8>
    1142:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <OneTimeRunFunFlag>
    1146:	82 e3       	ldi	r24, 0x32	; 50
    1148:	e1 e6       	ldi	r30, 0x61	; 97
    114a:	f5 e0       	ldi	r31, 0x05	; 5
    114c:	df 01       	movw	r26, r30
    114e:	1d 92       	st	X+, r1
    1150:	8a 95       	dec	r24
    1152:	e9 f7       	brne	.-6      	; 0x114e <StartBlowerTimeSelected+0x86>
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <EndBlowerTimeSelected>:
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	c8 2f       	mov	r28, r24
    1160:	d0 e0       	ldi	r29, 0x00	; 0
    1162:	2f ef       	ldi	r18, 0xFF	; 255
    1164:	81 ee       	ldi	r24, 0xE1	; 225
    1166:	94 e0       	ldi	r25, 0x04	; 4
    1168:	21 50       	subi	r18, 0x01	; 1
    116a:	80 40       	sbci	r24, 0x00	; 0
    116c:	90 40       	sbci	r25, 0x00	; 0
    116e:	e1 f7       	brne	.-8      	; 0x1168 <EndBlowerTimeSelected+0xe>
    1170:	00 c0       	rjmp	.+0      	; 0x1172 <EndBlowerTimeSelected+0x18>
    1172:	00 00       	nop
    1174:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <OneTimeRunFunFlag>
    1178:	91 11       	cpse	r25, r1
    117a:	12 c0       	rjmp	.+36     	; 0x11a0 <EndBlowerTimeSelected+0x46>
    117c:	8c e7       	ldi	r24, 0x7C	; 124
    117e:	94 e0       	ldi	r25, 0x04	; 4
    1180:	41 dd       	rcall	.-1406   	; 0xc04 <USART0_transmitstring>
    1182:	ce 01       	movw	r24, r28
    1184:	49 dc       	rcall	.-1902   	; 0xa18 <EEPROM_Read2Bytes>
    1186:	4a e0       	ldi	r20, 0x0A	; 10
    1188:	6d ee       	ldi	r22, 0xED	; 237
    118a:	74 e0       	ldi	r23, 0x04	; 4
    118c:	49 d1       	rcall	.+658    	; 0x1420 <__itoa_ncheck>
    118e:	8d ee       	ldi	r24, 0xED	; 237
    1190:	94 e0       	ldi	r25, 0x04	; 4
    1192:	38 dd       	rcall	.-1424   	; 0xc04 <USART0_transmitstring>
    1194:	d2 de       	rcall	.-604    	; 0xf3a <Send_FF_to_Display>
    1196:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <OneTimeRunFunFlag>
    119a:	9f 5f       	subi	r25, 0xFF	; 255
    119c:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <OneTimeRunFunFlag>
    11a0:	81 e6       	ldi	r24, 0x61	; 97
    11a2:	95 e0       	ldi	r25, 0x05	; 5
    11a4:	85 dd       	rcall	.-1270   	; 0xcb0 <MatchCommand>
    11a6:	8a 30       	cpi	r24, 0x0A	; 10
    11a8:	79 f4       	brne	.+30     	; 0x11c8 <EndBlowerTimeSelected+0x6e>
    11aa:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    11ae:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    11b2:	ce 01       	movw	r24, r28
    11b4:	21 dc       	rcall	.-1982   	; 0x9f8 <EEPROM_Write2Bytes>
    11b6:	95 e0       	ldi	r25, 0x05	; 5
    11b8:	ec e0       	ldi	r30, 0x0C	; 12
    11ba:	f4 e0       	ldi	r31, 0x04	; 4
    11bc:	a1 e6       	ldi	r26, 0x61	; 97
    11be:	b5 e0       	ldi	r27, 0x05	; 5
    11c0:	01 90       	ld	r0, Z+
    11c2:	0d 92       	st	X+, r0
    11c4:	9a 95       	dec	r25
    11c6:	e1 f7       	brne	.-8      	; 0x11c0 <EndBlowerTimeSelected+0x66>
    11c8:	81 e6       	ldi	r24, 0x61	; 97
    11ca:	95 e0       	ldi	r25, 0x05	; 5
    11cc:	71 dd       	rcall	.-1310   	; 0xcb0 <MatchCommand>
    11ce:	84 36       	cpi	r24, 0x64	; 100
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <EndBlowerTimeSelected+0x7a>
    11d2:	c7 cf       	rjmp	.-114    	; 0x1162 <EndBlowerTimeSelected+0x8>
    11d4:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <OneTimeRunFunFlag>
    11d8:	82 e3       	ldi	r24, 0x32	; 50
    11da:	e1 e6       	ldi	r30, 0x61	; 97
    11dc:	f5 e0       	ldi	r31, 0x05	; 5
    11de:	df 01       	movw	r26, r30
    11e0:	1d 92       	st	X+, r1
    11e2:	8a 95       	dec	r24
    11e4:	e9 f7       	brne	.-6      	; 0x11e0 <EndBlowerTimeSelected+0x86>
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <SpinTimeSelected>:
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	c8 2f       	mov	r28, r24
    11f2:	d0 e0       	ldi	r29, 0x00	; 0
    11f4:	2f ef       	ldi	r18, 0xFF	; 255
    11f6:	81 ee       	ldi	r24, 0xE1	; 225
    11f8:	94 e0       	ldi	r25, 0x04	; 4
    11fa:	21 50       	subi	r18, 0x01	; 1
    11fc:	80 40       	sbci	r24, 0x00	; 0
    11fe:	90 40       	sbci	r25, 0x00	; 0
    1200:	e1 f7       	brne	.-8      	; 0x11fa <SpinTimeSelected+0xe>
    1202:	00 c0       	rjmp	.+0      	; 0x1204 <SpinTimeSelected+0x18>
    1204:	00 00       	nop
    1206:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <OneTimeRunFunFlag>
    120a:	91 11       	cpse	r25, r1
    120c:	12 c0       	rjmp	.+36     	; 0x1232 <SpinTimeSelected+0x46>
    120e:	8c e7       	ldi	r24, 0x7C	; 124
    1210:	94 e0       	ldi	r25, 0x04	; 4
    1212:	f8 dc       	rcall	.-1552   	; 0xc04 <USART0_transmitstring>
    1214:	ce 01       	movw	r24, r28
    1216:	00 dc       	rcall	.-2048   	; 0xa18 <EEPROM_Read2Bytes>
    1218:	4a e0       	ldi	r20, 0x0A	; 10
    121a:	6d ee       	ldi	r22, 0xED	; 237
    121c:	74 e0       	ldi	r23, 0x04	; 4
    121e:	00 d1       	rcall	.+512    	; 0x1420 <__itoa_ncheck>
    1220:	8d ee       	ldi	r24, 0xED	; 237
    1222:	94 e0       	ldi	r25, 0x04	; 4
    1224:	ef dc       	rcall	.-1570   	; 0xc04 <USART0_transmitstring>
    1226:	89 de       	rcall	.-750    	; 0xf3a <Send_FF_to_Display>
    1228:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <OneTimeRunFunFlag>
    122c:	9f 5f       	subi	r25, 0xFF	; 255
    122e:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <OneTimeRunFunFlag>
    1232:	81 e6       	ldi	r24, 0x61	; 97
    1234:	95 e0       	ldi	r25, 0x05	; 5
    1236:	3c dd       	rcall	.-1416   	; 0xcb0 <MatchCommand>
    1238:	83 31       	cpi	r24, 0x13	; 19
    123a:	79 f4       	brne	.+30     	; 0x125a <SpinTimeSelected+0x6e>
    123c:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1240:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1244:	ce 01       	movw	r24, r28
    1246:	d8 db       	rcall	.-2128   	; 0x9f8 <EEPROM_Write2Bytes>
    1248:	95 e0       	ldi	r25, 0x05	; 5
    124a:	ec e0       	ldi	r30, 0x0C	; 12
    124c:	f4 e0       	ldi	r31, 0x04	; 4
    124e:	a1 e6       	ldi	r26, 0x61	; 97
    1250:	b5 e0       	ldi	r27, 0x05	; 5
    1252:	01 90       	ld	r0, Z+
    1254:	0d 92       	st	X+, r0
    1256:	9a 95       	dec	r25
    1258:	e1 f7       	brne	.-8      	; 0x1252 <SpinTimeSelected+0x66>
    125a:	81 e6       	ldi	r24, 0x61	; 97
    125c:	95 e0       	ldi	r25, 0x05	; 5
    125e:	28 dd       	rcall	.-1456   	; 0xcb0 <MatchCommand>
    1260:	84 36       	cpi	r24, 0x64	; 100
    1262:	09 f0       	breq	.+2      	; 0x1266 <SpinTimeSelected+0x7a>
    1264:	c7 cf       	rjmp	.-114    	; 0x11f4 <SpinTimeSelected+0x8>
    1266:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <OneTimeRunFunFlag>
    126a:	82 e3       	ldi	r24, 0x32	; 50
    126c:	e1 e6       	ldi	r30, 0x61	; 97
    126e:	f5 e0       	ldi	r31, 0x05	; 5
    1270:	df 01       	movw	r26, r30
    1272:	1d 92       	st	X+, r1
    1274:	8a 95       	dec	r24
    1276:	e9 f7       	brne	.-6      	; 0x1272 <SpinTimeSelected+0x86>
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <Send_Text_On_Screen>:
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	bc 01       	movw	r22, r24
    1288:	2f ef       	ldi	r18, 0xFF	; 255
    128a:	81 ee       	ldi	r24, 0xE1	; 225
    128c:	94 e0       	ldi	r25, 0x04	; 4
    128e:	21 50       	subi	r18, 0x01	; 1
    1290:	80 40       	sbci	r24, 0x00	; 0
    1292:	90 40       	sbci	r25, 0x00	; 0
    1294:	e1 f7       	brne	.-8      	; 0x128e <Send_Text_On_Screen+0x10>
    1296:	00 c0       	rjmp	.+0      	; 0x1298 <Send_Text_On_Screen+0x1a>
    1298:	00 00       	nop
    129a:	cd ee       	ldi	r28, 0xED	; 237
    129c:	d4 e0       	ldi	r29, 0x04	; 4
    129e:	de 01       	movw	r26, r28
    12a0:	0d 90       	ld	r0, X+
    12a2:	00 20       	and	r0, r0
    12a4:	e9 f7       	brne	.-6      	; 0x12a0 <Send_Text_On_Screen+0x22>
    12a6:	11 97       	sbiw	r26, 0x01	; 1
    12a8:	9a e0       	ldi	r25, 0x0A	; 10
    12aa:	e4 e8       	ldi	r30, 0x84	; 132
    12ac:	f4 e0       	ldi	r31, 0x04	; 4
    12ae:	01 90       	ld	r0, Z+
    12b0:	0d 92       	st	X+, r0
    12b2:	9a 95       	dec	r25
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <Send_Text_On_Screen+0x30>
    12b6:	fe 01       	movw	r30, r28
    12b8:	01 90       	ld	r0, Z+
    12ba:	00 20       	and	r0, r0
    12bc:	e9 f7       	brne	.-6      	; 0x12b8 <Send_Text_On_Screen+0x3a>
    12be:	31 97       	sbiw	r30, 0x01	; 1
    12c0:	02 e2       	ldi	r16, 0x22	; 34
    12c2:	10 e0       	ldi	r17, 0x00	; 0
    12c4:	11 83       	std	Z+1, r17	; 0x01
    12c6:	00 83       	st	Z, r16
    12c8:	ce 01       	movw	r24, r28
    12ca:	68 d0       	rcall	.+208    	; 0x139c <strcat>
    12cc:	fe 01       	movw	r30, r28
    12ce:	01 90       	ld	r0, Z+
    12d0:	00 20       	and	r0, r0
    12d2:	e9 f7       	brne	.-6      	; 0x12ce <Send_Text_On_Screen+0x50>
    12d4:	31 97       	sbiw	r30, 0x01	; 1
    12d6:	11 83       	std	Z+1, r17	; 0x01
    12d8:	00 83       	st	Z, r16
    12da:	ce 01       	movw	r24, r28
    12dc:	93 dc       	rcall	.-1754   	; 0xc04 <USART0_transmitstring>
    12de:	ce 01       	movw	r24, r28
    12e0:	c2 dc       	rcall	.-1660   	; 0xc66 <USART2_transmitstring>
    12e2:	2b de       	rcall	.-938    	; 0xf3a <Send_FF_to_Display>
    12e4:	82 e3       	ldi	r24, 0x32	; 50
    12e6:	fe 01       	movw	r30, r28
    12e8:	11 92       	st	Z+, r1
    12ea:	8a 95       	dec	r24
    12ec:	e9 f7       	brne	.-6      	; 0x12e8 <Send_Text_On_Screen+0x6a>
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	08 95       	ret

000012f8 <Blower_ON>:
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	ec 01       	movw	r28, r24
    12fe:	c1 dc       	rcall	.-1662   	; 0xc82 <Timer1_init>
    1300:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <time_in_seconds>
    1304:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <time_in_seconds+0x1>
    1308:	c8 17       	cp	r28, r24
    130a:	d9 07       	cpc	r29, r25
    130c:	59 f0       	breq	.+22     	; 0x1324 <Blower_ON+0x2c>
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	89 ed       	ldi	r24, 0xD9	; 217
    1312:	94 e0       	ldi	r25, 0x04	; 4
    1314:	3f dc       	rcall	.-1922   	; 0xb94 <GPIO_WriteToPin>
    1316:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <time_in_seconds>
    131a:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <time_in_seconds+0x1>
    131e:	8c 17       	cp	r24, r28
    1320:	9d 07       	cpc	r25, r29
    1322:	a9 f7       	brne	.-22     	; 0x130e <Blower_ON+0x16>
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	89 ed       	ldi	r24, 0xD9	; 217
    1328:	94 e0       	ldi	r25, 0x04	; 4
    132a:	34 dc       	rcall	.-1944   	; 0xb94 <GPIO_WriteToPin>
    132c:	ef e6       	ldi	r30, 0x6F	; 111
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8e 7f       	andi	r24, 0xFE	; 254
    1334:	80 83       	st	Z, r24
    1336:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <Dispense_Reagent>:
    1340:	08 95       	ret

00001342 <Reagent_Wait_Time>:
		_delay_ms(1);
	}
}

void Reagent_Wait_Time(uint16_t wait_Time)
{
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	ec 01       	movw	r28, r24
	Timer1_init();
    1348:	9c dc       	rcall	.-1736   	; 0xc82 <Timer1_init>
// 	itoa(time_in_seconds, buffer, 10);
// 	USART2_transmitstring("\ntime =");
// 	USART2_transmitstring(buffer);
// 	memset(buffer, '\0', PACKET_SIZE * sizeof(buffer[0]));	// rec_bufferglob clear
	while( (wait_Time - time_in_seconds) !=0 )
    134a:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <time_in_seconds>
    134e:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <time_in_seconds+0x1>
    1352:	c8 17       	cp	r28, r24
    1354:	d9 07       	cpc	r29, r25
    1356:	69 f0       	breq	.+26     	; 0x1372 <Reagent_Wait_Time+0x30>
    1358:	8f e1       	ldi	r24, 0x1F	; 31
    135a:	9e e4       	ldi	r25, 0x4E	; 78
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <Reagent_Wait_Time+0x1a>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <Reagent_Wait_Time+0x20>
    1362:	00 00       	nop
    1364:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <time_in_seconds>
    1368:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <time_in_seconds+0x1>
    136c:	8c 17       	cp	r24, r28
    136e:	9d 07       	cpc	r25, r29
    1370:	99 f7       	brne	.-26     	; 0x1358 <Reagent_Wait_Time+0x16>
 		_delay_ms(5);
	TIMSK1 &= ~(1<<0);	// Timer1 Interrupt disable
    1372:	ef e6       	ldi	r30, 0x6F	; 111
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8e 7f       	andi	r24, 0xFE	; 254
    137a:	80 83       	st	Z, r24
	TCCR1B = 0;			// Timer1 OFF
    137c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	//USART2_transmitstring("here");
	//time_in_seconds=0;
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <__tablejump2__>:
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	88 1f       	adc	r24, r24
    138c:	8b bf       	out	0x3b, r24	; 59
    138e:	07 90       	elpm	r0, Z+
    1390:	f6 91       	elpm	r31, Z
    1392:	e0 2d       	mov	r30, r0
    1394:	19 94       	eijmp

00001396 <strtok>:
    1396:	4e e8       	ldi	r20, 0x8E	; 142
    1398:	54 e0       	ldi	r21, 0x04	; 4
    139a:	1b c0       	rjmp	.+54     	; 0x13d2 <strtok_r>

0000139c <strcat>:
    139c:	fb 01       	movw	r30, r22
    139e:	dc 01       	movw	r26, r24
    13a0:	0d 90       	ld	r0, X+
    13a2:	00 20       	and	r0, r0
    13a4:	e9 f7       	brne	.-6      	; 0x13a0 <strcat+0x4>
    13a6:	11 97       	sbiw	r26, 0x01	; 1
    13a8:	01 90       	ld	r0, Z+
    13aa:	0d 92       	st	X+, r0
    13ac:	00 20       	and	r0, r0
    13ae:	e1 f7       	brne	.-8      	; 0x13a8 <strcat+0xc>
    13b0:	08 95       	ret

000013b2 <strcmp>:
    13b2:	fb 01       	movw	r30, r22
    13b4:	dc 01       	movw	r26, r24
    13b6:	8d 91       	ld	r24, X+
    13b8:	01 90       	ld	r0, Z+
    13ba:	80 19       	sub	r24, r0
    13bc:	01 10       	cpse	r0, r1
    13be:	d9 f3       	breq	.-10     	; 0x13b6 <strcmp+0x4>
    13c0:	99 0b       	sbc	r25, r25
    13c2:	08 95       	ret

000013c4 <strcpy>:
    13c4:	fb 01       	movw	r30, r22
    13c6:	dc 01       	movw	r26, r24
    13c8:	01 90       	ld	r0, Z+
    13ca:	0d 92       	st	X+, r0
    13cc:	00 20       	and	r0, r0
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <strcpy+0x4>
    13d0:	08 95       	ret

000013d2 <strtok_r>:
    13d2:	fa 01       	movw	r30, r20
    13d4:	a1 91       	ld	r26, Z+
    13d6:	b0 81       	ld	r27, Z
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	19 f4       	brne	.+6      	; 0x13e2 <strtok_r+0x10>
    13dc:	10 97       	sbiw	r26, 0x00	; 0
    13de:	e1 f0       	breq	.+56     	; 0x1418 <strtok_r+0x46>
    13e0:	cd 01       	movw	r24, r26
    13e2:	dc 01       	movw	r26, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	0d 90       	ld	r0, X+
    13e8:	00 20       	and	r0, r0
    13ea:	11 f4       	brne	.+4      	; 0x13f0 <strtok_r+0x1e>
    13ec:	c0 01       	movw	r24, r0
    13ee:	13 c0       	rjmp	.+38     	; 0x1416 <strtok_r+0x44>
    13f0:	fb 01       	movw	r30, r22
    13f2:	21 91       	ld	r18, Z+
    13f4:	22 23       	and	r18, r18
    13f6:	19 f0       	breq	.+6      	; 0x13fe <strtok_r+0x2c>
    13f8:	20 15       	cp	r18, r0
    13fa:	d9 f7       	brne	.-10     	; 0x13f2 <strtok_r+0x20>
    13fc:	f3 cf       	rjmp	.-26     	; 0x13e4 <strtok_r+0x12>
    13fe:	fb 01       	movw	r30, r22
    1400:	21 91       	ld	r18, Z+
    1402:	20 15       	cp	r18, r0
    1404:	19 f4       	brne	.+6      	; 0x140c <strtok_r+0x3a>
    1406:	1e 92       	st	-X, r1
    1408:	11 96       	adiw	r26, 0x01	; 1
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <strtok_r+0x46>
    140c:	22 23       	and	r18, r18
    140e:	c1 f7       	brne	.-16     	; 0x1400 <strtok_r+0x2e>
    1410:	0d 90       	ld	r0, X+
    1412:	00 20       	and	r0, r0
    1414:	a1 f7       	brne	.-24     	; 0x13fe <strtok_r+0x2c>
    1416:	d0 01       	movw	r26, r0
    1418:	fa 01       	movw	r30, r20
    141a:	a1 93       	st	Z+, r26
    141c:	b0 83       	st	Z, r27
    141e:	08 95       	ret

00001420 <__itoa_ncheck>:
    1420:	bb 27       	eor	r27, r27
    1422:	4a 30       	cpi	r20, 0x0A	; 10
    1424:	31 f4       	brne	.+12     	; 0x1432 <__itoa_ncheck+0x12>
    1426:	99 23       	and	r25, r25
    1428:	22 f4       	brpl	.+8      	; 0x1432 <__itoa_ncheck+0x12>
    142a:	bd e2       	ldi	r27, 0x2D	; 45
    142c:	90 95       	com	r25
    142e:	81 95       	neg	r24
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <__utoa_common>

00001434 <__utoa_ncheck>:
    1434:	bb 27       	eor	r27, r27

00001436 <__utoa_common>:
    1436:	fb 01       	movw	r30, r22
    1438:	55 27       	eor	r21, r21
    143a:	aa 27       	eor	r26, r26
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	aa 1f       	adc	r26, r26
    1442:	a4 17       	cp	r26, r20
    1444:	10 f0       	brcs	.+4      	; 0x144a <__utoa_common+0x14>
    1446:	a4 1b       	sub	r26, r20
    1448:	83 95       	inc	r24
    144a:	50 51       	subi	r21, 0x10	; 16
    144c:	b9 f7       	brne	.-18     	; 0x143c <__utoa_common+0x6>
    144e:	a0 5d       	subi	r26, 0xD0	; 208
    1450:	aa 33       	cpi	r26, 0x3A	; 58
    1452:	08 f0       	brcs	.+2      	; 0x1456 <__utoa_common+0x20>
    1454:	a9 5d       	subi	r26, 0xD9	; 217
    1456:	a1 93       	st	Z+, r26
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	79 f7       	brne	.-34     	; 0x143a <__utoa_common+0x4>
    145c:	b1 11       	cpse	r27, r1
    145e:	b1 93       	st	Z+, r27
    1460:	11 92       	st	Z+, r1
    1462:	cb 01       	movw	r24, r22
    1464:	00 c0       	rjmp	.+0      	; 0x1466 <strrev>

00001466 <strrev>:
    1466:	dc 01       	movw	r26, r24
    1468:	fc 01       	movw	r30, r24
    146a:	67 2f       	mov	r22, r23
    146c:	71 91       	ld	r23, Z+
    146e:	77 23       	and	r23, r23
    1470:	e1 f7       	brne	.-8      	; 0x146a <strrev+0x4>
    1472:	32 97       	sbiw	r30, 0x02	; 2
    1474:	04 c0       	rjmp	.+8      	; 0x147e <strrev+0x18>
    1476:	7c 91       	ld	r23, X
    1478:	6d 93       	st	X+, r22
    147a:	70 83       	st	Z, r23
    147c:	62 91       	ld	r22, -Z
    147e:	ae 17       	cp	r26, r30
    1480:	bf 07       	cpc	r27, r31
    1482:	c8 f3       	brcs	.-14     	; 0x1476 <strrev+0x10>
    1484:	08 95       	ret

00001486 <_exit>:
    1486:	f8 94       	cli

00001488 <__stop_program>:
    1488:	ff cf       	rjmp	.-2      	; 0x1488 <__stop_program>
