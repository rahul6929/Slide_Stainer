
Slide_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800200  00001066  000010fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001066  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000088  008002c8  008002c8  000011c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f05  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001091  00000000  00000000  00004291  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012a6  00000000  00000000  00005322  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  000065c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009dd  00000000  00000000  00006988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011f9  00000000  00000000  00007365  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000855e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9d c0       	rjmp	.+314    	; 0x13c <__ctors_end>
       2:	00 00       	nop
       4:	ba c0       	rjmp	.+372    	; 0x17a <__bad_interrupt>
       6:	00 00       	nop
       8:	b8 c0       	rjmp	.+368    	; 0x17a <__bad_interrupt>
       a:	00 00       	nop
       c:	b6 c0       	rjmp	.+364    	; 0x17a <__bad_interrupt>
       e:	00 00       	nop
      10:	b4 c0       	rjmp	.+360    	; 0x17a <__bad_interrupt>
      12:	00 00       	nop
      14:	b2 c0       	rjmp	.+356    	; 0x17a <__bad_interrupt>
      16:	00 00       	nop
      18:	b0 c0       	rjmp	.+352    	; 0x17a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ae c0       	rjmp	.+348    	; 0x17a <__bad_interrupt>
      1e:	00 00       	nop
      20:	ac c0       	rjmp	.+344    	; 0x17a <__bad_interrupt>
      22:	00 00       	nop
      24:	aa c0       	rjmp	.+340    	; 0x17a <__bad_interrupt>
      26:	00 00       	nop
      28:	a8 c0       	rjmp	.+336    	; 0x17a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a6 c0       	rjmp	.+332    	; 0x17a <__bad_interrupt>
      2e:	00 00       	nop
      30:	a4 c0       	rjmp	.+328    	; 0x17a <__bad_interrupt>
      32:	00 00       	nop
      34:	a2 c0       	rjmp	.+324    	; 0x17a <__bad_interrupt>
      36:	00 00       	nop
      38:	a0 c0       	rjmp	.+320    	; 0x17a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9e c0       	rjmp	.+316    	; 0x17a <__bad_interrupt>
      3e:	00 00       	nop
      40:	9c c0       	rjmp	.+312    	; 0x17a <__bad_interrupt>
      42:	00 00       	nop
      44:	9a c0       	rjmp	.+308    	; 0x17a <__bad_interrupt>
      46:	00 00       	nop
      48:	98 c0       	rjmp	.+304    	; 0x17a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	96 c0       	rjmp	.+300    	; 0x17a <__bad_interrupt>
      4e:	00 00       	nop
      50:	40 c3       	rjmp	.+1664   	; 0x6d2 <__vector_20>
      52:	00 00       	nop
      54:	92 c0       	rjmp	.+292    	; 0x17a <__bad_interrupt>
      56:	00 00       	nop
      58:	90 c0       	rjmp	.+288    	; 0x17a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8e c0       	rjmp	.+284    	; 0x17a <__bad_interrupt>
      5e:	00 00       	nop
      60:	8c c0       	rjmp	.+280    	; 0x17a <__bad_interrupt>
      62:	00 00       	nop
      64:	c0 c2       	rjmp	.+1408   	; 0x5e6 <__vector_25>
      66:	00 00       	nop
      68:	88 c0       	rjmp	.+272    	; 0x17a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	86 c0       	rjmp	.+268    	; 0x17a <__bad_interrupt>
      6e:	00 00       	nop
      70:	84 c0       	rjmp	.+264    	; 0x17a <__bad_interrupt>
      72:	00 00       	nop
      74:	82 c0       	rjmp	.+260    	; 0x17a <__bad_interrupt>
      76:	00 00       	nop
      78:	80 c0       	rjmp	.+256    	; 0x17a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7e c0       	rjmp	.+252    	; 0x17a <__bad_interrupt>
      7e:	00 00       	nop
      80:	7c c0       	rjmp	.+248    	; 0x17a <__bad_interrupt>
      82:	00 00       	nop
      84:	7a c0       	rjmp	.+244    	; 0x17a <__bad_interrupt>
      86:	00 00       	nop
      88:	78 c0       	rjmp	.+240    	; 0x17a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	76 c0       	rjmp	.+236    	; 0x17a <__bad_interrupt>
      8e:	00 00       	nop
      90:	74 c0       	rjmp	.+232    	; 0x17a <__bad_interrupt>
      92:	00 00       	nop
      94:	72 c0       	rjmp	.+228    	; 0x17a <__bad_interrupt>
      96:	00 00       	nop
      98:	70 c0       	rjmp	.+224    	; 0x17a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6e c0       	rjmp	.+220    	; 0x17a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6c c0       	rjmp	.+216    	; 0x17a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6a c0       	rjmp	.+212    	; 0x17a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	68 c0       	rjmp	.+208    	; 0x17a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	66 c0       	rjmp	.+204    	; 0x17a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	64 c0       	rjmp	.+200    	; 0x17a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	62 c0       	rjmp	.+196    	; 0x17a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	60 c0       	rjmp	.+192    	; 0x17a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5e c0       	rjmp	.+188    	; 0x17a <__bad_interrupt>
      be:	00 00       	nop
      c0:	5c c0       	rjmp	.+184    	; 0x17a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5a c0       	rjmp	.+180    	; 0x17a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	58 c0       	rjmp	.+176    	; 0x17a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	1f c2       	rjmp	.+1086   	; 0x50c <__vector_51>
      ce:	00 00       	nop
      d0:	54 c0       	rjmp	.+168    	; 0x17a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	52 c0       	rjmp	.+164    	; 0x17a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	50 c0       	rjmp	.+160    	; 0x17a <__bad_interrupt>
      da:	00 00       	nop
      dc:	4e c0       	rjmp	.+156    	; 0x17a <__bad_interrupt>
      de:	00 00       	nop
      e0:	4c c0       	rjmp	.+152    	; 0x17a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2a 01       	movw	r4, r20
      e6:	43 01       	movw	r8, r6
      e8:	43 01       	movw	r8, r6
      ea:	43 01       	movw	r8, r6
      ec:	2d 01       	movw	r4, r26
      ee:	30 01       	movw	r6, r0
      f0:	43 01       	movw	r8, r6
      f2:	34 01       	movw	r6, r8
      f4:	38 01       	movw	r6, r16
      f6:	3c 01       	movw	r6, r24
      f8:	40 01       	movw	r8, r0
      fa:	89 01       	movw	r16, r18
      fc:	a2 01       	movw	r20, r4
      fe:	a2 01       	movw	r20, r4
     100:	a2 01       	movw	r20, r4
     102:	8c 01       	movw	r16, r24
     104:	8f 01       	movw	r16, r30
     106:	a2 01       	movw	r20, r4
     108:	93 01       	movw	r18, r6
     10a:	97 01       	movw	r18, r14
     10c:	9b 01       	movw	r18, r22
     10e:	9f 01       	movw	r18, r30
     110:	e8 01       	movw	r28, r16
     112:	01 02       	muls	r16, r17
     114:	01 02       	muls	r16, r17
     116:	01 02       	muls	r16, r17
     118:	eb 01       	movw	r28, r22
     11a:	ee 01       	movw	r28, r28
     11c:	01 02       	muls	r16, r17
     11e:	f2 01       	movw	r30, r4
     120:	f6 01       	movw	r30, r12
     122:	fa 01       	movw	r30, r20
     124:	fe 01       	movw	r30, r28
     126:	47 02       	muls	r20, r23
     128:	60 02       	muls	r22, r16
     12a:	60 02       	muls	r22, r16
     12c:	60 02       	muls	r22, r16
     12e:	4a 02       	muls	r20, r26
     130:	4d 02       	muls	r20, r29
     132:	60 02       	muls	r22, r16
     134:	51 02       	muls	r21, r17
     136:	55 02       	muls	r21, r21
     138:	59 02       	muls	r21, r25
     13a:	5d 02       	muls	r21, r29

0000013c <__ctors_end>:
     13c:	11 24       	eor	r1, r1
     13e:	1f be       	out	0x3f, r1	; 63
     140:	cf ef       	ldi	r28, 0xFF	; 255
     142:	d1 e2       	ldi	r29, 0x21	; 33
     144:	de bf       	out	0x3e, r29	; 62
     146:	cd bf       	out	0x3d, r28	; 61
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0c bf       	out	0x3c, r16	; 60

0000014c <__do_copy_data>:
     14c:	12 e0       	ldi	r17, 0x02	; 2
     14e:	a0 e0       	ldi	r26, 0x00	; 0
     150:	b2 e0       	ldi	r27, 0x02	; 2
     152:	e6 e6       	ldi	r30, 0x66	; 102
     154:	f0 e1       	ldi	r31, 0x10	; 16
     156:	00 e0       	ldi	r16, 0x00	; 0
     158:	0b bf       	out	0x3b, r16	; 59
     15a:	02 c0       	rjmp	.+4      	; 0x160 <__do_copy_data+0x14>
     15c:	07 90       	elpm	r0, Z+
     15e:	0d 92       	st	X+, r0
     160:	a8 3c       	cpi	r26, 0xC8	; 200
     162:	b1 07       	cpc	r27, r17
     164:	d9 f7       	brne	.-10     	; 0x15c <__do_copy_data+0x10>

00000166 <__do_clear_bss>:
     166:	23 e0       	ldi	r18, 0x03	; 3
     168:	a8 ec       	ldi	r26, 0xC8	; 200
     16a:	b2 e0       	ldi	r27, 0x02	; 2
     16c:	01 c0       	rjmp	.+2      	; 0x170 <.do_clear_bss_start>

0000016e <.do_clear_bss_loop>:
     16e:	1d 92       	st	X+, r1

00000170 <.do_clear_bss_start>:
     170:	a0 35       	cpi	r26, 0x50	; 80
     172:	b2 07       	cpc	r27, r18
     174:	e1 f7       	brne	.-8      	; 0x16e <.do_clear_bss_loop>
     176:	02 d0       	rcall	.+4      	; 0x17c <main>
     178:	74 c7       	rjmp	.+3816   	; 0x1062 <_exit>

0000017a <__bad_interrupt>:
     17a:	42 cf       	rjmp	.-380    	; 0x0 <__vectors>

0000017c <main>:
int main(void)
{
	//uint8_t OneTimeRunFunFlag=0;
	
	float stepdelay;
	USART2_Init(MYUBRR);
     17c:	87 e6       	ldi	r24, 0x67	; 103
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	f0 d3       	rcall	.+2016   	; 0x962 <USART2_Init>
	USART0_Init(MYUBRR);
     182:	87 e6       	ldi	r24, 0x67	; 103
     184:	90 e0       	ldi	r25, 0x00	; 0
	GpioPinInit();
     186:	cc d3       	rcall	.+1944   	; 0x920 <USART0_Init>
	USART0_transmitstring("page Main");
     188:	27 d3       	rcall	.+1614   	; 0x7d8 <GpioPinInit>
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	92 e0       	ldi	r25, 0x02	; 2
	Send_FF_to_Display();
     18e:	db d3       	rcall	.+1974   	; 0x946 <USART0_transmitstring>
     190:	55 d5       	rcall	.+2730   	; 0xc3c <Send_FF_to_Display>
	if (EEPROM_Read2Bytes(P4_REG_E_WAIT_TIME_ADD)==0xFFFF)
     192:	8e e5       	ldi	r24, 0x5E	; 94
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	ea d2       	rcall	.+1492   	; 0x76c <EEPROM_Read2Bytes>
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	09 f4       	brne	.+2      	; 0x19e <main+0x22>
		EEPROM_DisplayDataInit();
     19c:	56 d5       	rcall	.+2732   	; 0xc4a <EEPROM_DisplayDataInit>
     19e:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a0:	97 ea       	ldi	r25, 0xA7	; 167
     1a2:	a1 e6       	ldi	r26, 0x61	; 97
     1a4:	81 50       	subi	r24, 0x01	; 1
     1a6:	90 40       	sbci	r25, 0x00	; 0
     1a8:	a0 40       	sbci	r26, 0x00	; 0
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x28>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x32>
     1ae:	00 00       	nop
	_delay_ms(2000);
	GPIO_WriteToPin(&Motor_Dir, LOW	);
     1b0:	60 e0       	ldi	r22, 0x00	; 0
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	93 e0       	ldi	r25, 0x03	; 3
     1b6:	8f d3       	rcall	.+1822   	; 0x8d6 <GPIO_WriteToPin>
     1b8:	78 94       	sei
		
		
		//_delay_ms(2000);
	} */
    /* Replace with your application code */
	sei();		// To enable Global Interrupt, cli(); for disable
     1ba:	c4 e1       	ldi	r28, 0x14	; 20
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     1bc:	bf ef       	ldi	r27, 0xFF	; 255
     1be:	21 ee       	ldi	r18, 0xE1	; 225
     1c0:	84 e0       	ldi	r24, 0x04	; 4
     1c2:	b1 50       	subi	r27, 0x01	; 1
     1c4:	20 40       	sbci	r18, 0x00	; 0
     1c6:	80 40       	sbci	r24, 0x00	; 0
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x46>
     1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x50>
    while (1) 
    {	
		
		
		_delay_ms(DELAY_IN_LOOP);
		USART2_transmitstring("at Home ");
     1cc:	00 00       	nop
     1ce:	8d e0       	ldi	r24, 0x0D	; 13
     1d0:	92 e0       	ldi	r25, 0x02	; 2
     1d2:	ea d3       	rcall	.+2004   	; 0x9a8 <USART2_transmitstring>
		//USART0_transmitstring("Home ");
		switch(MatchCommand(rec_bufferglob))
     1d4:	8c e3       	ldi	r24, 0x3C	; 60
     1d6:	93 e0       	ldi	r25, 0x03	; 3
     1d8:	f5 d3       	rcall	.+2026   	; 0x9c4 <MatchCommand>
     1da:	83 30       	cpi	r24, 0x03	; 3
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <main+0x64>
     1de:	cc c0       	rjmp	.+408    	; 0x378 <main+0x1fc>
     1e0:	30 f4       	brcc	.+12     	; 0x1ee <main+0x72>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	59 f0       	breq	.+22     	; 0x1fc <main+0x80>
     1e6:	82 30       	cpi	r24, 0x02	; 2
     1e8:	09 f4       	brne	.+2      	; 0x1ec <main+0x70>
     1ea:	67 c0       	rjmp	.+206    	; 0x2ba <main+0x13e>
     1ec:	e7 cf       	rjmp	.-50     	; 0x1bc <main+0x40>
     1ee:	84 30       	cpi	r24, 0x04	; 4
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <main+0x78>
     1f2:	21 c1       	rjmp	.+578    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     1f4:	82 31       	cpi	r24, 0x12	; 18
     1f6:	09 f4       	brne	.+2      	; 0x1fa <main+0x7e>
     1f8:	7d c1       	rjmp	.+762    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     1fa:	e0 cf       	rjmp	.-64     	; 0x1bc <main+0x40>
     1fc:	9f ef       	ldi	r25, 0xFF	; 255
     1fe:	a1 ee       	ldi	r26, 0xE1	; 225
     200:	b4 e0       	ldi	r27, 0x04	; 4
     202:	91 50       	subi	r25, 0x01	; 1
     204:	a0 40       	sbci	r26, 0x00	; 0
     206:	b0 40       	sbci	r27, 0x00	; 0
     208:	e1 f7       	brne	.-8      	; 0x202 <main+0x86>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x90>
     20c:	00 00       	nop
					{	
						
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     20e:	8c e3       	ldi	r24, 0x3C	; 60
     210:	93 e0       	ldi	r25, 0x03	; 3
     212:	d8 d3       	rcall	.+1968   	; 0x9c4 <MatchCommand>
     214:	85 30       	cpi	r24, 0x05	; 5
     216:	39 f0       	breq	.+14     	; 0x226 <main+0xaa>
     218:	86 30       	cpi	r24, 0x06	; 6
     21a:	09 f0       	breq	.+2      	; 0x21e <main+0xa2>
     21c:	40 c0       	rjmp	.+128    	; 0x29e <main+0x122>
							{	
								case START:
									{
										USART2_transmitstring("Start");
     21e:	86 e1       	ldi	r24, 0x16	; 22
     220:	92 e0       	ldi	r25, 0x02	; 2
     222:	c2 d3       	rcall	.+1924   	; 0x9a8 <USART2_transmitstring>
     224:	3c c0       	rjmp	.+120    	; 0x29e <main+0x122>
     226:	2f ef       	ldi	r18, 0xFF	; 255
     228:	81 ee       	ldi	r24, 0xE1	; 225
     22a:	94 e0       	ldi	r25, 0x04	; 4
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	80 40       	sbci	r24, 0x00	; 0
     230:	90 40       	sbci	r25, 0x00	; 0
     232:	e1 f7       	brne	.-8      	; 0x22c <main+0xb0>
     234:	00 c0       	rjmp	.+0      	; 0x236 <main+0xba>
     236:	00 00       	nop
								case P1EDIT:
									{	
										while(1)
										{
											_delay_ms(DELAY_IN_LOOP);
											switch(MatchCommand(rec_bufferglob))
     238:	8c e3       	ldi	r24, 0x3C	; 60
     23a:	93 e0       	ldi	r25, 0x03	; 3
     23c:	c3 d3       	rcall	.+1926   	; 0x9c4 <MatchCommand>
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	fc 01       	movw	r30, r24
     242:	37 97       	sbiw	r30, 0x07	; 7
     244:	eb 30       	cpi	r30, 0x0B	; 11
     246:	f1 05       	cpc	r31, r1
     248:	f0 f4       	brcc	.+60     	; 0x286 <main+0x10a>
     24a:	88 27       	eor	r24, r24
     24c:	ee 58       	subi	r30, 0x8E	; 142
     24e:	ff 4f       	sbci	r31, 0xFF	; 255
											{
												case REG_START_BLO_TIME:
												{
													StartBlowerTimeSelected(P1_REG_A_START_BLOWER_TIME_ADD);
     250:	8f 4f       	sbci	r24, 0xFF	; 255
     252:	92 c6       	rjmp	.+3364   	; 0xf78 <__tablejump2__>
													break;
     254:	80 e0       	ldi	r24, 0x00	; 0
												}
													
												case REG_END_BLO_TIME:
												{
													EndBlowerTimeSelected(P1_REG_A_END_BLOWER_TIME_ADD);
     256:	b5 d5       	rcall	.+2922   	; 0xdc2 <StartBlowerTimeSelected>
     258:	16 c0       	rjmp	.+44     	; 0x286 <main+0x10a>
													break;
     25a:	82 e0       	ldi	r24, 0x02	; 2
												}
												
												case REGA:
												{
													ReagentSelected(P1_REG_A_QTY_ADD, P1_REG_A_WAIT_TIME_ADD);
     25c:	fb d5       	rcall	.+3062   	; 0xe54 <EndBlowerTimeSelected>
     25e:	13 c0       	rjmp	.+38     	; 0x286 <main+0x10a>
     260:	66 e0       	ldi	r22, 0x06	; 6
													break;
     262:	84 e0       	ldi	r24, 0x04	; 4
												}
												
												case REGB:
												{
													ReagentSelected(P1_REG_B_QTY_ADD, P1_REG_B_WAIT_TIME_ADD);
     264:	05 d5       	rcall	.+2570   	; 0xc70 <ReagentSelected>
     266:	0f c0       	rjmp	.+30     	; 0x286 <main+0x10a>
     268:	6a e0       	ldi	r22, 0x0A	; 10
													break;
     26a:	88 e0       	ldi	r24, 0x08	; 8
												}
												
												case REGC:
												{
													ReagentSelected(P1_REG_C_QTY_ADD, P1_REG_C_WAIT_TIME_ADD);
     26c:	01 d5       	rcall	.+2562   	; 0xc70 <ReagentSelected>
     26e:	0b c0       	rjmp	.+22     	; 0x286 <main+0x10a>
     270:	6e e0       	ldi	r22, 0x0E	; 14
     272:	8c e0       	ldi	r24, 0x0C	; 12
													break;
     274:	fd d4       	rcall	.+2554   	; 0xc70 <ReagentSelected>
												}
												
												case REGD:
												{
													ReagentSelected(P1_REG_D_QTY_ADD, P1_REG_D_WAIT_TIME_ADD);
     276:	07 c0       	rjmp	.+14     	; 0x286 <main+0x10a>
     278:	62 e1       	ldi	r22, 0x12	; 18
     27a:	80 e1       	ldi	r24, 0x10	; 16
													break;
     27c:	f9 d4       	rcall	.+2546   	; 0xc70 <ReagentSelected>
												}
												case REGE:
												{
													ReagentSelected(P1_REG_E_QTY_ADD, P1_REG_E_WAIT_TIME_ADD);
     27e:	03 c0       	rjmp	.+6      	; 0x286 <main+0x10a>
     280:	66 e1       	ldi	r22, 0x16	; 22
     282:	8c 2f       	mov	r24, r28
     284:	f5 d4       	rcall	.+2538   	; 0xc70 <ReagentSelected>
													break;
												}
													
											}
											
											if (MatchCommand(rec_bufferglob)==BACK)
     286:	8c e3       	ldi	r24, 0x3C	; 60
     288:	93 e0       	ldi	r25, 0x03	; 3
     28a:	9c d3       	rcall	.+1848   	; 0x9c4 <MatchCommand>
     28c:	84 36       	cpi	r24, 0x64	; 100
     28e:	59 f6       	brne	.-106    	; 0x226 <main+0xaa>
     290:	ec e3       	ldi	r30, 0x3C	; 60
											{
												memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     292:	f3 e0       	ldi	r31, 0x03	; 3
     294:	df 01       	movw	r26, r30
     296:	2c 2f       	mov	r18, r28
     298:	1d 92       	st	X+, r1
     29a:	2a 95       	dec	r18
     29c:	e9 f7       	brne	.-6      	; 0x298 <main+0x11c>
     29e:	8c e3       	ldi	r24, 0x3C	; 60
										break;
									}
									
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     2a0:	93 e0       	ldi	r25, 0x03	; 3
     2a2:	90 d3       	rcall	.+1824   	; 0x9c4 <MatchCommand>
     2a4:	84 36       	cpi	r24, 0x64	; 100
     2a6:	09 f0       	breq	.+2      	; 0x2aa <main+0x12e>
     2a8:	a9 cf       	rjmp	.-174    	; 0x1fc <main+0x80>
     2aa:	ec e3       	ldi	r30, 0x3C	; 60
								{
									memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     2ac:	f3 e0       	ldi	r31, 0x03	; 3
     2ae:	df 01       	movw	r26, r30
     2b0:	2c 2f       	mov	r18, r28
     2b2:	1d 92       	st	X+, r1
     2b4:	2a 95       	dec	r18
     2b6:	e9 f7       	brne	.-6      	; 0x2b2 <main+0x136>
									break;
								}
						}
						
						break;
     2b8:	81 cf       	rjmp	.-254    	; 0x1bc <main+0x40>
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	91 ee       	ldi	r25, 0xE1	; 225
     2be:	a4 e0       	ldi	r26, 0x04	; 4
     2c0:	81 50       	subi	r24, 0x01	; 1
     2c2:	90 40       	sbci	r25, 0x00	; 0
     2c4:	a0 40       	sbci	r26, 0x00	; 0
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x144>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x14e>
     2ca:	00 00       	nop
			case PROGRAM_2:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     2cc:	8c e3       	ldi	r24, 0x3C	; 60
     2ce:	93 e0       	ldi	r25, 0x03	; 3
     2d0:	79 d3       	rcall	.+1778   	; 0x9c4 <MatchCommand>
     2d2:	85 30       	cpi	r24, 0x05	; 5
     2d4:	39 f0       	breq	.+14     	; 0x2e4 <main+0x168>
     2d6:	86 30       	cpi	r24, 0x06	; 6
     2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0x160>
     2da:	40 c0       	rjmp	.+128    	; 0x35c <main+0x1e0>
							{
								case START:
								{
									USART2_transmitstring("Start");
     2dc:	86 e1       	ldi	r24, 0x16	; 22
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	63 d3       	rcall	.+1734   	; 0x9a8 <USART2_transmitstring>
     2e2:	3c c0       	rjmp	.+120    	; 0x35c <main+0x1e0>
     2e4:	bf ef       	ldi	r27, 0xFF	; 255
     2e6:	21 ee       	ldi	r18, 0xE1	; 225
     2e8:	84 e0       	ldi	r24, 0x04	; 4
     2ea:	b1 50       	subi	r27, 0x01	; 1
     2ec:	20 40       	sbci	r18, 0x00	; 0
     2ee:	80 40       	sbci	r24, 0x00	; 0
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     2f0:	e1 f7       	brne	.-8      	; 0x2ea <main+0x16e>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x178>
     2f4:	00 00       	nop
     2f6:	8c e3       	ldi	r24, 0x3C	; 60
     2f8:	93 e0       	ldi	r25, 0x03	; 3
     2fa:	64 d3       	rcall	.+1736   	; 0x9c4 <MatchCommand>
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	fc 01       	movw	r30, r24
     300:	37 97       	sbiw	r30, 0x07	; 7
     302:	eb 30       	cpi	r30, 0x0B	; 11
     304:	f1 05       	cpc	r31, r1
     306:	f0 f4       	brcc	.+60     	; 0x344 <main+0x1c8>
     308:	88 27       	eor	r24, r24
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P2_REG_A_START_BLOWER_TIME_ADD);
     30a:	e3 58       	subi	r30, 0x83	; 131
     30c:	ff 4f       	sbci	r31, 0xFF	; 255
												break;
     30e:	8f 4f       	sbci	r24, 0xFF	; 255
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P2_REG_A_END_BLOWER_TIME_ADD);
     310:	33 c6       	rjmp	.+3174   	; 0xf78 <__tablejump2__>
     312:	88 e1       	ldi	r24, 0x18	; 24
     314:	56 d5       	rcall	.+2732   	; 0xdc2 <StartBlowerTimeSelected>
												break;
     316:	16 c0       	rjmp	.+44     	; 0x344 <main+0x1c8>
											}
											
											case REGA:
											{
												ReagentSelected(P2_REG_A_QTY_ADD, P2_REG_A_WAIT_TIME_ADD);
     318:	8a e1       	ldi	r24, 0x1A	; 26
     31a:	9c d5       	rcall	.+2872   	; 0xe54 <EndBlowerTimeSelected>
     31c:	13 c0       	rjmp	.+38     	; 0x344 <main+0x1c8>
     31e:	6e e1       	ldi	r22, 0x1E	; 30
												break;
											}
											
											case REGB:
											{
												ReagentSelected(P2_REG_B_QTY_ADD, P2_REG_B_WAIT_TIME_ADD);
     320:	8c e1       	ldi	r24, 0x1C	; 28
     322:	a6 d4       	rcall	.+2380   	; 0xc70 <ReagentSelected>
     324:	0f c0       	rjmp	.+30     	; 0x344 <main+0x1c8>
     326:	62 e2       	ldi	r22, 0x22	; 34
												break;
     328:	80 e2       	ldi	r24, 0x20	; 32
											}
											
											case REGC:
											{
												ReagentSelected(P2_REG_C_QTY_ADD, P2_REG_C_WAIT_TIME_ADD);
     32a:	a2 d4       	rcall	.+2372   	; 0xc70 <ReagentSelected>
     32c:	0b c0       	rjmp	.+22     	; 0x344 <main+0x1c8>
     32e:	66 e2       	ldi	r22, 0x26	; 38
     330:	84 e2       	ldi	r24, 0x24	; 36
												break;
     332:	9e d4       	rcall	.+2364   	; 0xc70 <ReagentSelected>
											}
											
											case REGD:
											{
												ReagentSelected(P2_REG_D_QTY_ADD, P2_REG_D_WAIT_TIME_ADD);
     334:	07 c0       	rjmp	.+14     	; 0x344 <main+0x1c8>
     336:	6a e2       	ldi	r22, 0x2A	; 42
     338:	88 e2       	ldi	r24, 0x28	; 40
     33a:	9a d4       	rcall	.+2356   	; 0xc70 <ReagentSelected>
												break;
     33c:	03 c0       	rjmp	.+6      	; 0x344 <main+0x1c8>
											}
											case REGE:
											{
												ReagentSelected(P2_REG_E_QTY_ADD, P2_REG_E_WAIT_TIME_ADD);
     33e:	6e e2       	ldi	r22, 0x2E	; 46
     340:	8c e2       	ldi	r24, 0x2C	; 44
     342:	96 d4       	rcall	.+2348   	; 0xc70 <ReagentSelected>
     344:	8c e3       	ldi	r24, 0x3C	; 60
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     346:	93 e0       	ldi	r25, 0x03	; 3
     348:	3d d3       	rcall	.+1658   	; 0x9c4 <MatchCommand>
     34a:	84 36       	cpi	r24, 0x64	; 100
     34c:	59 f6       	brne	.-106    	; 0x2e4 <main+0x168>
     34e:	ec e3       	ldi	r30, 0x3C	; 60
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     350:	f3 e0       	ldi	r31, 0x03	; 3
     352:	df 01       	movw	r26, r30
     354:	2c 2f       	mov	r18, r28
     356:	1d 92       	st	X+, r1
     358:	2a 95       	dec	r18
     35a:	e9 f7       	brne	.-6      	; 0x356 <main+0x1da>
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     35c:	8c e3       	ldi	r24, 0x3C	; 60
     35e:	93 e0       	ldi	r25, 0x03	; 3
     360:	31 d3       	rcall	.+1634   	; 0x9c4 <MatchCommand>
     362:	84 36       	cpi	r24, 0x64	; 100
     364:	09 f0       	breq	.+2      	; 0x368 <main+0x1ec>
     366:	a9 cf       	rjmp	.-174    	; 0x2ba <main+0x13e>
     368:	ec e3       	ldi	r30, 0x3C	; 60
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     36a:	f3 e0       	ldi	r31, 0x03	; 3
     36c:	df 01       	movw	r26, r30
     36e:	2c 2f       	mov	r18, r28
     370:	1d 92       	st	X+, r1
     372:	2a 95       	dec	r18
     374:	e9 f7       	brne	.-6      	; 0x370 <main+0x1f4>
								break;
							}
						}
						break;
     376:	22 cf       	rjmp	.-444    	; 0x1bc <main+0x40>
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	91 ee       	ldi	r25, 0xE1	; 225
     37c:	a4 e0       	ldi	r26, 0x04	; 4
     37e:	81 50       	subi	r24, 0x01	; 1
     380:	90 40       	sbci	r25, 0x00	; 0
     382:	a0 40       	sbci	r26, 0x00	; 0
     384:	e1 f7       	brne	.-8      	; 0x37e <main+0x202>
     386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x20c>
			case PROGRAM_3:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     388:	00 00       	nop
     38a:	8c e3       	ldi	r24, 0x3C	; 60
     38c:	93 e0       	ldi	r25, 0x03	; 3
     38e:	1a d3       	rcall	.+1588   	; 0x9c4 <MatchCommand>
     390:	85 30       	cpi	r24, 0x05	; 5
     392:	39 f0       	breq	.+14     	; 0x3a2 <main+0x226>
     394:	86 30       	cpi	r24, 0x06	; 6
							{
								case START:
								{
									USART2_transmitstring("Start");
     396:	09 f0       	breq	.+2      	; 0x39a <main+0x21e>
     398:	40 c0       	rjmp	.+128    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     39a:	86 e1       	ldi	r24, 0x16	; 22
									break;
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	04 d3       	rcall	.+1544   	; 0x9a8 <USART2_transmitstring>
     3a0:	3c c0       	rjmp	.+120    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3a2:	bf ef       	ldi	r27, 0xFF	; 255
     3a4:	21 ee       	ldi	r18, 0xE1	; 225
     3a6:	84 e0       	ldi	r24, 0x04	; 4
     3a8:	b1 50       	subi	r27, 0x01	; 1
     3aa:	20 40       	sbci	r18, 0x00	; 0
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     3ac:	80 40       	sbci	r24, 0x00	; 0
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <main+0x22c>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x236>
     3b2:	00 00       	nop
     3b4:	8c e3       	ldi	r24, 0x3C	; 60
     3b6:	93 e0       	ldi	r25, 0x03	; 3
     3b8:	05 d3       	rcall	.+1546   	; 0x9c4 <MatchCommand>
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	37 97       	sbiw	r30, 0x07	; 7
     3c0:	eb 30       	cpi	r30, 0x0B	; 11
     3c2:	f1 05       	cpc	r31, r1
     3c4:	f0 f4       	brcc	.+60     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3c6:	88 27       	eor	r24, r24
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P3_REG_A_START_BLOWER_TIME_ADD);
     3c8:	e8 57       	subi	r30, 0x78	; 120
     3ca:	ff 4f       	sbci	r31, 0xFF	; 255
     3cc:	8f 4f       	sbci	r24, 0xFF	; 255
												break;
     3ce:	d4 c5       	rjmp	.+2984   	; 0xf78 <__tablejump2__>
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P3_REG_A_END_BLOWER_TIME_ADD);
     3d0:	80 e3       	ldi	r24, 0x30	; 48
     3d2:	f7 d4       	rcall	.+2542   	; 0xdc2 <StartBlowerTimeSelected>
     3d4:	16 c0       	rjmp	.+44     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
												break;
     3d6:	82 e3       	ldi	r24, 0x32	; 50
											}
											
											case REGA:
											{
												ReagentSelected(P3_REG_A_QTY_ADD, P3_REG_A_WAIT_TIME_ADD);
     3d8:	3d d5       	rcall	.+2682   	; 0xe54 <EndBlowerTimeSelected>
     3da:	13 c0       	rjmp	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3dc:	66 e3       	ldi	r22, 0x36	; 54
     3de:	84 e3       	ldi	r24, 0x34	; 52
												break;
     3e0:	47 d4       	rcall	.+2190   	; 0xc70 <ReagentSelected>
											}
											
											case REGB:
											{
												ReagentSelected(P3_REG_B_QTY_ADD, P3_REG_B_WAIT_TIME_ADD);
     3e2:	0f c0       	rjmp	.+30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3e4:	6a e3       	ldi	r22, 0x3A	; 58
     3e6:	88 e3       	ldi	r24, 0x38	; 56
     3e8:	43 d4       	rcall	.+2182   	; 0xc70 <ReagentSelected>
												break;
     3ea:	0b c0       	rjmp	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
											}
											
											case REGC:
											{
												ReagentSelected(P3_REG_C_QTY_ADD, P3_REG_C_WAIT_TIME_ADD);
     3ec:	6e e3       	ldi	r22, 0x3E	; 62
     3ee:	8c e3       	ldi	r24, 0x3C	; 60
     3f0:	3f d4       	rcall	.+2174   	; 0xc70 <ReagentSelected>
     3f2:	07 c0       	rjmp	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
												break;
											}
											
											case REGD:
											{
												ReagentSelected(P3_REG_D_QTY_ADD, P3_REG_D_WAIT_TIME_ADD);
     3f4:	62 e4       	ldi	r22, 0x42	; 66
     3f6:	80 e4       	ldi	r24, 0x40	; 64
     3f8:	3b d4       	rcall	.+2166   	; 0xc70 <ReagentSelected>
     3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
												break;
     3fc:	66 e4       	ldi	r22, 0x46	; 70
											}
											case REGE:
											{
												ReagentSelected(P3_REG_E_QTY_ADD, P3_REG_E_WAIT_TIME_ADD);
     3fe:	84 e4       	ldi	r24, 0x44	; 68
     400:	37 d4       	rcall	.+2158   	; 0xc70 <ReagentSelected>
     402:	8c e3       	ldi	r24, 0x3C	; 60
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     404:	93 e0       	ldi	r25, 0x03	; 3
     406:	de d2       	rcall	.+1468   	; 0x9c4 <MatchCommand>
     408:	84 36       	cpi	r24, 0x64	; 100
     40a:	59 f6       	brne	.-106    	; 0x3a2 <main+0x226>
     40c:	ec e3       	ldi	r30, 0x3C	; 60
     40e:	f3 e0       	ldi	r31, 0x03	; 3
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     410:	df 01       	movw	r26, r30
     412:	2c 2f       	mov	r18, r28
     414:	1d 92       	st	X+, r1
     416:	2a 95       	dec	r18
     418:	e9 f7       	brne	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41a:	8c e3       	ldi	r24, 0x3C	; 60
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	d2 d2       	rcall	.+1444   	; 0x9c4 <MatchCommand>
     420:	84 36       	cpi	r24, 0x64	; 100
     422:	09 f0       	breq	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     424:	a9 cf       	rjmp	.-174    	; 0x378 <main+0x1fc>
     426:	ec e3       	ldi	r30, 0x3C	; 60
     428:	f3 e0       	ldi	r31, 0x03	; 3
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     42a:	df 01       	movw	r26, r30
     42c:	2c 2f       	mov	r18, r28
     42e:	1d 92       	st	X+, r1
     430:	2a 95       	dec	r18
     432:	e9 f7       	brne	.-6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     434:	c3 ce       	rjmp	.-634    	; 0x1bc <main+0x40>
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	91 ee       	ldi	r25, 0xE1	; 225
     43a:	a4 e0       	ldi	r26, 0x04	; 4
     43c:	81 50       	subi	r24, 0x01	; 1
     43e:	90 40       	sbci	r25, 0x00	; 0
     440:	a0 40       	sbci	r26, 0x00	; 0
			case PROGRAM_4:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     442:	e1 f7       	brne	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     446:	00 00       	nop
     448:	8c e3       	ldi	r24, 0x3C	; 60
     44a:	93 e0       	ldi	r25, 0x03	; 3
     44c:	bb d2       	rcall	.+1398   	; 0x9c4 <MatchCommand>
     44e:	85 30       	cpi	r24, 0x05	; 5
							{
								case START:
								{
									USART2_transmitstring("Start");
     450:	39 f0       	breq	.+14     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     452:	86 30       	cpi	r24, 0x06	; 6
     454:	09 f0       	breq	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     456:	40 c0       	rjmp	.+128    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     458:	86 e1       	ldi	r24, 0x16	; 22
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	a5 d2       	rcall	.+1354   	; 0x9a8 <USART2_transmitstring>
     45e:	3c c0       	rjmp	.+120    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     460:	bf ef       	ldi	r27, 0xFF	; 255
     462:	21 ee       	ldi	r18, 0xE1	; 225
     464:	84 e0       	ldi	r24, 0x04	; 4
     466:	b1 50       	subi	r27, 0x01	; 1
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     468:	20 40       	sbci	r18, 0x00	; 0
     46a:	80 40       	sbci	r24, 0x00	; 0
     46c:	e1 f7       	brne	.-8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     470:	00 00       	nop
     472:	8c e3       	ldi	r24, 0x3C	; 60
     474:	93 e0       	ldi	r25, 0x03	; 3
     476:	a6 d2       	rcall	.+1356   	; 0x9c4 <MatchCommand>
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	fc 01       	movw	r30, r24
     47c:	37 97       	sbiw	r30, 0x07	; 7
     47e:	eb 30       	cpi	r30, 0x0B	; 11
     480:	f1 05       	cpc	r31, r1
     482:	f0 f4       	brcc	.+60     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     484:	88 27       	eor	r24, r24
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P4_REG_A_START_BLOWER_TIME_ADD);
     486:	ed 56       	subi	r30, 0x6D	; 109
     488:	ff 4f       	sbci	r31, 0xFF	; 255
     48a:	8f 4f       	sbci	r24, 0xFF	; 255
												break;
     48c:	75 c5       	rjmp	.+2794   	; 0xf78 <__tablejump2__>
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P4_REG_A_END_BLOWER_TIME_ADD);
     48e:	88 e4       	ldi	r24, 0x48	; 72
     490:	98 d4       	rcall	.+2352   	; 0xdc2 <StartBlowerTimeSelected>
     492:	16 c0       	rjmp	.+44     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
												break;
     494:	8a e4       	ldi	r24, 0x4A	; 74
											}
											
											case REGA:
											{
												ReagentSelected(P4_REG_A_QTY_ADD, P4_REG_A_WAIT_TIME_ADD);
     496:	de d4       	rcall	.+2492   	; 0xe54 <EndBlowerTimeSelected>
     498:	13 c0       	rjmp	.+38     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     49a:	6e e4       	ldi	r22, 0x4E	; 78
												break;
     49c:	8c e4       	ldi	r24, 0x4C	; 76
											}
											
											case REGB:
											{
												ReagentSelected(P4_REG_B_QTY_ADD, P4_REG_B_WAIT_TIME_ADD);
     49e:	e8 d3       	rcall	.+2000   	; 0xc70 <ReagentSelected>
     4a0:	0f c0       	rjmp	.+30     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4a2:	62 e5       	ldi	r22, 0x52	; 82
     4a4:	80 e5       	ldi	r24, 0x50	; 80
												break;
     4a6:	e4 d3       	rcall	.+1992   	; 0xc70 <ReagentSelected>
											}
											
											case REGC:
											{
												ReagentSelected(P4_REG_C_QTY_ADD, P4_REG_C_WAIT_TIME_ADD);
     4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4aa:	66 e5       	ldi	r22, 0x56	; 86
     4ac:	84 e5       	ldi	r24, 0x54	; 84
     4ae:	e0 d3       	rcall	.+1984   	; 0xc70 <ReagentSelected>
												break;
     4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
											}
											
											case REGD:
											{
												ReagentSelected(P4_REG_D_QTY_ADD, P4_REG_D_WAIT_TIME_ADD);
     4b2:	6a e5       	ldi	r22, 0x5A	; 90
     4b4:	88 e5       	ldi	r24, 0x58	; 88
     4b6:	dc d3       	rcall	.+1976   	; 0xc70 <ReagentSelected>
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
												break;
     4ba:	6e e5       	ldi	r22, 0x5E	; 94
											}
											case REGE:
											{
												ReagentSelected(P4_REG_E_QTY_ADD, P4_REG_E_WAIT_TIME_ADD);
     4bc:	8c e5       	ldi	r24, 0x5C	; 92
     4be:	d8 d3       	rcall	.+1968   	; 0xc70 <ReagentSelected>
     4c0:	8c e3       	ldi	r24, 0x3C	; 60
     4c2:	93 e0       	ldi	r25, 0x03	; 3
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     4c4:	7f d2       	rcall	.+1278   	; 0x9c4 <MatchCommand>
     4c6:	84 36       	cpi	r24, 0x64	; 100
     4c8:	59 f6       	brne	.-106    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     4ca:	ec e3       	ldi	r30, 0x3C	; 60
     4cc:	f3 e0       	ldi	r31, 0x03	; 3
     4ce:	df 01       	movw	r26, r30
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     4d0:	2c 2f       	mov	r18, r28
     4d2:	1d 92       	st	X+, r1
     4d4:	2a 95       	dec	r18
     4d6:	e9 f7       	brne	.-6      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4d8:	8c e3       	ldi	r24, 0x3C	; 60
     4da:	93 e0       	ldi	r25, 0x03	; 3
     4dc:	73 d2       	rcall	.+1254   	; 0x9c4 <MatchCommand>
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     4de:	84 36       	cpi	r24, 0x64	; 100
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4e2:	a9 cf       	rjmp	.-174    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     4e4:	ec e3       	ldi	r30, 0x3C	; 60
     4e6:	f3 e0       	ldi	r31, 0x03	; 3
     4e8:	df 01       	movw	r26, r30
     4ea:	2c 2f       	mov	r18, r28
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     4ec:	1d 92       	st	X+, r1
     4ee:	2a 95       	dec	r18
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4f2:	64 ce       	rjmp	.-824    	; 0x1bc <main+0x40>
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	91 ee       	ldi	r25, 0xE1	; 225
     4f8:	a4 e0       	ldi	r26, 0x04	; 4
								break;
							}
						}
						break;
     4fa:	81 50       	subi	r24, 0x01	; 1
     4fc:	90 40       	sbci	r25, 0x00	; 0
     4fe:	a0 40       	sbci	r26, 0x00	; 0
     500:	e1 f7       	brne	.-8      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     502:	00 c0       	rjmp	.+0      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     504:	00 00       	nop
     506:	80 e6       	ldi	r24, 0x60	; 96
     508:	ee d4       	rcall	.+2524   	; 0xee6 <SpinTimeSelected>
     50a:	58 ce       	rjmp	.-848    	; 0x1bc <main+0x40>

0000050c <__vector_51>:
     50c:	1f 92       	push	r1
			case SERVICE:
				{
					while(1)
					{
						_delay_ms(DELAY_IN_LOOP);
						SpinTimeSelected(SPIN_TIME_ADD);
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
						break;
					}
					break;
     514:	11 24       	eor	r1, r1
}



ISR(USART2_RX_vect)
{
     516:	0b b6       	in	r0, 0x3b	; 59
     518:	0f 92       	push	r0
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	cf 93       	push	r28
     530:	ef 93       	push	r30
     532:	ff 93       	push	r31
	unsigned char rec = USART2_Receive();
     534:	29 d2       	rcall	.+1106   	; 0x988 <USART2_Receive>
     536:	c8 2f       	mov	r28, r24
	USART2_Transmit(rec);
     538:	1f d2       	rcall	.+1086   	; 0x978 <USART2_Transmit>
     53a:	cc 33       	cpi	r28, 0x3C	; 60
	//USART0_Transmit(rec);
	if ( (rec == '<') && (rec_start == 0)) // new packet receiving
     53c:	c1 f4       	brne	.+48     	; 0x56e <__vector_51+0x62>
     53e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <rec_start>
     542:	81 11       	cpse	r24, r1
     544:	16 c0       	rjmp	.+44     	; 0x572 <__vector_51+0x66>
     546:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <myindex>
	{
		myindex = 0;
     54a:	81 e0       	ldi	r24, 0x01	; 1
		rec_start = 1;
     54c:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <rec_start>
     550:	84 e1       	ldi	r24, 0x14	; 20
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// rec_buff clear
     552:	e8 ed       	ldi	r30, 0xD8	; 216
     554:	f2 e0       	ldi	r31, 0x02	; 2
     556:	df 01       	movw	r26, r30
     558:	98 2f       	mov	r25, r24
     55a:	1d 92       	st	X+, r1
     55c:	9a 95       	dec	r25
     55e:	e9 f7       	brne	.-6      	; 0x55a <__vector_51+0x4e>
     560:	ec e3       	ldi	r30, 0x3C	; 60
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     562:	f3 e0       	ldi	r31, 0x03	; 3
     564:	df 01       	movw	r26, r30
     566:	1d 92       	st	X+, r1
     568:	8a 95       	dec	r24
     56a:	e9 f7       	brne	.-6      	; 0x566 <__vector_51+0x5a>
     56c:	28 c0       	rjmp	.+80     	; 0x5be <__vector_51+0xb2>
     56e:	ce 33       	cpi	r28, 0x3E	; 62
	}
	
	else if ( ( rec != '>') && (rec_start == 1)  )				// collecting data in buffer
     570:	11 f1       	breq	.+68     	; 0x5b6 <__vector_51+0xaa>
     572:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <rec_start>
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	11 f5       	brne	.+68     	; 0x5be <__vector_51+0xb2>
     57a:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <myindex>
	{
		rec_buff[myindex] = rec;
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	e8 52       	subi	r30, 0x28	; 40
     582:	fd 4f       	sbci	r31, 0xFD	; 253
     584:	c0 83       	st	Z, r28
     586:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <myindex>
		myindex++;
     58a:	8f 5f       	subi	r24, 0xFF	; 255
     58c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <myindex>
     590:	16 c0       	rjmp	.+44     	; 0x5be <__vector_51+0xb2>
     592:	68 ed       	ldi	r22, 0xD8	; 216
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )					// ending character received
	{
		strcpy(rec_bufferglob, rec_buff);						// copy data into rec_bufferglob
     594:	72 e0       	ldi	r23, 0x02	; 2
     596:	8c e3       	ldi	r24, 0x3C	; 60
     598:	93 e0       	ldi	r25, 0x03	; 3
     59a:	02 d5       	rcall	.+2564   	; 0xfa0 <strcpy>
     59c:	81 e0       	ldi	r24, 0x01	; 1
		rec_stop = 1;											// rec_stop flag 1
     59e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <rec_stop>
     5a2:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <rec_start>
		rec_start = 0;											// clear flag
     5a6:	84 e1       	ldi	r24, 0x14	; 20
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// clearing rec_buff so that it can receive new data
     5a8:	e8 ed       	ldi	r30, 0xD8	; 216
     5aa:	f2 e0       	ldi	r31, 0x02	; 2
     5ac:	df 01       	movw	r26, r30
     5ae:	1d 92       	st	X+, r1
     5b0:	8a 95       	dec	r24
     5b2:	e9 f7       	brne	.-6      	; 0x5ae <__vector_51+0xa2>
     5b4:	04 c0       	rjmp	.+8      	; 0x5be <__vector_51+0xb2>
		
	}
}
     5b6:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <rec_start>
		myindex++;
		//rec = '\0';
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )					// ending character received
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	51 f3       	breq	.-44     	; 0x592 <__vector_51+0x86>
     5be:	ff 91       	pop	r31
		rec_stop = 1;											// rec_stop flag 1
		rec_start = 0;											// clear flag
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// clearing rec_buff so that it can receive new data
		
	}
}
     5c0:	ef 91       	pop	r30
     5c2:	cf 91       	pop	r28
     5c4:	bf 91       	pop	r27
     5c6:	af 91       	pop	r26
     5c8:	9f 91       	pop	r25
     5ca:	8f 91       	pop	r24
     5cc:	7f 91       	pop	r23
     5ce:	6f 91       	pop	r22
     5d0:	5f 91       	pop	r21
     5d2:	4f 91       	pop	r20
     5d4:	3f 91       	pop	r19
     5d6:	2f 91       	pop	r18
     5d8:	0f 90       	pop	r0
     5da:	0b be       	out	0x3b, r0	; 59
     5dc:	0f 90       	pop	r0
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	0f 90       	pop	r0
     5e2:	1f 90       	pop	r1
     5e4:	18 95       	reti

000005e6 <__vector_25>:
     5e6:	1f 92       	push	r1



ISR(USART0_RX_vect)
{
     5e8:	0f 92       	push	r0
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	0f 92       	push	r0
     5ee:	11 24       	eor	r1, r1
     5f0:	0b b6       	in	r0, 0x3b	; 59
     5f2:	0f 92       	push	r0
     5f4:	2f 93       	push	r18
     5f6:	3f 93       	push	r19
     5f8:	4f 93       	push	r20
     5fa:	5f 93       	push	r21
     5fc:	6f 93       	push	r22
     5fe:	7f 93       	push	r23
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	af 93       	push	r26
     606:	bf 93       	push	r27
     608:	cf 93       	push	r28
     60a:	ef 93       	push	r30
     60c:	ff 93       	push	r31
	unsigned char rec = USART0_Receive();
     60e:	c4 d1       	rcall	.+904    	; 0x998 <USART0_Receive>
     610:	c8 2f       	mov	r28, r24
	USART2_Transmit(rec);
     612:	b2 d1       	rcall	.+868    	; 0x978 <USART2_Transmit>
     614:	cc 33       	cpi	r28, 0x3C	; 60
	//USART0_Transmit(rec);
	if ( (rec == '<') && (rec_start == 0)) // new packet
     616:	c1 f4       	brne	.+48     	; 0x648 <__vector_25+0x62>
     618:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <rec_start>
     61c:	81 11       	cpse	r24, r1
     61e:	16 c0       	rjmp	.+44     	; 0x64c <__vector_25+0x66>
     620:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <myindex>
	{
		myindex = 0;
     624:	81 e0       	ldi	r24, 0x01	; 1
		rec_start = 1;
     626:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <rec_start>
     62a:	84 e1       	ldi	r24, 0x14	; 20
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));
     62c:	e8 ed       	ldi	r30, 0xD8	; 216
     62e:	f2 e0       	ldi	r31, 0x02	; 2
     630:	df 01       	movw	r26, r30
     632:	98 2f       	mov	r25, r24
     634:	1d 92       	st	X+, r1
     636:	9a 95       	dec	r25
     638:	e9 f7       	brne	.-6      	; 0x634 <__vector_25+0x4e>
     63a:	ec e3       	ldi	r30, 0x3C	; 60
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));
     63c:	f3 e0       	ldi	r31, 0x03	; 3
     63e:	df 01       	movw	r26, r30
     640:	1d 92       	st	X+, r1
     642:	8a 95       	dec	r24
     644:	e9 f7       	brne	.-6      	; 0x640 <__vector_25+0x5a>
     646:	23 c0       	rjmp	.+70     	; 0x68e <__vector_25+0xa8>
     648:	ce 33       	cpi	r28, 0x3E	; 62
	}
	
	else if ( ( rec != '>') && (rec_start == 1)  )	// collecting data in buffer
     64a:	51 f1       	breq	.+84     	; 0x6a0 <__vector_25+0xba>
     64c:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <rec_start>
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	e9 f4       	brne	.+58     	; 0x68e <__vector_25+0xa8>
     654:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <myindex>
	{
		rec_buff[myindex] = rec;
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	e8 52       	subi	r30, 0x28	; 40
     65c:	fd 4f       	sbci	r31, 0xFD	; 253
     65e:	c0 83       	st	Z, r28
     660:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <myindex>
		myindex++;
     664:	8f 5f       	subi	r24, 0xFF	; 255
     666:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <myindex>
     66a:	11 c0       	rjmp	.+34     	; 0x68e <__vector_25+0xa8>
     66c:	68 ed       	ldi	r22, 0xD8	; 216
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )
	{
		strcpy(rec_bufferglob, rec_buff);
     66e:	72 e0       	ldi	r23, 0x02	; 2
     670:	8c e3       	ldi	r24, 0x3C	; 60
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	95 d4       	rcall	.+2346   	; 0xfa0 <strcpy>
     676:	81 e0       	ldi	r24, 0x01	; 1
		//USART2_transmitstring(rec_bufferglob);
		rec_stop = 1;
     678:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <rec_stop>
     67c:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <rec_start>
		rec_start = 0;
     680:	84 e1       	ldi	r24, 0x14	; 20
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));
     682:	e8 ed       	ldi	r30, 0xD8	; 216
     684:	f2 e0       	ldi	r31, 0x02	; 2
     686:	df 01       	movw	r26, r30
     688:	1d 92       	st	X+, r1
     68a:	8a 95       	dec	r24
     68c:	e9 f7       	brne	.-6      	; 0x688 <__vector_25+0xa2>
     68e:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <myindex>
		
	}
	if(myindex > (PACKET_SIZE -1 ))
     692:	84 31       	cpi	r24, 0x14	; 20
     694:	50 f0       	brcs	.+20     	; 0x6aa <__vector_25+0xc4>
     696:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <myindex>
	{
		myindex = 0;
     69a:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <rec_start>
		rec_start = 0;
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <__vector_25+0xc4>
	}
}
     6a0:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <rec_start>
		myindex++;
		//rec = '\0';
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )
     6a4:	81 30       	cpi	r24, 0x01	; 1
     6a6:	99 f7       	brne	.-26     	; 0x68e <__vector_25+0xa8>
     6a8:	e1 cf       	rjmp	.-62     	; 0x66c <__vector_25+0x86>
     6aa:	ff 91       	pop	r31
	if(myindex > (PACKET_SIZE -1 ))
	{
		myindex = 0;
		rec_start = 0;
	}
}
     6ac:	ef 91       	pop	r30
     6ae:	cf 91       	pop	r28
     6b0:	bf 91       	pop	r27
     6b2:	af 91       	pop	r26
     6b4:	9f 91       	pop	r25
     6b6:	8f 91       	pop	r24
     6b8:	7f 91       	pop	r23
     6ba:	6f 91       	pop	r22
     6bc:	5f 91       	pop	r21
     6be:	4f 91       	pop	r20
     6c0:	3f 91       	pop	r19
     6c2:	2f 91       	pop	r18
     6c4:	0f 90       	pop	r0
     6c6:	0b be       	out	0x3b, r0	; 59
     6c8:	0f 90       	pop	r0
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	0f 90       	pop	r0
     6ce:	1f 90       	pop	r1
     6d0:	18 95       	reti

000006d2 <__vector_20>:
     6d2:	1f 92       	push	r1



///////////////////////////////////---- ISR for TIMER1_OVF_vect -----////////////////////////////////////////
ISR(TIMER1_OVF_vect)
{
     6d4:	0f 92       	push	r0
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	0f 92       	push	r0
     6da:	11 24       	eor	r1, r1
     6dc:	8f 93       	push	r24
     6de:	9f 93       	push	r25
	
	txtime--;
     6e0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <txtime>
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <txtime>
	if (txtime == 0)
     6ea:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <txtime>
     6ee:	81 11       	cpse	r24, r1
     6f0:	0c c0       	rjmp	.+24     	; 0x70a <__vector_20+0x38>
	{
		txflag=1;		// flag ON to indicate time has over
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <txflag>
		TCNT1 =0xC2F7;	// This value will generate 1 Sec delay for prescaler 1024 and 16 mhz crystel
     6f8:	87 ef       	ldi	r24, 0xF7	; 247
     6fa:	92 ec       	ldi	r25, 0xC2	; 194
     6fc:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     700:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
		TCCR1B = (5<<0);	// prescalar 1024
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	}
	//USART2_transmitstring("int ");
	TCNT1 =0xC2F7;	// This value will generate 1 Sec delay for prescaler 1024 and 16 mhz crystel
     70a:	87 ef       	ldi	r24, 0xF7	; 247
     70c:	92 ec       	ldi	r25, 0xC2	; 194
     70e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     712:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCCR1B = (5<<0);	// prescaler 1024
     716:	85 e0       	ldi	r24, 0x05	; 5
     718:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
}
     71c:	9f 91       	pop	r25
     71e:	8f 91       	pop	r24
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <EEPROM_write>:



void GPIO_TogglePin( GPIO_Config *pNAME )
{
	*(pNAME->PORT) ^= (1<< pNAME->PinNumber);
     72a:	f8 94       	cli
     72c:	f9 99       	sbic	0x1f, 1	; 31
     72e:	fe cf       	rjmp	.-4      	; 0x72c <EEPROM_write+0x2>
     730:	92 bd       	out	0x22, r25	; 34
     732:	81 bd       	out	0x21, r24	; 33
     734:	60 bd       	out	0x20, r22	; 32
     736:	fa 9a       	sbi	0x1f, 2	; 31
     738:	f9 9a       	sbi	0x1f, 1	; 31
     73a:	78 94       	sei
     73c:	08 95       	ret

0000073e <EEPROM_read>:
     73e:	f9 99       	sbic	0x1f, 1	; 31
     740:	fe cf       	rjmp	.-4      	; 0x73e <EEPROM_read>
     742:	92 bd       	out	0x22, r25	; 34
     744:	81 bd       	out	0x21, r24	; 33
     746:	f8 9a       	sbi	0x1f, 0	; 31
     748:	80 b5       	in	r24, 0x20	; 32
     74a:	08 95       	ret

0000074c <EEPROM_Write2Bytes>:
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
     754:	17 2f       	mov	r17, r23
     756:	f8 94       	cli
     758:	e8 df       	rcall	.-48     	; 0x72a <EEPROM_write>
     75a:	61 2f       	mov	r22, r17
     75c:	ce 01       	movw	r24, r28
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	e4 df       	rcall	.-56     	; 0x72a <EEPROM_write>
     762:	78 94       	sei
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	08 95       	ret

0000076c <EEPROM_Read2Bytes>:
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	8c 01       	movw	r16, r24
     774:	e4 df       	rcall	.-56     	; 0x73e <EEPROM_read>
     776:	c8 2f       	mov	r28, r24
     778:	c8 01       	movw	r24, r16
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	e0 df       	rcall	.-64     	; 0x73e <EEPROM_read>
     77e:	2c 2f       	mov	r18, r28
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	a9 01       	movw	r20, r18
     784:	58 2b       	or	r21, r24
     786:	ca 01       	movw	r24, r20
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	08 95       	ret

00000790 <GPIO_Init>:
     790:	fc 01       	movw	r30, r24
     792:	83 81       	ldd	r24, Z+3	; 0x03
     794:	81 11       	cpse	r24, r1
     796:	11 c0       	rjmp	.+34     	; 0x7ba <GPIO_Init+0x2a>
     798:	30 81       	ld	r19, Z
     79a:	01 80       	ldd	r0, Z+1	; 0x01
     79c:	f2 81       	ldd	r31, Z+2	; 0x02
     79e:	e0 2d       	mov	r30, r0
     7a0:	22 91       	ld	r18, -Z
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <GPIO_Init+0x1c>
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	3a 95       	dec	r19
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <GPIO_Init+0x18>
     7b0:	80 95       	com	r24
     7b2:	90 95       	com	r25
     7b4:	82 23       	and	r24, r18
     7b6:	80 83       	st	Z, r24
     7b8:	08 95       	ret
     7ba:	30 81       	ld	r19, Z
     7bc:	01 80       	ldd	r0, Z+1	; 0x01
     7be:	f2 81       	ldd	r31, Z+2	; 0x02
     7c0:	e0 2d       	mov	r30, r0
     7c2:	22 91       	ld	r18, -Z
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <GPIO_Init+0x3e>
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	3a 95       	dec	r19
     7d0:	e2 f7       	brpl	.-8      	; 0x7ca <GPIO_Init+0x3a>
     7d2:	82 2b       	or	r24, r18
     7d4:	80 83       	st	Z, r24
     7d6:	08 95       	ret

000007d8 <GpioPinInit>:
     7d8:	e4 e0       	ldi	r30, 0x04	; 4
     7da:	f3 e0       	ldi	r31, 0x03	; 3
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	83 83       	std	Z+3, r24	; 0x03
     7e0:	80 83       	st	Z, r24
     7e2:	22 e0       	ldi	r18, 0x02	; 2
     7e4:	31 e0       	ldi	r19, 0x01	; 1
     7e6:	32 83       	std	Z+2, r19	; 0x02
     7e8:	21 83       	std	Z+1, r18	; 0x01
     7ea:	e8 ef       	ldi	r30, 0xF8	; 248
     7ec:	f2 e0       	ldi	r31, 0x02	; 2
     7ee:	13 82       	std	Z+3, r1	; 0x03
     7f0:	10 82       	st	Z, r1
     7f2:	32 83       	std	Z+2, r19	; 0x02
     7f4:	21 83       	std	Z+1, r18	; 0x01
     7f6:	e0 e0       	ldi	r30, 0x00	; 0
     7f8:	f3 e0       	ldi	r31, 0x03	; 3
     7fa:	83 83       	std	Z+3, r24	; 0x03
     7fc:	10 82       	st	Z, r1
     7fe:	44 e3       	ldi	r20, 0x34	; 52
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	52 83       	std	Z+2, r21	; 0x02
     804:	41 83       	std	Z+1, r20	; 0x01
     806:	ec ee       	ldi	r30, 0xEC	; 236
     808:	f2 e0       	ldi	r31, 0x02	; 2
     80a:	83 83       	std	Z+3, r24	; 0x03
     80c:	10 82       	st	Z, r1
     80e:	48 e2       	ldi	r20, 0x28	; 40
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	52 83       	std	Z+2, r21	; 0x02
     814:	41 83       	std	Z+1, r20	; 0x01
     816:	e0 ed       	ldi	r30, 0xD0	; 208
     818:	f2 e0       	ldi	r31, 0x02	; 2
     81a:	83 83       	std	Z+3, r24	; 0x03
     81c:	96 e0       	ldi	r25, 0x06	; 6
     81e:	90 83       	st	Z, r25
     820:	45 e2       	ldi	r20, 0x25	; 37
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	52 83       	std	Z+2, r21	; 0x02
     826:	41 83       	std	Z+1, r20	; 0x01
     828:	e0 ef       	ldi	r30, 0xF0	; 240
     82a:	f2 e0       	ldi	r31, 0x02	; 2
     82c:	83 83       	std	Z+3, r24	; 0x03
     82e:	65 e0       	ldi	r22, 0x05	; 5
     830:	60 83       	st	Z, r22
     832:	52 83       	std	Z+2, r21	; 0x02
     834:	41 83       	std	Z+1, r20	; 0x01
     836:	e4 e2       	ldi	r30, 0x24	; 36
     838:	f3 e0       	ldi	r31, 0x03	; 3
     83a:	83 83       	std	Z+3, r24	; 0x03
     83c:	94 e0       	ldi	r25, 0x04	; 4
     83e:	90 83       	st	Z, r25
     840:	52 83       	std	Z+2, r21	; 0x02
     842:	41 83       	std	Z+1, r20	; 0x01
     844:	ec e1       	ldi	r30, 0x1C	; 28
     846:	f3 e0       	ldi	r31, 0x03	; 3
     848:	83 83       	std	Z+3, r24	; 0x03
     84a:	60 83       	st	Z, r22
     84c:	32 83       	std	Z+2, r19	; 0x02
     84e:	21 83       	std	Z+1, r18	; 0x01
     850:	ec ef       	ldi	r30, 0xFC	; 252
     852:	f2 e0       	ldi	r31, 0x02	; 2
     854:	83 83       	std	Z+3, r24	; 0x03
     856:	90 83       	st	Z, r25
     858:	32 83       	std	Z+2, r19	; 0x02
     85a:	21 83       	std	Z+1, r18	; 0x01
     85c:	e0 e2       	ldi	r30, 0x20	; 32
     85e:	f3 e0       	ldi	r31, 0x03	; 3
     860:	83 83       	std	Z+3, r24	; 0x03
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	90 83       	st	Z, r25
     866:	32 83       	std	Z+2, r19	; 0x02
     868:	21 83       	std	Z+1, r18	; 0x01
     86a:	e4 ed       	ldi	r30, 0xD4	; 212
     86c:	f2 e0       	ldi	r31, 0x02	; 2
     86e:	83 83       	std	Z+3, r24	; 0x03
     870:	27 e0       	ldi	r18, 0x07	; 7
     872:	20 83       	st	Z, r18
     874:	2b e2       	ldi	r18, 0x2B	; 43
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	32 83       	std	Z+2, r19	; 0x02
     87a:	21 83       	std	Z+1, r18	; 0x01
     87c:	e4 ef       	ldi	r30, 0xF4	; 244
     87e:	f2 e0       	ldi	r31, 0x02	; 2
     880:	83 83       	std	Z+3, r24	; 0x03
     882:	90 83       	st	Z, r25
     884:	8b e0       	ldi	r24, 0x0B	; 11
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	92 83       	std	Z+2, r25	; 0x02
     88a:	81 83       	std	Z+1, r24	; 0x01
     88c:	88 ef       	ldi	r24, 0xF8	; 248
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	7f df       	rcall	.-258    	; 0x790 <GPIO_Init>
     892:	84 e0       	ldi	r24, 0x04	; 4
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	7c df       	rcall	.-264    	; 0x790 <GPIO_Init>
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	93 e0       	ldi	r25, 0x03	; 3
     89c:	79 df       	rcall	.-270    	; 0x790 <GPIO_Init>
     89e:	8c ee       	ldi	r24, 0xEC	; 236
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	76 df       	rcall	.-276    	; 0x790 <GPIO_Init>
     8a4:	80 ed       	ldi	r24, 0xD0	; 208
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	73 df       	rcall	.-282    	; 0x790 <GPIO_Init>
     8aa:	80 ef       	ldi	r24, 0xF0	; 240
     8ac:	92 e0       	ldi	r25, 0x02	; 2
     8ae:	70 df       	rcall	.-288    	; 0x790 <GPIO_Init>
     8b0:	84 e2       	ldi	r24, 0x24	; 36
     8b2:	93 e0       	ldi	r25, 0x03	; 3
     8b4:	6d df       	rcall	.-294    	; 0x790 <GPIO_Init>
     8b6:	8c e1       	ldi	r24, 0x1C	; 28
     8b8:	93 e0       	ldi	r25, 0x03	; 3
     8ba:	6a df       	rcall	.-300    	; 0x790 <GPIO_Init>
     8bc:	8c ef       	ldi	r24, 0xFC	; 252
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	67 df       	rcall	.-306    	; 0x790 <GPIO_Init>
     8c2:	80 e2       	ldi	r24, 0x20	; 32
     8c4:	93 e0       	ldi	r25, 0x03	; 3
     8c6:	64 df       	rcall	.-312    	; 0x790 <GPIO_Init>
     8c8:	84 ed       	ldi	r24, 0xD4	; 212
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	61 df       	rcall	.-318    	; 0x790 <GPIO_Init>
     8ce:	84 ef       	ldi	r24, 0xF4	; 244
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	5e cf       	rjmp	.-324    	; 0x790 <GPIO_Init>
     8d4:	08 95       	ret

000008d6 <GPIO_WriteToPin>:
     8d6:	61 30       	cpi	r22, 0x01	; 1
     8d8:	89 f4       	brne	.+34     	; 0x8fc <GPIO_WriteToPin+0x26>
     8da:	dc 01       	movw	r26, r24
     8dc:	3c 91       	ld	r19, X
     8de:	11 96       	adiw	r26, 0x01	; 1
     8e0:	ed 91       	ld	r30, X+
     8e2:	fc 91       	ld	r31, X
     8e4:	12 97       	sbiw	r26, 0x02	; 2
     8e6:	20 81       	ld	r18, Z
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <GPIO_WriteToPin+0x1c>
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	3a 95       	dec	r19
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <GPIO_WriteToPin+0x18>
     8f6:	82 2b       	or	r24, r18
     8f8:	80 83       	st	Z, r24
     8fa:	08 95       	ret
     8fc:	fc 01       	movw	r30, r24
     8fe:	30 81       	ld	r19, Z
     900:	01 80       	ldd	r0, Z+1	; 0x01
     902:	f2 81       	ldd	r31, Z+2	; 0x02
     904:	e0 2d       	mov	r30, r0
     906:	20 81       	ld	r18, Z
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	02 c0       	rjmp	.+4      	; 0x912 <GPIO_WriteToPin+0x3c>
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	3a 95       	dec	r19
     914:	e2 f7       	brpl	.-8      	; 0x90e <GPIO_WriteToPin+0x38>
     916:	80 95       	com	r24
     918:	90 95       	com	r25
     91a:	82 23       	and	r24, r18
     91c:	80 83       	st	Z, r24
     91e:	08 95       	ret

00000920 <USART0_Init>:
     920:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     924:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     928:	88 e9       	ldi	r24, 0x98	; 152
     92a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     92e:	86 e0       	ldi	r24, 0x06	; 6
     930:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     934:	08 95       	ret

00000936 <USART0_Transmit>:
     936:	e0 ec       	ldi	r30, 0xC0	; 192
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	90 81       	ld	r25, Z
     93c:	95 ff       	sbrs	r25, 5
     93e:	fd cf       	rjmp	.-6      	; 0x93a <USART0_Transmit+0x4>
     940:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     944:	08 95       	ret

00000946 <USART0_transmitstring>:
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ec 01       	movw	r28, r24
     94c:	88 81       	ld	r24, Y
     94e:	88 23       	and	r24, r24
     950:	29 f0       	breq	.+10     	; 0x95c <USART0_transmitstring+0x16>
     952:	21 96       	adiw	r28, 0x01	; 1
     954:	f0 df       	rcall	.-32     	; 0x936 <USART0_Transmit>
     956:	89 91       	ld	r24, Y+
     958:	81 11       	cpse	r24, r1
     95a:	fc cf       	rjmp	.-8      	; 0x954 <USART0_transmitstring+0xe>
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <USART2_Init>:
     962:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     966:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     96a:	88 e9       	ldi	r24, 0x98	; 152
     96c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     970:	86 e0       	ldi	r24, 0x06	; 6
     972:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     976:	08 95       	ret

00000978 <USART2_Transmit>:
     978:	e0 ed       	ldi	r30, 0xD0	; 208
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	90 81       	ld	r25, Z
     97e:	95 ff       	sbrs	r25, 5
     980:	fd cf       	rjmp	.-6      	; 0x97c <USART2_Transmit+0x4>
     982:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     986:	08 95       	ret

00000988 <USART2_Receive>:
     988:	e0 ed       	ldi	r30, 0xD0	; 208
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	88 23       	and	r24, r24
     990:	ec f7       	brge	.-6      	; 0x98c <USART2_Receive+0x4>
     992:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     996:	08 95       	ret

00000998 <USART0_Receive>:
     998:	e0 ec       	ldi	r30, 0xC0	; 192
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	88 23       	and	r24, r24
     9a0:	ec f7       	brge	.-6      	; 0x99c <USART0_Receive+0x4>
     9a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     9a6:	08 95       	ret

000009a8 <USART2_transmitstring>:
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	ec 01       	movw	r28, r24
     9ae:	88 81       	ld	r24, Y
     9b0:	88 23       	and	r24, r24
     9b2:	29 f0       	breq	.+10     	; 0x9be <USART2_transmitstring+0x16>
     9b4:	21 96       	adiw	r28, 0x01	; 1
     9b6:	e0 df       	rcall	.-64     	; 0x978 <USART2_Transmit>
     9b8:	89 91       	ld	r24, Y+
     9ba:	81 11       	cpse	r24, r1
     9bc:	fc cf       	rjmp	.-8      	; 0x9b6 <USART2_transmitstring+0xe>
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	08 95       	ret

000009c4 <MatchCommand>:
}


// This function will return a number based on string sent by nextion display
uint8_t MatchCommand(char *command)
{	
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	ec 01       	movw	r28, r24
	
	
	//numberhold = 0;
	unsigned char *token = NULL;
	token = strtok(command, "|");
     9ce:	6c e1       	ldi	r22, 0x1C	; 28
     9d0:	72 e0       	ldi	r23, 0x02	; 2
     9d2:	da d2       	rcall	.+1460   	; 0xf88 <strtok>
     9d4:	8c 01       	movw	r16, r24
	
	//memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));
	
	/* These if statement used to find out which icon pressed */
	if (!strcmp(command, "program 1"))
     9d6:	6e e1       	ldi	r22, 0x1E	; 30
     9d8:	72 e0       	ldi	r23, 0x02	; 2
     9da:	ce 01       	movw	r24, r28
     9dc:	d8 d2       	rcall	.+1456   	; 0xf8e <strcmp>
     9de:	89 2b       	or	r24, r25
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <MatchCommand+0x20>
     9e2:	08 c1       	rjmp	.+528    	; 0xbf4 <MatchCommand+0x230>
		return PROGRAM_1;
	if (!strcmp(command, "program 2"))
     9e4:	68 e2       	ldi	r22, 0x28	; 40
     9e6:	72 e0       	ldi	r23, 0x02	; 2
     9e8:	ce 01       	movw	r24, r28
     9ea:	d1 d2       	rcall	.+1442   	; 0xf8e <strcmp>
     9ec:	89 2b       	or	r24, r25
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <MatchCommand+0x2e>
     9f0:	03 c1       	rjmp	.+518    	; 0xbf8 <MatchCommand+0x234>
		return PROGRAM_2;
	if (!strcmp(command, "program 3"))
     9f2:	62 e3       	ldi	r22, 0x32	; 50
     9f4:	72 e0       	ldi	r23, 0x02	; 2
     9f6:	ce 01       	movw	r24, r28
     9f8:	ca d2       	rcall	.+1428   	; 0xf8e <strcmp>
     9fa:	89 2b       	or	r24, r25
     9fc:	09 f4       	brne	.+2      	; 0xa00 <MatchCommand+0x3c>
     9fe:	fe c0       	rjmp	.+508    	; 0xbfc <MatchCommand+0x238>
		return PROGRAM_3;
	if (!strcmp(command, "program 4"))
     a00:	6c e3       	ldi	r22, 0x3C	; 60
     a02:	72 e0       	ldi	r23, 0x02	; 2
     a04:	ce 01       	movw	r24, r28
     a06:	c3 d2       	rcall	.+1414   	; 0xf8e <strcmp>
     a08:	89 2b       	or	r24, r25
     a0a:	09 f4       	brne	.+2      	; 0xa0e <MatchCommand+0x4a>
     a0c:	f9 c0       	rjmp	.+498    	; 0xc00 <MatchCommand+0x23c>
		return PROGRAM_4;
	if (!strcmp(command, "p1edit"))
     a0e:	66 e4       	ldi	r22, 0x46	; 70
     a10:	72 e0       	ldi	r23, 0x02	; 2
     a12:	ce 01       	movw	r24, r28
     a14:	bc d2       	rcall	.+1400   	; 0xf8e <strcmp>
     a16:	89 2b       	or	r24, r25
     a18:	09 f4       	brne	.+2      	; 0xa1c <MatchCommand+0x58>
     a1a:	f4 c0       	rjmp	.+488    	; 0xc04 <MatchCommand+0x240>
		return P1EDIT;
	if (!strcmp(command, "start"))
     a1c:	6d e4       	ldi	r22, 0x4D	; 77
     a1e:	72 e0       	ldi	r23, 0x02	; 2
     a20:	ce 01       	movw	r24, r28
     a22:	b5 d2       	rcall	.+1386   	; 0xf8e <strcmp>
     a24:	89 2b       	or	r24, r25
     a26:	09 f4       	brne	.+2      	; 0xa2a <MatchCommand+0x66>
     a28:	ef c0       	rjmp	.+478    	; 0xc08 <MatchCommand+0x244>
		return START;
	if (!strcmp(command, "back"))
     a2a:	63 e5       	ldi	r22, 0x53	; 83
     a2c:	72 e0       	ldi	r23, 0x02	; 2
     a2e:	ce 01       	movw	r24, r28
     a30:	ae d2       	rcall	.+1372   	; 0xf8e <strcmp>
     a32:	89 2b       	or	r24, r25
     a34:	09 f4       	brne	.+2      	; 0xa38 <MatchCommand+0x74>
     a36:	ea c0       	rjmp	.+468    	; 0xc0c <MatchCommand+0x248>
		return BACK;
	if (!strcmp(command, "stblotym"))
     a38:	68 e5       	ldi	r22, 0x58	; 88
     a3a:	72 e0       	ldi	r23, 0x02	; 2
     a3c:	ce 01       	movw	r24, r28
     a3e:	a7 d2       	rcall	.+1358   	; 0xf8e <strcmp>
     a40:	89 2b       	or	r24, r25
     a42:	09 f4       	brne	.+2      	; 0xa46 <MatchCommand+0x82>
     a44:	e5 c0       	rjmp	.+458    	; 0xc10 <MatchCommand+0x24c>
		return REG_START_BLO_TIME;
	if (!strcmp(command, "endblotym"))
     a46:	61 e6       	ldi	r22, 0x61	; 97
     a48:	72 e0       	ldi	r23, 0x02	; 2
     a4a:	ce 01       	movw	r24, r28
     a4c:	a0 d2       	rcall	.+1344   	; 0xf8e <strcmp>
     a4e:	89 2b       	or	r24, r25
     a50:	09 f4       	brne	.+2      	; 0xa54 <MatchCommand+0x90>
     a52:	e0 c0       	rjmp	.+448    	; 0xc14 <MatchCommand+0x250>
		return REG_END_BLO_TIME;
	if (!strcmp(command, "rega"))
     a54:	6b e6       	ldi	r22, 0x6B	; 107
     a56:	72 e0       	ldi	r23, 0x02	; 2
     a58:	ce 01       	movw	r24, r28
     a5a:	99 d2       	rcall	.+1330   	; 0xf8e <strcmp>
     a5c:	89 2b       	or	r24, r25
     a5e:	09 f4       	brne	.+2      	; 0xa62 <MatchCommand+0x9e>
     a60:	db c0       	rjmp	.+438    	; 0xc18 <MatchCommand+0x254>
		return REGA;
	if (!strcmp(command, "regb"))
     a62:	60 e7       	ldi	r22, 0x70	; 112
     a64:	72 e0       	ldi	r23, 0x02	; 2
     a66:	ce 01       	movw	r24, r28
     a68:	92 d2       	rcall	.+1316   	; 0xf8e <strcmp>
     a6a:	89 2b       	or	r24, r25
     a6c:	09 f4       	brne	.+2      	; 0xa70 <MatchCommand+0xac>
     a6e:	d6 c0       	rjmp	.+428    	; 0xc1c <MatchCommand+0x258>
		return REGB;
	if (!strcmp(command, "regc"))
     a70:	65 e7       	ldi	r22, 0x75	; 117
     a72:	72 e0       	ldi	r23, 0x02	; 2
     a74:	ce 01       	movw	r24, r28
     a76:	8b d2       	rcall	.+1302   	; 0xf8e <strcmp>
     a78:	89 2b       	or	r24, r25
     a7a:	09 f4       	brne	.+2      	; 0xa7e <MatchCommand+0xba>
     a7c:	d1 c0       	rjmp	.+418    	; 0xc20 <MatchCommand+0x25c>
		return REGC;
	if (!strcmp(command, "regd"))
     a7e:	6a e7       	ldi	r22, 0x7A	; 122
     a80:	72 e0       	ldi	r23, 0x02	; 2
     a82:	ce 01       	movw	r24, r28
     a84:	84 d2       	rcall	.+1288   	; 0xf8e <strcmp>
     a86:	89 2b       	or	r24, r25
     a88:	09 f4       	brne	.+2      	; 0xa8c <MatchCommand+0xc8>
     a8a:	cc c0       	rjmp	.+408    	; 0xc24 <MatchCommand+0x260>
		return REGD;
	if (!strcmp(command, "rege"))
     a8c:	6f e7       	ldi	r22, 0x7F	; 127
     a8e:	72 e0       	ldi	r23, 0x02	; 2
     a90:	ce 01       	movw	r24, r28
     a92:	7d d2       	rcall	.+1274   	; 0xf8e <strcmp>
     a94:	89 2b       	or	r24, r25
     a96:	09 f4       	brne	.+2      	; 0xa9a <MatchCommand+0xd6>
     a98:	c7 c0       	rjmp	.+398    	; 0xc28 <MatchCommand+0x264>
		return REGE;
	if (!strcmp(command, "service"))
     a9a:	64 e8       	ldi	r22, 0x84	; 132
     a9c:	72 e0       	ldi	r23, 0x02	; 2
     a9e:	ce 01       	movw	r24, r28
     aa0:	76 d2       	rcall	.+1260   	; 0xf8e <strcmp>
     aa2:	89 2b       	or	r24, r25
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <MatchCommand+0xe4>
     aa6:	c2 c0       	rjmp	.+388    	; 0xc2c <MatchCommand+0x268>
		return SERVICE;
	
	
	/* Here we are getting data to be stored from display */
	if (!strcmp(token, "REGABT"))
     aa8:	6c e8       	ldi	r22, 0x8C	; 140
     aaa:	72 e0       	ldi	r23, 0x02	; 2
     aac:	c8 01       	movw	r24, r16
     aae:	6f d2       	rcall	.+1246   	; 0xf8e <strcmp>
     ab0:	89 2b       	or	r24, r25
     ab2:	e1 f4       	brne	.+56     	; 0xaec <MatchCommand+0x128>
     ab4:	6c e1       	ldi	r22, 0x1C	; 28
		{
			token = strtok(NULL, "|");
     ab6:	72 e0       	ldi	r23, 0x02	; 2
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	65 d2       	rcall	.+1226   	; 0xf88 <strtok>
     abe:	dc 01       	movw	r26, r24
     ac0:	2c 91       	ld	r18, X
			numberhold = *(token);
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     ac8:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     acc:	11 96       	adiw	r26, 0x01	; 1
     ace:	8c 91       	ld	r24, X
			numberhold |= (*(token+1))<<8;
     ad0:	38 2b       	or	r19, r24
     ad2:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     ad6:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     ada:	84 e1       	ldi	r24, 0x14	; 20
			
			memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     adc:	ec e3       	ldi	r30, 0x3C	; 60
     ade:	f3 e0       	ldi	r31, 0x03	; 3
     ae0:	df 01       	movw	r26, r30
     ae2:	1d 92       	st	X+, r1
     ae4:	8a 95       	dec	r24
     ae6:	e9 f7       	brne	.-6      	; 0xae2 <MatchCommand+0x11e>
			return REGABT;
     ae8:	89 e0       	ldi	r24, 0x09	; 9
     aea:	a3 c0       	rjmp	.+326    	; 0xc32 <MatchCommand+0x26e>
		}
		
	if (!strcmp(token, "REGENBT"))
     aec:	63 e9       	ldi	r22, 0x93	; 147
     aee:	72 e0       	ldi	r23, 0x02	; 2
     af0:	c8 01       	movw	r24, r16
     af2:	4d d2       	rcall	.+1178   	; 0xf8e <strcmp>
     af4:	89 2b       	or	r24, r25
     af6:	d9 f4       	brne	.+54     	; 0xb2e <MatchCommand+0x16a>
     af8:	6c e1       	ldi	r22, 0x1C	; 28
	{
		token = strtok(NULL, "|");
     afa:	72 e0       	ldi	r23, 0x02	; 2
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	43 d2       	rcall	.+1158   	; 0xf88 <strtok>
     b02:	fc 01       	movw	r30, r24
     b04:	20 81       	ld	r18, Z
		numberhold = *(token);
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     b0c:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     b10:	81 81       	ldd	r24, Z+1	; 0x01
		numberhold |= (*(token+1))<<8;
     b12:	38 2b       	or	r19, r24
     b14:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     b18:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
		
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     b1c:	84 e1       	ldi	r24, 0x14	; 20
     b1e:	ec e3       	ldi	r30, 0x3C	; 60
     b20:	f3 e0       	ldi	r31, 0x03	; 3
     b22:	df 01       	movw	r26, r30
     b24:	1d 92       	st	X+, r1
     b26:	8a 95       	dec	r24
     b28:	e9 f7       	brne	.-6      	; 0xb24 <MatchCommand+0x160>
		return REGENBT;
     b2a:	8a e0       	ldi	r24, 0x0A	; 10
     b2c:	82 c0       	rjmp	.+260    	; 0xc32 <MatchCommand+0x26e>
	}
	
	if (!strcmp(token, "REGAWTYM"))
     b2e:	6b e9       	ldi	r22, 0x9B	; 155
     b30:	72 e0       	ldi	r23, 0x02	; 2
     b32:	c8 01       	movw	r24, r16
     b34:	2c d2       	rcall	.+1112   	; 0xf8e <strcmp>
     b36:	89 2b       	or	r24, r25
     b38:	d9 f4       	brne	.+54     	; 0xb70 <MatchCommand+0x1ac>
     b3a:	6c e1       	ldi	r22, 0x1C	; 28
	{
		token = strtok(NULL, "|");
     b3c:	72 e0       	ldi	r23, 0x02	; 2
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	22 d2       	rcall	.+1092   	; 0xf88 <strtok>
     b44:	fc 01       	movw	r30, r24
     b46:	20 81       	ld	r18, Z
		numberhold = *(token);
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     b4e:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     b52:	81 81       	ldd	r24, Z+1	; 0x01
		numberhold |= (*(token+1))<<8;
     b54:	38 2b       	or	r19, r24
     b56:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     b5a:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
		
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     b5e:	84 e1       	ldi	r24, 0x14	; 20
     b60:	ec e3       	ldi	r30, 0x3C	; 60
     b62:	f3 e0       	ldi	r31, 0x03	; 3
     b64:	df 01       	movw	r26, r30
     b66:	1d 92       	st	X+, r1
     b68:	8a 95       	dec	r24
     b6a:	e9 f7       	brne	.-6      	; 0xb66 <MatchCommand+0x1a2>
		return REGAWTYM;
     b6c:	8d e0       	ldi	r24, 0x0D	; 13
     b6e:	61 c0       	rjmp	.+194    	; 0xc32 <MatchCommand+0x26e>
	}
	
	
	
	if (!strcmp(token, "REGAQTY"))
     b70:	64 ea       	ldi	r22, 0xA4	; 164
     b72:	72 e0       	ldi	r23, 0x02	; 2
     b74:	c8 01       	movw	r24, r16
     b76:	0b d2       	rcall	.+1046   	; 0xf8e <strcmp>
     b78:	89 2b       	or	r24, r25
     b7a:	d9 f4       	brne	.+54     	; 0xbb2 <MatchCommand+0x1ee>
     b7c:	6c e1       	ldi	r22, 0x1C	; 28
	{
		token = strtok(NULL, "|");
     b7e:	72 e0       	ldi	r23, 0x02	; 2
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	01 d2       	rcall	.+1026   	; 0xf88 <strtok>
     b86:	fc 01       	movw	r30, r24
     b88:	20 81       	ld	r18, Z
		numberhold = *(token);
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     b90:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     b94:	81 81       	ldd	r24, Z+1	; 0x01
		numberhold |= (*(token+1))<<8;
     b96:	38 2b       	or	r19, r24
     b98:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     b9c:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     ba0:	84 e1       	ldi	r24, 0x14	; 20
     ba2:	ec e3       	ldi	r30, 0x3C	; 60
     ba4:	f3 e0       	ldi	r31, 0x03	; 3
     ba6:	df 01       	movw	r26, r30
     ba8:	1d 92       	st	X+, r1
     baa:	8a 95       	dec	r24
     bac:	e9 f7       	brne	.-6      	; 0xba8 <MatchCommand+0x1e4>
		return REGAQTY;
     bae:	88 e0       	ldi	r24, 0x08	; 8
     bb0:	40 c0       	rjmp	.+128    	; 0xc32 <MatchCommand+0x26e>
	} 
	
	if (!strcmp(token, "SPINTYM"))
     bb2:	6c ea       	ldi	r22, 0xAC	; 172
     bb4:	72 e0       	ldi	r23, 0x02	; 2
     bb6:	c8 01       	movw	r24, r16
     bb8:	ea d1       	rcall	.+980    	; 0xf8e <strcmp>
     bba:	89 2b       	or	r24, r25
     bbc:	c9 f5       	brne	.+114    	; 0xc30 <MatchCommand+0x26c>
     bbe:	6c e1       	ldi	r22, 0x1C	; 28
	{
		token = strtok(NULL, "|");
     bc0:	72 e0       	ldi	r23, 0x02	; 2
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	e0 d1       	rcall	.+960    	; 0xf88 <strtok>
     bc8:	fc 01       	movw	r30, r24
     bca:	20 81       	ld	r18, Z
		numberhold = *(token);
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     bd2:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     bd6:	81 81       	ldd	r24, Z+1	; 0x01
     bd8:	38 2b       	or	r19, r24
		numberhold |= (*(token+1))<<8;
     bda:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     bde:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     be2:	84 e1       	ldi	r24, 0x14	; 20
     be4:	ec e3       	ldi	r30, 0x3C	; 60
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     be6:	f3 e0       	ldi	r31, 0x03	; 3
     be8:	df 01       	movw	r26, r30
     bea:	1d 92       	st	X+, r1
     bec:	8a 95       	dec	r24
     bee:	e9 f7       	brne	.-6      	; 0xbea <MatchCommand+0x226>
     bf0:	83 e1       	ldi	r24, 0x13	; 19
     bf2:	1f c0       	rjmp	.+62     	; 0xc32 <MatchCommand+0x26e>
		return SPINTIME;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	1d c0       	rjmp	.+58     	; 0xc32 <MatchCommand+0x26e>
	
	//memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));
	
	/* These if statement used to find out which icon pressed */
	if (!strcmp(command, "program 1"))
		return PROGRAM_1;
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	1b c0       	rjmp	.+54     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "program 2"))
		return PROGRAM_2;
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	19 c0       	rjmp	.+50     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "program 3"))
		return PROGRAM_3;
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	17 c0       	rjmp	.+46     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "program 4"))
		return PROGRAM_4;
     c04:	85 e0       	ldi	r24, 0x05	; 5
     c06:	15 c0       	rjmp	.+42     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "p1edit"))
		return P1EDIT;
     c08:	86 e0       	ldi	r24, 0x06	; 6
     c0a:	13 c0       	rjmp	.+38     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "start"))
		return START;
     c0c:	84 e6       	ldi	r24, 0x64	; 100
     c0e:	11 c0       	rjmp	.+34     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "back"))
		return BACK;
     c10:	87 e0       	ldi	r24, 0x07	; 7
     c12:	0f c0       	rjmp	.+30     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "stblotym"))
		return REG_START_BLO_TIME;
     c14:	8b e0       	ldi	r24, 0x0B	; 11
     c16:	0d c0       	rjmp	.+26     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "endblotym"))
		return REG_END_BLO_TIME;
     c18:	8c e0       	ldi	r24, 0x0C	; 12
     c1a:	0b c0       	rjmp	.+22     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "rega"))
		return REGA;
     c1c:	8e e0       	ldi	r24, 0x0E	; 14
     c1e:	09 c0       	rjmp	.+18     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "regb"))
		return REGB;
     c20:	8f e0       	ldi	r24, 0x0F	; 15
     c22:	07 c0       	rjmp	.+14     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "regc"))
		return REGC;
     c24:	80 e1       	ldi	r24, 0x10	; 16
     c26:	05 c0       	rjmp	.+10     	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "regd"))
		return REGD;
     c28:	81 e1       	ldi	r24, 0x11	; 17
     c2a:	03 c0       	rjmp	.+6      	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "rege"))
		return REGE;
     c2c:	82 e1       	ldi	r24, 0x12	; 18
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <MatchCommand+0x26e>
	if (!strcmp(command, "service"))
		return SERVICE;
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	df 91       	pop	r29
		numberhold |= (*(token+1))<<8;
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
		return SPINTIME;
	}
	else
		return 0;
     c34:	cf 91       	pop	r28
}
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret

00000c3c <Send_FF_to_Display>:
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	7b de       	rcall	.-778    	; 0x936 <USART0_Transmit>

void Send_FF_to_Display()
{
	uint8_t i=0;
	for(i=0; i<3; i++)
		USART0_Transmit(0xFF);
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	79 de       	rcall	.-782    	; 0x936 <USART0_Transmit>
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	77 ce       	rjmp	.-786    	; 0x936 <USART0_Transmit>
     c48:	08 95       	ret

00000c4a <EEPROM_DisplayDataInit>:
	//USART0_Transmit(0xFF);
	
}

void EEPROM_DisplayDataInit(void)
{
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	c0 e0       	ldi	r28, 0x00	; 0
     c50:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i=0;
	uint8_t Address = 0x00;
	for(i=0; i<49; i++)				//Here 49 is number of data to be stored
	{
		if (EEPROM_Read2Bytes(Address)==0xFFFF)
     c52:	ce 01       	movw	r24, r28
     c54:	8b dd       	rcall	.-1258   	; 0x76c <EEPROM_Read2Bytes>
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	21 f4       	brne	.+8      	; 0xc62 <EEPROM_DisplayDataInit+0x18>
			EEPROM_Write2Bytes(Address, DataInitValue);
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	ce 01       	movw	r24, r28
     c60:	75 dd       	rcall	.-1302   	; 0x74c <EEPROM_Write2Bytes>
     c62:	22 96       	adiw	r28, 0x02	; 2

void EEPROM_DisplayDataInit(void)
{
	uint8_t i=0;
	uint8_t Address = 0x00;
	for(i=0; i<49; i++)				//Here 49 is number of data to be stored
     c64:	c2 36       	cpi	r28, 0x62	; 98
     c66:	d1 05       	cpc	r29, r1
     c68:	a1 f7       	brne	.-24     	; 0xc52 <EEPROM_DisplayDataInit+0x8>
		if (EEPROM_Read2Bytes(Address)==0xFFFF)
			EEPROM_Write2Bytes(Address, DataInitValue);
		Address += 2;
	}
	
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <ReagentSelected>:

void ReagentSelected(uint8_t qty_Add, uint8_t wait_Add)
{
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
		USART2_transmitstring("qty ");
		USART2_Transmit(OneTimeRunFunFlag);
		if (OneTimeRunFunFlag==0)
		{
			USART0_transmitstring("n0.val=");
			itoa(EEPROM_Read2Bytes(qty_Add), buffer, 10);
     c7c:	08 2f       	mov	r16, r24
     c7e:	10 e0       	ldi	r17, 0x00	; 0
					if (MatchCommand(rec_bufferglob)==BACK)
					{
						OneTimeRunFunFlag=0;
						if (flag!=1)
						{
							memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     c80:	0f 2e       	mov	r0, r31
     c82:	f4 e1       	ldi	r31, 0x14	; 20
     c84:	ef 2e       	mov	r14, r31
     c86:	f0 2d       	mov	r31, r0
					
					switch(MatchCommand(rec_bufferglob))
					{
						case REGAWTYM:
						{
							EEPROM_Write2Bytes(wait_Add, numberhold);
     c88:	c6 2f       	mov	r28, r22
     c8a:	d0 e0       	ldi	r29, 0x00	; 0
							strcpy(rec_bufferglob, "back");
							flag = 1;
     c8c:	ff 24       	eor	r15, r15
     c8e:	f3 94       	inc	r15
     c90:	2f ef       	ldi	r18, 0xFF	; 255
     c92:	81 ee       	ldi	r24, 0xE1	; 225
     c94:	94 e0       	ldi	r25, 0x04	; 4
     c96:	21 50       	subi	r18, 0x01	; 1
     c98:	80 40       	sbci	r24, 0x00	; 0
     c9a:	90 40       	sbci	r25, 0x00	; 0
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <ReagentSelected+0x26>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <ReagentSelected+0x30>
     ca0:	00 00       	nop
void ReagentSelected(uint8_t qty_Add, uint8_t wait_Add)
{
	while(1)
	{
		_delay_ms(DELAY_IN_LOOP);
		USART2_transmitstring("qty ");
     ca2:	84 eb       	ldi	r24, 0xB4	; 180
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	80 de       	rcall	.-768    	; 0x9a8 <USART2_transmitstring>
		USART2_Transmit(OneTimeRunFunFlag);
     ca8:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
     cac:	65 de       	rcall	.-822    	; 0x978 <USART2_Transmit>
		if (OneTimeRunFunFlag==0)
     cae:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
     cb2:	91 11       	cpse	r25, r1
     cb4:	12 c0       	rjmp	.+36     	; 0xcda <ReagentSelected+0x6a>
		{
			USART0_transmitstring("n0.val=");
     cb6:	89 eb       	ldi	r24, 0xB9	; 185
     cb8:	92 e0       	ldi	r25, 0x02	; 2
			itoa(EEPROM_Read2Bytes(qty_Add), buffer, 10);
     cba:	45 de       	rcall	.-886    	; 0x946 <USART0_transmitstring>
     cbc:	c8 01       	movw	r24, r16
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     cbe:	56 dd       	rcall	.-1364   	; 0x76c <EEPROM_Read2Bytes>
     cc0:	4a e0       	ldi	r20, 0x0A	; 10
     cc2:	68 e0       	ldi	r22, 0x08	; 8
			USART0_transmitstring(buffer);
     cc4:	73 e0       	ldi	r23, 0x03	; 3
     cc6:	9a d1       	rcall	.+820    	; 0xffc <__itoa_ncheck>
     cc8:	88 e0       	ldi	r24, 0x08	; 8
     cca:	93 e0       	ldi	r25, 0x03	; 3
			Send_FF_to_Display();
     ccc:	3c de       	rcall	.-904    	; 0x946 <USART0_transmitstring>
     cce:	b6 df       	rcall	.-148    	; 0xc3c <Send_FF_to_Display>
			OneTimeRunFunFlag++;
     cd0:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <OneTimeRunFunFlag>
		}
		
		switch(MatchCommand(rec_bufferglob))
     cda:	8c e3       	ldi	r24, 0x3C	; 60
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	72 de       	rcall	.-796    	; 0x9c4 <MatchCommand>
     ce0:	88 30       	cpi	r24, 0x08	; 8
     ce2:	09 f0       	breq	.+2      	; 0xce6 <ReagentSelected+0x76>
		{
			case REGAQTY:
			{
				EEPROM_Write2Bytes(qty_Add, numberhold);
     ce4:	56 c0       	rjmp	.+172    	; 0xd92 <ReagentSelected+0x122>
     ce6:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     cea:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     cee:	c8 01       	movw	r24, r16
     cf0:	2d dd       	rcall	.-1446   	; 0x74c <EEPROM_Write2Bytes>
				OneTimeRunFunFlag=0;
     cf2:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <OneTimeRunFunFlag>
     cf6:	af ef       	ldi	r26, 0xFF	; 255
     cf8:	b1 ee       	ldi	r27, 0xE1	; 225
     cfa:	24 e0       	ldi	r18, 0x04	; 4
     cfc:	a1 50       	subi	r26, 0x01	; 1
     cfe:	b0 40       	sbci	r27, 0x00	; 0
     d00:	20 40       	sbci	r18, 0x00	; 0
     d02:	e1 f7       	brne	.-8      	; 0xcfc <ReagentSelected+0x8c>
				
				while(1)
				{
					_delay_ms(DELAY_IN_LOOP);
					USART2_transmitstring("wait ");
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <ReagentSelected+0x96>
     d06:	00 00       	nop
     d08:	81 ec       	ldi	r24, 0xC1	; 193
					USART2_Transmit(OneTimeRunFunFlag);
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	4d de       	rcall	.-870    	; 0x9a8 <USART2_transmitstring>
     d0e:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
					if (OneTimeRunFunFlag==0)
     d12:	32 de       	rcall	.-924    	; 0x978 <USART2_Transmit>
     d14:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
					{
						USART0_transmitstring("n0.val=");
     d18:	91 11       	cpse	r25, r1
						itoa(EEPROM_Read2Bytes(wait_Add), buffer, 10);
     d1a:	12 c0       	rjmp	.+36     	; 0xd40 <ReagentSelected+0xd0>
     d1c:	89 eb       	ldi	r24, 0xB9	; 185
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	12 de       	rcall	.-988    	; 0x946 <USART0_transmitstring>
     d22:	ce 01       	movw	r24, r28
     d24:	23 dd       	rcall	.-1466   	; 0x76c <EEPROM_Read2Bytes>
     d26:	4a e0       	ldi	r20, 0x0A	; 10
						USART0_transmitstring(buffer);
     d28:	68 e0       	ldi	r22, 0x08	; 8
     d2a:	73 e0       	ldi	r23, 0x03	; 3
     d2c:	67 d1       	rcall	.+718    	; 0xffc <__itoa_ncheck>
     d2e:	88 e0       	ldi	r24, 0x08	; 8
						Send_FF_to_Display();
     d30:	93 e0       	ldi	r25, 0x03	; 3
						OneTimeRunFunFlag++;
     d32:	09 de       	rcall	.-1006   	; 0x946 <USART0_transmitstring>
     d34:	83 df       	rcall	.-250    	; 0xc3c <Send_FF_to_Display>
     d36:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
     d3a:	9f 5f       	subi	r25, 0xFF	; 255
					}
					
					switch(MatchCommand(rec_bufferglob))
     d3c:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <OneTimeRunFunFlag>
     d40:	8c e3       	ldi	r24, 0x3C	; 60
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	3f de       	rcall	.-898    	; 0x9c4 <MatchCommand>
     d46:	8d 30       	cpi	r24, 0x0D	; 13
					{
						case REGAWTYM:
						{
							EEPROM_Write2Bytes(wait_Add, numberhold);
     d48:	89 f4       	brne	.+34     	; 0xd6c <ReagentSelected+0xfc>
     d4a:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     d4e:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     d52:	ce 01       	movw	r24, r28
							strcpy(rec_bufferglob, "back");
     d54:	fb dc       	rcall	.-1546   	; 0x74c <EEPROM_Write2Bytes>
     d56:	95 e0       	ldi	r25, 0x05	; 5
     d58:	e3 e5       	ldi	r30, 0x53	; 83
     d5a:	f2 e0       	ldi	r31, 0x02	; 2
     d5c:	ac e3       	ldi	r26, 0x3C	; 60
     d5e:	b3 e0       	ldi	r27, 0x03	; 3
     d60:	01 90       	ld	r0, Z+
     d62:	0d 92       	st	X+, r0
     d64:	9a 95       	dec	r25
							flag = 1;
     d66:	e1 f7       	brne	.-8      	; 0xd60 <ReagentSelected+0xf0>
     d68:	f0 92 ca 02 	sts	0x02CA, r15	; 0x8002ca <flag>
							break;
						}
					}
					
					if (MatchCommand(rec_bufferglob)==BACK)
     d6c:	8c e3       	ldi	r24, 0x3C	; 60
     d6e:	93 e0       	ldi	r25, 0x03	; 3
     d70:	29 de       	rcall	.-942    	; 0x9c4 <MatchCommand>
     d72:	84 36       	cpi	r24, 0x64	; 100
     d74:	09 f0       	breq	.+2      	; 0xd78 <ReagentSelected+0x108>
					{
						OneTimeRunFunFlag=0;
     d76:	bf cf       	rjmp	.-130    	; 0xcf6 <ReagentSelected+0x86>
     d78:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <OneTimeRunFunFlag>
						if (flag!=1)
     d7c:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <flag>
     d80:	81 30       	cpi	r24, 0x01	; 1
						{
							memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     d82:	39 f0       	breq	.+14     	; 0xd92 <ReagentSelected+0x122>
     d84:	ec e3       	ldi	r30, 0x3C	; 60
     d86:	f3 e0       	ldi	r31, 0x03	; 3
     d88:	df 01       	movw	r26, r30
     d8a:	2e 2d       	mov	r18, r14
     d8c:	1d 92       	st	X+, r1
     d8e:	2a 95       	dec	r18
				
				break;
			}
		}
		
		if (MatchCommand(rec_bufferglob)==BACK)
     d90:	e9 f7       	brne	.-6      	; 0xd8c <ReagentSelected+0x11c>
     d92:	8c e3       	ldi	r24, 0x3C	; 60
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	16 de       	rcall	.-980    	; 0x9c4 <MatchCommand>
     d98:	84 36       	cpi	r24, 0x64	; 100
     d9a:	09 f0       	breq	.+2      	; 0xd9e <ReagentSelected+0x12e>
     d9c:	79 cf       	rjmp	.-270    	; 0xc90 <ReagentSelected+0x20>
		{
			OneTimeRunFunFlag=0;
     d9e:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <OneTimeRunFunFlag>
			memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     da2:	84 e1       	ldi	r24, 0x14	; 20
     da4:	ec e3       	ldi	r30, 0x3C	; 60
     da6:	f3 e0       	ldi	r31, 0x03	; 3
     da8:	df 01       	movw	r26, r30
     daa:	1d 92       	st	X+, r1
     dac:	8a 95       	dec	r24
     dae:	e9 f7       	brne	.-6      	; 0xdaa <ReagentSelected+0x13a>
			flag = 0;
     db0:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <flag>
			break;
		}
		
	}
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	08 95       	ret

00000dc2 <StartBlowerTimeSelected>:

void StartBlowerTimeSelected(uint8_t startBlower_Add)
{
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
	{
		_delay_ms(DELAY_IN_LOOP);
		if (OneTimeRunFunFlag==0)
		{
			USART0_transmitstring("n0.val=");
			itoa(EEPROM_Read2Bytes(startBlower_Add), buffer, 10);
     dc6:	c8 2f       	mov	r28, r24
     dc8:	d0 e0       	ldi	r29, 0x00	; 0
     dca:	2f ef       	ldi	r18, 0xFF	; 255
     dcc:	81 ee       	ldi	r24, 0xE1	; 225
     dce:	94 e0       	ldi	r25, 0x04	; 4
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	80 40       	sbci	r24, 0x00	; 0
     dd4:	90 40       	sbci	r25, 0x00	; 0
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <StartBlowerTimeSelected+0xe>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <StartBlowerTimeSelected+0x18>
     dda:	00 00       	nop
void StartBlowerTimeSelected(uint8_t startBlower_Add)
{
	while(1)
	{
		_delay_ms(DELAY_IN_LOOP);
		if (OneTimeRunFunFlag==0)
     ddc:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
     de0:	91 11       	cpse	r25, r1
     de2:	12 c0       	rjmp	.+36     	; 0xe08 <StartBlowerTimeSelected+0x46>
		{
			USART0_transmitstring("n0.val=");
     de4:	89 eb       	ldi	r24, 0xB9	; 185
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	ae dd       	rcall	.-1188   	; 0x946 <USART0_transmitstring>
			itoa(EEPROM_Read2Bytes(startBlower_Add), buffer, 10);
     dea:	ce 01       	movw	r24, r28
     dec:	bf dc       	rcall	.-1666   	; 0x76c <EEPROM_Read2Bytes>
     dee:	4a e0       	ldi	r20, 0x0A	; 10
     df0:	68 e0       	ldi	r22, 0x08	; 8
     df2:	73 e0       	ldi	r23, 0x03	; 3
     df4:	03 d1       	rcall	.+518    	; 0xffc <__itoa_ncheck>
			USART0_transmitstring(buffer);
     df6:	88 e0       	ldi	r24, 0x08	; 8
     df8:	93 e0       	ldi	r25, 0x03	; 3
     dfa:	a5 dd       	rcall	.-1206   	; 0x946 <USART0_transmitstring>
			Send_FF_to_Display();
     dfc:	1f df       	rcall	.-450    	; 0xc3c <Send_FF_to_Display>
     dfe:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
			OneTimeRunFunFlag++;
     e02:	9f 5f       	subi	r25, 0xFF	; 255
     e04:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <OneTimeRunFunFlag>
		}
		
		switch(MatchCommand(rec_bufferglob))
     e08:	8c e3       	ldi	r24, 0x3C	; 60
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	db dd       	rcall	.-1098   	; 0x9c4 <MatchCommand>
     e0e:	89 30       	cpi	r24, 0x09	; 9
     e10:	79 f4       	brne	.+30     	; 0xe30 <StartBlowerTimeSelected+0x6e>
		{
			case REGABT:
			{
				EEPROM_Write2Bytes(startBlower_Add, numberhold);
     e12:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     e16:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e1a:	ce 01       	movw	r24, r28
     e1c:	97 dc       	rcall	.-1746   	; 0x74c <EEPROM_Write2Bytes>
     e1e:	95 e0       	ldi	r25, 0x05	; 5
				strcpy(rec_bufferglob, "back");
     e20:	e3 e5       	ldi	r30, 0x53	; 83
     e22:	f2 e0       	ldi	r31, 0x02	; 2
     e24:	ac e3       	ldi	r26, 0x3C	; 60
     e26:	b3 e0       	ldi	r27, 0x03	; 3
     e28:	01 90       	ld	r0, Z+
     e2a:	0d 92       	st	X+, r0
     e2c:	9a 95       	dec	r25
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <StartBlowerTimeSelected+0x66>
				break;
			}
		}
		
		if (MatchCommand(rec_bufferglob)==BACK)
     e30:	8c e3       	ldi	r24, 0x3C	; 60
     e32:	93 e0       	ldi	r25, 0x03	; 3
     e34:	c7 dd       	rcall	.-1138   	; 0x9c4 <MatchCommand>
     e36:	84 36       	cpi	r24, 0x64	; 100
     e38:	09 f0       	breq	.+2      	; 0xe3c <StartBlowerTimeSelected+0x7a>
     e3a:	c7 cf       	rjmp	.-114    	; 0xdca <StartBlowerTimeSelected+0x8>
     e3c:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <OneTimeRunFunFlag>
		{
			OneTimeRunFunFlag=0;
     e40:	84 e1       	ldi	r24, 0x14	; 20
			memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     e42:	ec e3       	ldi	r30, 0x3C	; 60
     e44:	f3 e0       	ldi	r31, 0x03	; 3
     e46:	df 01       	movw	r26, r30
     e48:	1d 92       	st	X+, r1
     e4a:	8a 95       	dec	r24
     e4c:	e9 f7       	brne	.-6      	; 0xe48 <StartBlowerTimeSelected+0x86>
     e4e:	df 91       	pop	r29
			break;
		}
		
	}
}
     e50:	cf 91       	pop	r28
     e52:	08 95       	ret

00000e54 <EndBlowerTimeSelected>:
     e54:	cf 93       	push	r28

void EndBlowerTimeSelected(uint8_t EndBlower_Add)
{
     e56:	df 93       	push	r29
	{
		_delay_ms(DELAY_IN_LOOP);
		if (OneTimeRunFunFlag==0)
		{
			USART0_transmitstring("n0.val=");
			itoa(EEPROM_Read2Bytes(EndBlower_Add), buffer, 10);
     e58:	c8 2f       	mov	r28, r24
     e5a:	d0 e0       	ldi	r29, 0x00	; 0
     e5c:	2f ef       	ldi	r18, 0xFF	; 255
     e5e:	81 ee       	ldi	r24, 0xE1	; 225
     e60:	94 e0       	ldi	r25, 0x04	; 4
     e62:	21 50       	subi	r18, 0x01	; 1
     e64:	80 40       	sbci	r24, 0x00	; 0
     e66:	90 40       	sbci	r25, 0x00	; 0
     e68:	e1 f7       	brne	.-8      	; 0xe62 <EndBlowerTimeSelected+0xe>
     e6a:	00 c0       	rjmp	.+0      	; 0xe6c <EndBlowerTimeSelected+0x18>
     e6c:	00 00       	nop
void EndBlowerTimeSelected(uint8_t EndBlower_Add)
{
	while(1)
	{
		_delay_ms(DELAY_IN_LOOP);
		if (OneTimeRunFunFlag==0)
     e6e:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
     e72:	91 11       	cpse	r25, r1
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <EndBlowerTimeSelected+0x46>
		{
			USART0_transmitstring("n0.val=");
     e76:	89 eb       	ldi	r24, 0xB9	; 185
     e78:	92 e0       	ldi	r25, 0x02	; 2
     e7a:	65 dd       	rcall	.-1334   	; 0x946 <USART0_transmitstring>
			itoa(EEPROM_Read2Bytes(EndBlower_Add), buffer, 10);
     e7c:	ce 01       	movw	r24, r28
     e7e:	76 dc       	rcall	.-1812   	; 0x76c <EEPROM_Read2Bytes>
     e80:	4a e0       	ldi	r20, 0x0A	; 10
     e82:	68 e0       	ldi	r22, 0x08	; 8
     e84:	73 e0       	ldi	r23, 0x03	; 3
     e86:	ba d0       	rcall	.+372    	; 0xffc <__itoa_ncheck>
			USART0_transmitstring(buffer);
     e88:	88 e0       	ldi	r24, 0x08	; 8
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	5c dd       	rcall	.-1352   	; 0x946 <USART0_transmitstring>
			Send_FF_to_Display();
     e8e:	d6 de       	rcall	.-596    	; 0xc3c <Send_FF_to_Display>
     e90:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
			OneTimeRunFunFlag++;
     e94:	9f 5f       	subi	r25, 0xFF	; 255
     e96:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <OneTimeRunFunFlag>
		}
		
		switch(MatchCommand(rec_bufferglob))
     e9a:	8c e3       	ldi	r24, 0x3C	; 60
     e9c:	93 e0       	ldi	r25, 0x03	; 3
     e9e:	92 dd       	rcall	.-1244   	; 0x9c4 <MatchCommand>
     ea0:	8a 30       	cpi	r24, 0x0A	; 10
     ea2:	79 f4       	brne	.+30     	; 0xec2 <EndBlowerTimeSelected+0x6e>
		{
			case REGENBT:
			{
				EEPROM_Write2Bytes(EndBlower_Add, numberhold);
     ea4:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     ea8:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     eac:	ce 01       	movw	r24, r28
     eae:	4e dc       	rcall	.-1892   	; 0x74c <EEPROM_Write2Bytes>
     eb0:	95 e0       	ldi	r25, 0x05	; 5
				strcpy(rec_bufferglob, "back");
     eb2:	e3 e5       	ldi	r30, 0x53	; 83
     eb4:	f2 e0       	ldi	r31, 0x02	; 2
     eb6:	ac e3       	ldi	r26, 0x3C	; 60
     eb8:	b3 e0       	ldi	r27, 0x03	; 3
     eba:	01 90       	ld	r0, Z+
     ebc:	0d 92       	st	X+, r0
     ebe:	9a 95       	dec	r25
     ec0:	e1 f7       	brne	.-8      	; 0xeba <EndBlowerTimeSelected+0x66>
				break;
			}
		}
		
		if (MatchCommand(rec_bufferglob)==BACK)
     ec2:	8c e3       	ldi	r24, 0x3C	; 60
     ec4:	93 e0       	ldi	r25, 0x03	; 3
     ec6:	7e dd       	rcall	.-1284   	; 0x9c4 <MatchCommand>
     ec8:	84 36       	cpi	r24, 0x64	; 100
     eca:	09 f0       	breq	.+2      	; 0xece <EndBlowerTimeSelected+0x7a>
     ecc:	c7 cf       	rjmp	.-114    	; 0xe5c <EndBlowerTimeSelected+0x8>
     ece:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <OneTimeRunFunFlag>
		{
			OneTimeRunFunFlag=0;
     ed2:	84 e1       	ldi	r24, 0x14	; 20
			memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     ed4:	ec e3       	ldi	r30, 0x3C	; 60
     ed6:	f3 e0       	ldi	r31, 0x03	; 3
     ed8:	df 01       	movw	r26, r30
     eda:	1d 92       	st	X+, r1
     edc:	8a 95       	dec	r24
     ede:	e9 f7       	brne	.-6      	; 0xeda <EndBlowerTimeSelected+0x86>
     ee0:	df 91       	pop	r29
			break;
		}
		
	}
}
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <SpinTimeSelected>:
     ee6:	cf 93       	push	r28


void SpinTimeSelected(uint8_t spin_time_Add)
{
     ee8:	df 93       	push	r29
	{
		_delay_ms(DELAY_IN_LOOP);
		if (OneTimeRunFunFlag==0)
		{
			USART0_transmitstring("n0.val=");
			itoa(EEPROM_Read2Bytes(spin_time_Add), buffer, 10);
     eea:	c8 2f       	mov	r28, r24
     eec:	d0 e0       	ldi	r29, 0x00	; 0
     eee:	2f ef       	ldi	r18, 0xFF	; 255
     ef0:	81 ee       	ldi	r24, 0xE1	; 225
     ef2:	94 e0       	ldi	r25, 0x04	; 4
     ef4:	21 50       	subi	r18, 0x01	; 1
     ef6:	80 40       	sbci	r24, 0x00	; 0
     ef8:	90 40       	sbci	r25, 0x00	; 0
     efa:	e1 f7       	brne	.-8      	; 0xef4 <SpinTimeSelected+0xe>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <SpinTimeSelected+0x18>
     efe:	00 00       	nop
void SpinTimeSelected(uint8_t spin_time_Add)
{
	while(1)
	{
		_delay_ms(DELAY_IN_LOOP);
		if (OneTimeRunFunFlag==0)
     f00:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
     f04:	91 11       	cpse	r25, r1
     f06:	12 c0       	rjmp	.+36     	; 0xf2c <SpinTimeSelected+0x46>
		{
			USART0_transmitstring("n0.val=");
     f08:	89 eb       	ldi	r24, 0xB9	; 185
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	1c dd       	rcall	.-1480   	; 0x946 <USART0_transmitstring>
			itoa(EEPROM_Read2Bytes(spin_time_Add), buffer, 10);
     f0e:	ce 01       	movw	r24, r28
     f10:	2d dc       	rcall	.-1958   	; 0x76c <EEPROM_Read2Bytes>
     f12:	4a e0       	ldi	r20, 0x0A	; 10
     f14:	68 e0       	ldi	r22, 0x08	; 8
     f16:	73 e0       	ldi	r23, 0x03	; 3
     f18:	71 d0       	rcall	.+226    	; 0xffc <__itoa_ncheck>
			USART0_transmitstring(buffer);
     f1a:	88 e0       	ldi	r24, 0x08	; 8
     f1c:	93 e0       	ldi	r25, 0x03	; 3
     f1e:	13 dd       	rcall	.-1498   	; 0x946 <USART0_transmitstring>
			Send_FF_to_Display();
     f20:	8d de       	rcall	.-742    	; 0xc3c <Send_FF_to_Display>
     f22:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <OneTimeRunFunFlag>
			OneTimeRunFunFlag++;
     f26:	9f 5f       	subi	r25, 0xFF	; 255
     f28:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <OneTimeRunFunFlag>
		}
		
		switch(MatchCommand(rec_bufferglob))
     f2c:	8c e3       	ldi	r24, 0x3C	; 60
     f2e:	93 e0       	ldi	r25, 0x03	; 3
     f30:	49 dd       	rcall	.-1390   	; 0x9c4 <MatchCommand>
     f32:	83 31       	cpi	r24, 0x13	; 19
     f34:	79 f4       	brne	.+30     	; 0xf54 <SpinTimeSelected+0x6e>
		{
			case SPINTIME:
			{
				EEPROM_Write2Bytes(spin_time_Add, numberhold);
     f36:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     f3a:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     f3e:	ce 01       	movw	r24, r28
     f40:	05 dc       	rcall	.-2038   	; 0x74c <EEPROM_Write2Bytes>
     f42:	95 e0       	ldi	r25, 0x05	; 5
				strcpy(rec_bufferglob, "back");
     f44:	e3 e5       	ldi	r30, 0x53	; 83
     f46:	f2 e0       	ldi	r31, 0x02	; 2
     f48:	ac e3       	ldi	r26, 0x3C	; 60
     f4a:	b3 e0       	ldi	r27, 0x03	; 3
     f4c:	01 90       	ld	r0, Z+
     f4e:	0d 92       	st	X+, r0
     f50:	9a 95       	dec	r25
     f52:	e1 f7       	brne	.-8      	; 0xf4c <SpinTimeSelected+0x66>
				break;
			}
		}
		
		if (MatchCommand(rec_bufferglob)==BACK)
     f54:	8c e3       	ldi	r24, 0x3C	; 60
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	35 dd       	rcall	.-1430   	; 0x9c4 <MatchCommand>
     f5a:	84 36       	cpi	r24, 0x64	; 100
     f5c:	09 f0       	breq	.+2      	; 0xf60 <SpinTimeSelected+0x7a>
     f5e:	c7 cf       	rjmp	.-114    	; 0xeee <SpinTimeSelected+0x8>
     f60:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <OneTimeRunFunFlag>
		{
			OneTimeRunFunFlag=0;
     f64:	84 e1       	ldi	r24, 0x14	; 20
			memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     f66:	ec e3       	ldi	r30, 0x3C	; 60
     f68:	f3 e0       	ldi	r31, 0x03	; 3
     f6a:	df 01       	movw	r26, r30
     f6c:	1d 92       	st	X+, r1
     f6e:	8a 95       	dec	r24
     f70:	e9 f7       	brne	.-6      	; 0xf6c <SpinTimeSelected+0x86>
     f72:	df 91       	pop	r29
			break;
		}
		
	}
}
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <__tablejump2__>:
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	88 1f       	adc	r24, r24
     f7e:	8b bf       	out	0x3b, r24	; 59
     f80:	07 90       	elpm	r0, Z+
     f82:	f6 91       	elpm	r31, Z
     f84:	e0 2d       	mov	r30, r0
     f86:	19 94       	eijmp

00000f88 <strtok>:
     f88:	48 ec       	ldi	r20, 0xC8	; 200
     f8a:	52 e0       	ldi	r21, 0x02	; 2
     f8c:	10 c0       	rjmp	.+32     	; 0xfae <strtok_r>

00000f8e <strcmp>:
     f8e:	fb 01       	movw	r30, r22
     f90:	dc 01       	movw	r26, r24
     f92:	8d 91       	ld	r24, X+
     f94:	01 90       	ld	r0, Z+
     f96:	80 19       	sub	r24, r0
     f98:	01 10       	cpse	r0, r1
     f9a:	d9 f3       	breq	.-10     	; 0xf92 <strcmp+0x4>
     f9c:	99 0b       	sbc	r25, r25
     f9e:	08 95       	ret

00000fa0 <strcpy>:
     fa0:	fb 01       	movw	r30, r22
     fa2:	dc 01       	movw	r26, r24
     fa4:	01 90       	ld	r0, Z+
     fa6:	0d 92       	st	X+, r0
     fa8:	00 20       	and	r0, r0
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <strcpy+0x4>
     fac:	08 95       	ret

00000fae <strtok_r>:
     fae:	fa 01       	movw	r30, r20
     fb0:	a1 91       	ld	r26, Z+
     fb2:	b0 81       	ld	r27, Z
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	19 f4       	brne	.+6      	; 0xfbe <strtok_r+0x10>
     fb8:	10 97       	sbiw	r26, 0x00	; 0
     fba:	e1 f0       	breq	.+56     	; 0xff4 <strtok_r+0x46>
     fbc:	cd 01       	movw	r24, r26
     fbe:	dc 01       	movw	r26, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0d 90       	ld	r0, X+
     fc4:	00 20       	and	r0, r0
     fc6:	11 f4       	brne	.+4      	; 0xfcc <strtok_r+0x1e>
     fc8:	c0 01       	movw	r24, r0
     fca:	13 c0       	rjmp	.+38     	; 0xff2 <strtok_r+0x44>
     fcc:	fb 01       	movw	r30, r22
     fce:	21 91       	ld	r18, Z+
     fd0:	22 23       	and	r18, r18
     fd2:	19 f0       	breq	.+6      	; 0xfda <strtok_r+0x2c>
     fd4:	20 15       	cp	r18, r0
     fd6:	d9 f7       	brne	.-10     	; 0xfce <strtok_r+0x20>
     fd8:	f3 cf       	rjmp	.-26     	; 0xfc0 <strtok_r+0x12>
     fda:	fb 01       	movw	r30, r22
     fdc:	21 91       	ld	r18, Z+
     fde:	20 15       	cp	r18, r0
     fe0:	19 f4       	brne	.+6      	; 0xfe8 <strtok_r+0x3a>
     fe2:	1e 92       	st	-X, r1
     fe4:	11 96       	adiw	r26, 0x01	; 1
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <strtok_r+0x46>
     fe8:	22 23       	and	r18, r18
     fea:	c1 f7       	brne	.-16     	; 0xfdc <strtok_r+0x2e>
     fec:	0d 90       	ld	r0, X+
     fee:	00 20       	and	r0, r0
     ff0:	a1 f7       	brne	.-24     	; 0xfda <strtok_r+0x2c>
     ff2:	d0 01       	movw	r26, r0
     ff4:	fa 01       	movw	r30, r20
     ff6:	a1 93       	st	Z+, r26
     ff8:	b0 83       	st	Z, r27
     ffa:	08 95       	ret

00000ffc <__itoa_ncheck>:
     ffc:	bb 27       	eor	r27, r27
     ffe:	4a 30       	cpi	r20, 0x0A	; 10
    1000:	31 f4       	brne	.+12     	; 0x100e <__itoa_ncheck+0x12>
    1002:	99 23       	and	r25, r25
    1004:	22 f4       	brpl	.+8      	; 0x100e <__itoa_ncheck+0x12>
    1006:	bd e2       	ldi	r27, 0x2D	; 45
    1008:	90 95       	com	r25
    100a:	81 95       	neg	r24
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <__utoa_common>

00001010 <__utoa_ncheck>:
    1010:	bb 27       	eor	r27, r27

00001012 <__utoa_common>:
    1012:	fb 01       	movw	r30, r22
    1014:	55 27       	eor	r21, r21
    1016:	aa 27       	eor	r26, r26
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	aa 1f       	adc	r26, r26
    101e:	a4 17       	cp	r26, r20
    1020:	10 f0       	brcs	.+4      	; 0x1026 <__utoa_common+0x14>
    1022:	a4 1b       	sub	r26, r20
    1024:	83 95       	inc	r24
    1026:	50 51       	subi	r21, 0x10	; 16
    1028:	b9 f7       	brne	.-18     	; 0x1018 <__utoa_common+0x6>
    102a:	a0 5d       	subi	r26, 0xD0	; 208
    102c:	aa 33       	cpi	r26, 0x3A	; 58
    102e:	08 f0       	brcs	.+2      	; 0x1032 <__utoa_common+0x20>
    1030:	a9 5d       	subi	r26, 0xD9	; 217
    1032:	a1 93       	st	Z+, r26
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	79 f7       	brne	.-34     	; 0x1016 <__utoa_common+0x4>
    1038:	b1 11       	cpse	r27, r1
    103a:	b1 93       	st	Z+, r27
    103c:	11 92       	st	Z+, r1
    103e:	cb 01       	movw	r24, r22
    1040:	00 c0       	rjmp	.+0      	; 0x1042 <strrev>

00001042 <strrev>:
    1042:	dc 01       	movw	r26, r24
    1044:	fc 01       	movw	r30, r24
    1046:	67 2f       	mov	r22, r23
    1048:	71 91       	ld	r23, Z+
    104a:	77 23       	and	r23, r23
    104c:	e1 f7       	brne	.-8      	; 0x1046 <strrev+0x4>
    104e:	32 97       	sbiw	r30, 0x02	; 2
    1050:	04 c0       	rjmp	.+8      	; 0x105a <strrev+0x18>
    1052:	7c 91       	ld	r23, X
    1054:	6d 93       	st	X+, r22
    1056:	70 83       	st	Z, r23
    1058:	62 91       	ld	r22, -Z
    105a:	ae 17       	cp	r26, r30
    105c:	bf 07       	cpc	r27, r31
    105e:	c8 f3       	brcs	.-14     	; 0x1052 <strrev+0x10>
    1060:	08 95       	ret

00001062 <_exit>:
    1062:	f8 94       	cli

00001064 <__stop_program>:
    1064:	ff cf       	rjmp	.-2      	; 0x1064 <__stop_program>
