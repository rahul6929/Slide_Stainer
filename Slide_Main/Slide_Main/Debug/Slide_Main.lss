
Slide_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000176  00800200  000011f4  00001288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  00800376  00800376  000013fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003664  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000105b  00000000  00000000  00004c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000151f  00000000  00000000  00005c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  000071c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a42  00000000  00000000  00007610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001759  00000000  00000000  00008052  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000097ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9d c0       	rjmp	.+314    	; 0x13c <__ctors_end>
       2:	00 00       	nop
       4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
       6:	00 00       	nop
       8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
       a:	00 00       	nop
       c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
       e:	00 00       	nop
      10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
      12:	00 00       	nop
      14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
      1e:	00 00       	nop
      20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
      22:	00 00       	nop
      24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
      26:	00 00       	nop
      28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a7 c0       	rjmp	.+334    	; 0x17c <__bad_interrupt>
      2e:	00 00       	nop
      30:	a5 c0       	rjmp	.+330    	; 0x17c <__bad_interrupt>
      32:	00 00       	nop
      34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
      36:	00 00       	nop
      38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
      3e:	00 00       	nop
      40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
      42:	00 00       	nop
      44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
      46:	00 00       	nop
      48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c3       	rjmp	.+1812   	; 0x766 <__vector_20>
      52:	00 00       	nop
      54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
      56:	00 00       	nop
      58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
      5e:	00 00       	nop
      60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
      62:	00 00       	nop
      64:	0a c3       	rjmp	.+1556   	; 0x67a <__vector_25>
      66:	00 00       	nop
      68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
      6e:	00 00       	nop
      70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
      72:	00 00       	nop
      74:	83 c0       	rjmp	.+262    	; 0x17c <__bad_interrupt>
      76:	00 00       	nop
      78:	81 c0       	rjmp	.+258    	; 0x17c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7f c0       	rjmp	.+254    	; 0x17c <__bad_interrupt>
      7e:	00 00       	nop
      80:	7d c0       	rjmp	.+250    	; 0x17c <__bad_interrupt>
      82:	00 00       	nop
      84:	7b c0       	rjmp	.+246    	; 0x17c <__bad_interrupt>
      86:	00 00       	nop
      88:	79 c0       	rjmp	.+242    	; 0x17c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	77 c0       	rjmp	.+238    	; 0x17c <__bad_interrupt>
      8e:	00 00       	nop
      90:	75 c0       	rjmp	.+234    	; 0x17c <__bad_interrupt>
      92:	00 00       	nop
      94:	73 c0       	rjmp	.+230    	; 0x17c <__bad_interrupt>
      96:	00 00       	nop
      98:	71 c0       	rjmp	.+226    	; 0x17c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6f c0       	rjmp	.+222    	; 0x17c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6d c0       	rjmp	.+218    	; 0x17c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6b c0       	rjmp	.+214    	; 0x17c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	69 c0       	rjmp	.+210    	; 0x17c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	67 c0       	rjmp	.+206    	; 0x17c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	65 c0       	rjmp	.+202    	; 0x17c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	63 c0       	rjmp	.+198    	; 0x17c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	61 c0       	rjmp	.+194    	; 0x17c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5f c0       	rjmp	.+190    	; 0x17c <__bad_interrupt>
      be:	00 00       	nop
      c0:	5d c0       	rjmp	.+186    	; 0x17c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5b c0       	rjmp	.+182    	; 0x17c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	59 c0       	rjmp	.+178    	; 0x17c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	69 c2       	rjmp	.+1234   	; 0x5a0 <__vector_51>
      ce:	00 00       	nop
      d0:	55 c0       	rjmp	.+170    	; 0x17c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	53 c0       	rjmp	.+166    	; 0x17c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	51 c0       	rjmp	.+162    	; 0x17c <__bad_interrupt>
      da:	00 00       	nop
      dc:	4f c0       	rjmp	.+158    	; 0x17c <__bad_interrupt>
      de:	00 00       	nop
      e0:	4d c0       	rjmp	.+154    	; 0x17c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	74 01       	movw	r14, r8
      e6:	8d 01       	movw	r16, r26
      e8:	8d 01       	movw	r16, r26
      ea:	8d 01       	movw	r16, r26
      ec:	77 01       	movw	r14, r14
      ee:	7a 01       	movw	r14, r20
      f0:	8d 01       	movw	r16, r26
      f2:	7e 01       	movw	r14, r28
      f4:	82 01       	movw	r16, r4
      f6:	86 01       	movw	r16, r12
      f8:	8a 01       	movw	r16, r20
      fa:	d3 01       	movw	r26, r6
      fc:	ec 01       	movw	r28, r24
      fe:	ec 01       	movw	r28, r24
     100:	ec 01       	movw	r28, r24
     102:	d6 01       	movw	r26, r12
     104:	d9 01       	movw	r26, r18
     106:	ec 01       	movw	r28, r24
     108:	dd 01       	movw	r26, r26
     10a:	e1 01       	movw	r28, r2
     10c:	e5 01       	movw	r28, r10
     10e:	e9 01       	movw	r28, r18
     110:	32 02       	muls	r19, r18
     112:	4b 02       	muls	r20, r27
     114:	4b 02       	muls	r20, r27
     116:	4b 02       	muls	r20, r27
     118:	35 02       	muls	r19, r21
     11a:	38 02       	muls	r19, r24
     11c:	4b 02       	muls	r20, r27
     11e:	3c 02       	muls	r19, r28
     120:	40 02       	muls	r20, r16
     122:	44 02       	muls	r20, r20
     124:	48 02       	muls	r20, r24
     126:	91 02       	muls	r25, r17
     128:	aa 02       	muls	r26, r26
     12a:	aa 02       	muls	r26, r26
     12c:	aa 02       	muls	r26, r26
     12e:	94 02       	muls	r25, r20
     130:	97 02       	muls	r25, r23
     132:	aa 02       	muls	r26, r26
     134:	9b 02       	muls	r25, r27
     136:	9f 02       	muls	r25, r31
     138:	a3 02       	muls	r26, r19
     13a:	a7 02       	muls	r26, r23

0000013c <__ctors_end>:
     13c:	11 24       	eor	r1, r1
     13e:	1f be       	out	0x3f, r1	; 63
     140:	cf ef       	ldi	r28, 0xFF	; 255
     142:	d1 e2       	ldi	r29, 0x21	; 33
     144:	de bf       	out	0x3e, r29	; 62
     146:	cd bf       	out	0x3d, r28	; 61
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0c bf       	out	0x3c, r16	; 60

0000014c <__do_copy_data>:
     14c:	13 e0       	ldi	r17, 0x03	; 3
     14e:	a0 e0       	ldi	r26, 0x00	; 0
     150:	b2 e0       	ldi	r27, 0x02	; 2
     152:	e4 ef       	ldi	r30, 0xF4	; 244
     154:	f1 e1       	ldi	r31, 0x11	; 17
     156:	00 e0       	ldi	r16, 0x00	; 0
     158:	0b bf       	out	0x3b, r16	; 59
     15a:	02 c0       	rjmp	.+4      	; 0x160 <__do_copy_data+0x14>
     15c:	07 90       	elpm	r0, Z+
     15e:	0d 92       	st	X+, r0
     160:	a6 37       	cpi	r26, 0x76	; 118
     162:	b1 07       	cpc	r27, r17
     164:	d9 f7       	brne	.-10     	; 0x15c <__do_copy_data+0x10>

00000166 <__do_clear_bss>:
     166:	24 e0       	ldi	r18, 0x04	; 4
     168:	a6 e7       	ldi	r26, 0x76	; 118
     16a:	b3 e0       	ldi	r27, 0x03	; 3
     16c:	01 c0       	rjmp	.+2      	; 0x170 <.do_clear_bss_start>

0000016e <.do_clear_bss_loop>:
     16e:	1d 92       	st	X+, r1

00000170 <.do_clear_bss_start>:
     170:	a7 37       	cpi	r26, 0x77	; 119
     172:	b2 07       	cpc	r27, r18
     174:	e1 f7       	brne	.-8      	; 0x16e <.do_clear_bss_loop>
     176:	03 d0       	rcall	.+6      	; 0x17e <main>
     178:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <_exit>

0000017c <__bad_interrupt>:
     17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <main>:
{
	//uint8_t OneTimeRunFunFlag=0;
	
	
	float stepdelay;
	USART2_Init(MYUBRR);
     17e:	87 e6       	ldi	r24, 0x67	; 103
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	2d d4       	rcall	.+2138   	; 0x9de <USART2_Init>
	USART0_Init(MYUBRR);
     184:	87 e6       	ldi	r24, 0x67	; 103
     186:	90 e0       	ldi	r25, 0x00	; 0
	GpioPinInit();
     188:	09 d4       	rcall	.+2066   	; 0x99c <USART0_Init>
	//Timer1_init();
	USART0_transmitstring("page Main");
     18a:	64 d3       	rcall	.+1736   	; 0x854 <GpioPinInit>
     18c:	82 e0       	ldi	r24, 0x02	; 2
     18e:	92 e0       	ldi	r25, 0x02	; 2
	Send_FF_to_Display();
     190:	18 d4       	rcall	.+2096   	; 0x9c2 <USART0_transmitstring>
     192:	a5 d5       	rcall	.+2890   	; 0xcde <Send_FF_to_Display>
	if (EEPROM_Read2Bytes(P4_REG_E_WAIT_TIME_ADD)==0xFFFF)
     194:	8e e5       	ldi	r24, 0x5E	; 94
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	27 d3       	rcall	.+1614   	; 0x7e8 <EEPROM_Read2Bytes>
     19a:	01 96       	adiw	r24, 0x01	; 1
     19c:	09 f4       	brne	.+2      	; 0x1a0 <main+0x22>
		EEPROM_DisplayDataInit();
     19e:	ad d5       	rcall	.+2906   	; 0xcfa <EEPROM_DisplayDataInit>
     1a0:	78 94       	sei
	//_delay_ms(2000);
	sei();		// To enable Global Interrupt, cli(); for disable
     1a2:	c2 e3       	ldi	r28, 0x32	; 50
												break;
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P3_REG_A_END_BLOWER_TIME_ADD);
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a6:	91 ee       	ldi	r25, 0xE1	; 225
     1a8:	a4 e0       	ldi	r26, 0x04	; 4
     1aa:	81 50       	subi	r24, 0x01	; 1
     1ac:	90 40       	sbci	r25, 0x00	; 0
     1ae:	a0 40       	sbci	r26, 0x00	; 0
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x2c>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x36>
     1b4:	00 00       	nop
		
		
		_delay_ms(DELAY_IN_LOOP);
		//USART2_transmitstring("at Home ");
		//USART0_transmitstring("Home ");
		switch(MatchCommand(rec_bufferglob))
     1b6:	85 e4       	ldi	r24, 0x45	; 69
     1b8:	94 e0       	ldi	r25, 0x04	; 4
     1ba:	55 d4       	rcall	.+2218   	; 0xa66 <MatchCommand>
     1bc:	83 30       	cpi	r24, 0x03	; 3
     1be:	09 f4       	brne	.+2      	; 0x1c2 <main+0x44>
     1c0:	25 c1       	rjmp	.+586    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     1c2:	30 f4       	brcc	.+12     	; 0x1d0 <main+0x52>
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	59 f0       	breq	.+22     	; 0x1de <main+0x60>
     1c8:	82 30       	cpi	r24, 0x02	; 2
     1ca:	09 f4       	brne	.+2      	; 0x1ce <main+0x50>
     1cc:	c0 c0       	rjmp	.+384    	; 0x34e <main+0x1d0>
     1ce:	ea cf       	rjmp	.-44     	; 0x1a4 <main+0x26>
     1d0:	84 30       	cpi	r24, 0x04	; 4
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <main+0x58>
     1d4:	7a c1       	rjmp	.+756    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     1d6:	82 31       	cpi	r24, 0x12	; 18
     1d8:	09 f4       	brne	.+2      	; 0x1dc <main+0x5e>
     1da:	d6 c1       	rjmp	.+940    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     1dc:	e3 cf       	rjmp	.-58     	; 0x1a4 <main+0x26>
     1de:	bf ef       	ldi	r27, 0xFF	; 255
     1e0:	21 ee       	ldi	r18, 0xE1	; 225
     1e2:	84 e0       	ldi	r24, 0x04	; 4
     1e4:	b1 50       	subi	r27, 0x01	; 1
     1e6:	20 40       	sbci	r18, 0x00	; 0
     1e8:	80 40       	sbci	r24, 0x00	; 0
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x66>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x70>
     1ee:	00 00       	nop
					{	
						
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     1f0:	85 e4       	ldi	r24, 0x45	; 69
     1f2:	94 e0       	ldi	r25, 0x04	; 4
     1f4:	38 d4       	rcall	.+2160   	; 0xa66 <MatchCommand>
     1f6:	85 30       	cpi	r24, 0x05	; 5
     1f8:	09 f4       	brne	.+2      	; 0x1fc <main+0x7e>
     1fa:	5f c0       	rjmp	.+190    	; 0x2ba <main+0x13c>
     1fc:	86 30       	cpi	r24, 0x06	; 6
     1fe:	09 f0       	breq	.+2      	; 0x202 <main+0x84>
     200:	98 c0       	rjmp	.+304    	; 0x332 <main+0x1b4>
     202:	9f ef       	ldi	r25, 0xFF	; 255
     204:	a1 ee       	ldi	r26, 0xE1	; 225
     206:	b4 e0       	ldi	r27, 0x04	; 4
     208:	91 50       	subi	r25, 0x01	; 1
     20a:	a0 40       	sbci	r26, 0x00	; 0
     20c:	b0 40       	sbci	r27, 0x00	; 0
     20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x8a>
							{	
								case START:
									{
										_delay_ms(100);
										USART0_transmitstring("page STATUS");
     210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x94>
     212:	00 00       	nop
     214:	8c e0       	ldi	r24, 0x0C	; 12
     216:	92 e0       	ldi	r25, 0x02	; 2
										Send_FF_to_Display();
     218:	d4 d3       	rcall	.+1960   	; 0x9c2 <USART0_transmitstring>
     21a:	61 d5       	rcall	.+2754   	; 0xcde <Send_FF_to_Display>
										Send_Text_On_Screen("Program 1 Initiated");
     21c:	88 e1       	ldi	r24, 0x18	; 24
     21e:	92 e0       	ldi	r25, 0x02	; 2
     220:	03 d7       	rcall	.+3590   	; 0x1028 <Send_Text_On_Screen>
     222:	2f ef       	ldi	r18, 0xFF	; 255
     224:	8d e3       	ldi	r24, 0x3D	; 61
     226:	99 e4       	ldi	r25, 0x49	; 73
     228:	21 50       	subi	r18, 0x01	; 1
     22a:	80 40       	sbci	r24, 0x00	; 0
     22c:	90 40       	sbci	r25, 0x00	; 0
										_delay_ms(1500);
										Send_Text_On_Screen("Drying Cycle In Progress...");
     22e:	e1 f7       	brne	.-8      	; 0x228 <main+0xaa>
     230:	00 c0       	rjmp	.+0      	; 0x232 <main+0xb4>
     232:	00 00       	nop
										Blower_ON(EEPROM_Read2Bytes(P1_REG_A_START_BLOWER_TIME_ADD));
     234:	8c e2       	ldi	r24, 0x2C	; 44
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	f7 d6       	rcall	.+3566   	; 0x1028 <Send_Text_On_Screen>
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
										Send_Text_On_Screen("Cycle 1 In Progress...");
     23e:	d4 d2       	rcall	.+1448   	; 0x7e8 <EEPROM_Read2Bytes>
     240:	30 d7       	rcall	.+3680   	; 0x10a2 <Blower_ON>
										Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_A_QTY_ADD), &Reagent_A_pump);
     242:	88 e4       	ldi	r24, 0x48	; 72
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	f0 d6       	rcall	.+3552   	; 0x1028 <Send_Text_On_Screen>
     248:	84 e0       	ldi	r24, 0x04	; 4
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	cd d2       	rcall	.+1434   	; 0x7e8 <EEPROM_Read2Bytes>
										Send_Text_On_Screen("Cycle 2 In Progress...");
     24e:	6f e7       	ldi	r22, 0x7F	; 127
     250:	73 e0       	ldi	r23, 0x03	; 3
     252:	4d d7       	rcall	.+3738   	; 0x10ee <Dispense_Reagent>
										Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_B_QTY_ADD), &Reagent_A_pump);
     254:	8f e5       	ldi	r24, 0x5F	; 95
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	e7 d6       	rcall	.+3534   	; 0x1028 <Send_Text_On_Screen>
     25a:	88 e0       	ldi	r24, 0x08	; 8
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	c4 d2       	rcall	.+1416   	; 0x7e8 <EEPROM_Read2Bytes>
										Send_Text_On_Screen("Cycle 3 In Progress...");
     260:	6f e7       	ldi	r22, 0x7F	; 127
     262:	73 e0       	ldi	r23, 0x03	; 3
     264:	44 d7       	rcall	.+3720   	; 0x10ee <Dispense_Reagent>
										Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_C_QTY_ADD), &Reagent_A_pump);
     266:	86 e7       	ldi	r24, 0x76	; 118
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	de d6       	rcall	.+3516   	; 0x1028 <Send_Text_On_Screen>
     26c:	8c e0       	ldi	r24, 0x0C	; 12
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	bb d2       	rcall	.+1398   	; 0x7e8 <EEPROM_Read2Bytes>
										Send_Text_On_Screen("Cycle 4 In Progress...");
     272:	6f e7       	ldi	r22, 0x7F	; 127
     274:	73 e0       	ldi	r23, 0x03	; 3
										Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_D_QTY_ADD), &Reagent_A_pump);
     276:	3b d7       	rcall	.+3702   	; 0x10ee <Dispense_Reagent>
     278:	8d e8       	ldi	r24, 0x8D	; 141
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	d5 d6       	rcall	.+3498   	; 0x1028 <Send_Text_On_Screen>
     27e:	80 e1       	ldi	r24, 0x10	; 16
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	b2 d2       	rcall	.+1380   	; 0x7e8 <EEPROM_Read2Bytes>
     284:	6f e7       	ldi	r22, 0x7F	; 127
										Send_Text_On_Screen("Cycle 5 In Progress...");
     286:	73 e0       	ldi	r23, 0x03	; 3
     288:	32 d7       	rcall	.+3684   	; 0x10ee <Dispense_Reagent>
     28a:	84 ea       	ldi	r24, 0xA4	; 164
     28c:	92 e0       	ldi	r25, 0x02	; 2
										Dispense_Reagent(EEPROM_Read2Bytes(P1_REG_E_QTY_ADD), &Reagent_A_pump);
     28e:	cc d6       	rcall	.+3480   	; 0x1028 <Send_Text_On_Screen>
     290:	84 e1       	ldi	r24, 0x14	; 20
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	a9 d2       	rcall	.+1362   	; 0x7e8 <EEPROM_Read2Bytes>
     296:	6f e7       	ldi	r22, 0x7F	; 127
     298:	73 e0       	ldi	r23, 0x03	; 3
     29a:	29 d7       	rcall	.+3666   	; 0x10ee <Dispense_Reagent>
										Send_Text_On_Screen("Drying Cycle In Progress...");
     29c:	8c e2       	ldi	r24, 0x2C	; 44
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	c3 d6       	rcall	.+3462   	; 0x1028 <Send_Text_On_Screen>
     2a2:	82 e0       	ldi	r24, 0x02	; 2
										Blower_ON(EEPROM_Read2Bytes(P1_REG_A_END_BLOWER_TIME_ADD));
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	a0 d2       	rcall	.+1344   	; 0x7e8 <EEPROM_Read2Bytes>
     2a8:	fc d6       	rcall	.+3576   	; 0x10a2 <Blower_ON>
     2aa:	e5 e4       	ldi	r30, 0x45	; 69
     2ac:	f4 e0       	ldi	r31, 0x04	; 4
										
										memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     2ae:	df 01       	movw	r26, r30
     2b0:	2c 2f       	mov	r18, r28
     2b2:	1d 92       	st	X+, r1
     2b4:	2a 95       	dec	r18
     2b6:	e9 f7       	brne	.-6      	; 0x2b2 <main+0x134>
										break;
     2b8:	3c c0       	rjmp	.+120    	; 0x332 <main+0x1b4>
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	91 ee       	ldi	r25, 0xE1	; 225
     2be:	a4 e0       	ldi	r26, 0x04	; 4
     2c0:	81 50       	subi	r24, 0x01	; 1
     2c2:	90 40       	sbci	r25, 0x00	; 0
     2c4:	a0 40       	sbci	r26, 0x00	; 0
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x142>
								case P1EDIT:
									{	
										while(1)
										{
											_delay_ms(DELAY_IN_LOOP);
											switch(MatchCommand(rec_bufferglob))
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x14c>
     2ca:	00 00       	nop
     2cc:	85 e4       	ldi	r24, 0x45	; 69
     2ce:	94 e0       	ldi	r25, 0x04	; 4
     2d0:	ca d3       	rcall	.+1940   	; 0xa66 <MatchCommand>
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	fc 01       	movw	r30, r24
     2d6:	37 97       	sbiw	r30, 0x07	; 7
     2d8:	eb 30       	cpi	r30, 0x0B	; 11
     2da:	f1 05       	cpc	r31, r1
     2dc:	f0 f4       	brcc	.+60     	; 0x31a <main+0x19c>
     2de:	88 27       	eor	r24, r24
     2e0:	ee 58       	subi	r30, 0x8E	; 142
											{
												case REG_START_BLO_TIME:
												{
													StartBlowerTimeSelected(P1_REG_A_START_BLOWER_TIME_ADD);
     2e2:	ff 4f       	sbci	r31, 0xFF	; 255
     2e4:	8f 4f       	sbci	r24, 0xFF	; 255
     2e6:	04 c7       	rjmp	.+3592   	; 0x10f0 <__tablejump2__>
													break;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
												}
													
												case REG_END_BLO_TIME:
												{
													EndBlowerTimeSelected(P1_REG_A_END_BLOWER_TIME_ADD);
     2ea:	c3 d5       	rcall	.+2950   	; 0xe72 <StartBlowerTimeSelected>
     2ec:	16 c0       	rjmp	.+44     	; 0x31a <main+0x19c>
													break;
     2ee:	82 e0       	ldi	r24, 0x02	; 2
												}
												
												case REGA:
												{
													ReagentSelected(P1_REG_A_QTY_ADD, P1_REG_A_WAIT_TIME_ADD);
     2f0:	09 d6       	rcall	.+3090   	; 0xf04 <EndBlowerTimeSelected>
     2f2:	13 c0       	rjmp	.+38     	; 0x31a <main+0x19c>
     2f4:	66 e0       	ldi	r22, 0x06	; 6
     2f6:	84 e0       	ldi	r24, 0x04	; 4
													break;
     2f8:	13 d5       	rcall	.+2598   	; 0xd20 <ReagentSelected>
												}
												
												case REGB:
												{
													ReagentSelected(P1_REG_B_QTY_ADD, P1_REG_B_WAIT_TIME_ADD);
     2fa:	0f c0       	rjmp	.+30     	; 0x31a <main+0x19c>
     2fc:	6a e0       	ldi	r22, 0x0A	; 10
     2fe:	88 e0       	ldi	r24, 0x08	; 8
     300:	0f d5       	rcall	.+2590   	; 0xd20 <ReagentSelected>
													break;
     302:	0b c0       	rjmp	.+22     	; 0x31a <main+0x19c>
												}
												
												case REGC:
												{
													ReagentSelected(P1_REG_C_QTY_ADD, P1_REG_C_WAIT_TIME_ADD);
     304:	6e e0       	ldi	r22, 0x0E	; 14
     306:	8c e0       	ldi	r24, 0x0C	; 12
     308:	0b d5       	rcall	.+2582   	; 0xd20 <ReagentSelected>
     30a:	07 c0       	rjmp	.+14     	; 0x31a <main+0x19c>
													break;
     30c:	62 e1       	ldi	r22, 0x12	; 18
												}
												
												case REGD:
												{
													ReagentSelected(P1_REG_D_QTY_ADD, P1_REG_D_WAIT_TIME_ADD);
     30e:	80 e1       	ldi	r24, 0x10	; 16
     310:	07 d5       	rcall	.+2574   	; 0xd20 <ReagentSelected>
     312:	03 c0       	rjmp	.+6      	; 0x31a <main+0x19c>
     314:	66 e1       	ldi	r22, 0x16	; 22
													break;
     316:	84 e1       	ldi	r24, 0x14	; 20
												}
												case REGE:
												{
													ReagentSelected(P1_REG_E_QTY_ADD, P1_REG_E_WAIT_TIME_ADD);
     318:	03 d5       	rcall	.+2566   	; 0xd20 <ReagentSelected>
     31a:	85 e4       	ldi	r24, 0x45	; 69
     31c:	94 e0       	ldi	r25, 0x04	; 4
													break;
												}
													
											}
											
											if (MatchCommand(rec_bufferglob)==BACK)
     31e:	a3 d3       	rcall	.+1862   	; 0xa66 <MatchCommand>
     320:	84 36       	cpi	r24, 0x64	; 100
     322:	59 f6       	brne	.-106    	; 0x2ba <main+0x13c>
     324:	e5 e4       	ldi	r30, 0x45	; 69
     326:	f4 e0       	ldi	r31, 0x04	; 4
											{
												memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     328:	df 01       	movw	r26, r30
     32a:	2c 2f       	mov	r18, r28
     32c:	1d 92       	st	X+, r1
     32e:	2a 95       	dec	r18
     330:	e9 f7       	brne	.-6      	; 0x32c <main+0x1ae>
     332:	85 e4       	ldi	r24, 0x45	; 69
     334:	94 e0       	ldi	r25, 0x04	; 4
										break;
									}
									
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     336:	97 d3       	rcall	.+1838   	; 0xa66 <MatchCommand>
     338:	84 36       	cpi	r24, 0x64	; 100
     33a:	09 f0       	breq	.+2      	; 0x33e <main+0x1c0>
     33c:	50 cf       	rjmp	.-352    	; 0x1de <main+0x60>
     33e:	e5 e4       	ldi	r30, 0x45	; 69
     340:	f4 e0       	ldi	r31, 0x04	; 4
								{
									memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     342:	df 01       	movw	r26, r30
     344:	2c 2f       	mov	r18, r28
     346:	1d 92       	st	X+, r1
     348:	2a 95       	dec	r18
     34a:	e9 f7       	brne	.-6      	; 0x346 <main+0x1c8>
     34c:	2b cf       	rjmp	.-426    	; 0x1a4 <main+0x26>
     34e:	8f ef       	ldi	r24, 0xFF	; 255
									break;
								}
						}
						
						break;
     350:	91 ee       	ldi	r25, 0xE1	; 225
     352:	a4 e0       	ldi	r26, 0x04	; 4
     354:	81 50       	subi	r24, 0x01	; 1
     356:	90 40       	sbci	r25, 0x00	; 0
     358:	a0 40       	sbci	r26, 0x00	; 0
     35a:	e1 f7       	brne	.-8      	; 0x354 <main+0x1d6>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x1e0>
			case PROGRAM_2:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     35e:	00 00       	nop
     360:	85 e4       	ldi	r24, 0x45	; 69
     362:	94 e0       	ldi	r25, 0x04	; 4
     364:	80 d3       	rcall	.+1792   	; 0xa66 <MatchCommand>
     366:	85 30       	cpi	r24, 0x05	; 5
     368:	39 f0       	breq	.+14     	; 0x378 <main+0x1fa>
     36a:	86 30       	cpi	r24, 0x06	; 6
							{
								case START:
								{
									USART2_transmitstring("Start");
     36c:	09 f0       	breq	.+2      	; 0x370 <main+0x1f2>
     36e:	40 c0       	rjmp	.+128    	; 0x3f0 <main+0x272>
     370:	8b eb       	ldi	r24, 0xBB	; 187
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	57 d3       	rcall	.+1710   	; 0xa24 <USART2_transmitstring>
     376:	3c c0       	rjmp	.+120    	; 0x3f0 <main+0x272>
     378:	bf ef       	ldi	r27, 0xFF	; 255
     37a:	21 ee       	ldi	r18, 0xE1	; 225
     37c:	84 e0       	ldi	r24, 0x04	; 4
     37e:	b1 50       	subi	r27, 0x01	; 1
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     380:	20 40       	sbci	r18, 0x00	; 0
     382:	80 40       	sbci	r24, 0x00	; 0
     384:	e1 f7       	brne	.-8      	; 0x37e <main+0x200>
     386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x20a>
     388:	00 00       	nop
     38a:	85 e4       	ldi	r24, 0x45	; 69
     38c:	94 e0       	ldi	r25, 0x04	; 4
     38e:	6b d3       	rcall	.+1750   	; 0xa66 <MatchCommand>
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	fc 01       	movw	r30, r24
     394:	37 97       	sbiw	r30, 0x07	; 7
     396:	eb 30       	cpi	r30, 0x0B	; 11
     398:	f1 05       	cpc	r31, r1
     39a:	f0 f4       	brcc	.+60     	; 0x3d8 <main+0x25a>
     39c:	88 27       	eor	r24, r24
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P2_REG_A_START_BLOWER_TIME_ADD);
     39e:	e3 58       	subi	r30, 0x83	; 131
     3a0:	ff 4f       	sbci	r31, 0xFF	; 255
     3a2:	8f 4f       	sbci	r24, 0xFF	; 255
												break;
     3a4:	a5 c6       	rjmp	.+3402   	; 0x10f0 <__tablejump2__>
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P2_REG_A_END_BLOWER_TIME_ADD);
     3a6:	88 e1       	ldi	r24, 0x18	; 24
     3a8:	64 d5       	rcall	.+2760   	; 0xe72 <StartBlowerTimeSelected>
     3aa:	16 c0       	rjmp	.+44     	; 0x3d8 <main+0x25a>
												break;
     3ac:	8a e1       	ldi	r24, 0x1A	; 26
											}
											
											case REGA:
											{
												ReagentSelected(P2_REG_A_QTY_ADD, P2_REG_A_WAIT_TIME_ADD);
     3ae:	aa d5       	rcall	.+2900   	; 0xf04 <EndBlowerTimeSelected>
     3b0:	13 c0       	rjmp	.+38     	; 0x3d8 <main+0x25a>
     3b2:	6e e1       	ldi	r22, 0x1E	; 30
     3b4:	8c e1       	ldi	r24, 0x1C	; 28
												break;
     3b6:	b4 d4       	rcall	.+2408   	; 0xd20 <ReagentSelected>
											}
											
											case REGB:
											{
												ReagentSelected(P2_REG_B_QTY_ADD, P2_REG_B_WAIT_TIME_ADD);
     3b8:	0f c0       	rjmp	.+30     	; 0x3d8 <main+0x25a>
     3ba:	62 e2       	ldi	r22, 0x22	; 34
     3bc:	80 e2       	ldi	r24, 0x20	; 32
												break;
     3be:	b0 d4       	rcall	.+2400   	; 0xd20 <ReagentSelected>
											}
											
											case REGC:
											{
												ReagentSelected(P2_REG_C_QTY_ADD, P2_REG_C_WAIT_TIME_ADD);
     3c0:	0b c0       	rjmp	.+22     	; 0x3d8 <main+0x25a>
     3c2:	66 e2       	ldi	r22, 0x26	; 38
     3c4:	84 e2       	ldi	r24, 0x24	; 36
     3c6:	ac d4       	rcall	.+2392   	; 0xd20 <ReagentSelected>
												break;
     3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <main+0x25a>
											}
											
											case REGD:
											{
												ReagentSelected(P2_REG_D_QTY_ADD, P2_REG_D_WAIT_TIME_ADD);
     3ca:	6a e2       	ldi	r22, 0x2A	; 42
     3cc:	88 e2       	ldi	r24, 0x28	; 40
     3ce:	a8 d4       	rcall	.+2384   	; 0xd20 <ReagentSelected>
												break;
     3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <main+0x25a>
											}
											case REGE:
											{
												ReagentSelected(P2_REG_E_QTY_ADD, P2_REG_E_WAIT_TIME_ADD);
     3d2:	6e e2       	ldi	r22, 0x2E	; 46
     3d4:	8c e2       	ldi	r24, 0x2C	; 44
     3d6:	a4 d4       	rcall	.+2376   	; 0xd20 <ReagentSelected>
     3d8:	85 e4       	ldi	r24, 0x45	; 69
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     3da:	94 e0       	ldi	r25, 0x04	; 4
     3dc:	44 d3       	rcall	.+1672   	; 0xa66 <MatchCommand>
     3de:	84 36       	cpi	r24, 0x64	; 100
     3e0:	59 f6       	brne	.-106    	; 0x378 <main+0x1fa>
     3e2:	e5 e4       	ldi	r30, 0x45	; 69
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     3e4:	f4 e0       	ldi	r31, 0x04	; 4
     3e6:	df 01       	movw	r26, r30
     3e8:	2c 2f       	mov	r18, r28
     3ea:	1d 92       	st	X+, r1
     3ec:	2a 95       	dec	r18
     3ee:	e9 f7       	brne	.-6      	; 0x3ea <main+0x26c>
     3f0:	85 e4       	ldi	r24, 0x45	; 69
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     3f2:	94 e0       	ldi	r25, 0x04	; 4
     3f4:	38 d3       	rcall	.+1648   	; 0xa66 <MatchCommand>
     3f6:	84 36       	cpi	r24, 0x64	; 100
     3f8:	09 f0       	breq	.+2      	; 0x3fc <main+0x27e>
     3fa:	a9 cf       	rjmp	.-174    	; 0x34e <main+0x1d0>
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     3fc:	e5 e4       	ldi	r30, 0x45	; 69
     3fe:	f4 e0       	ldi	r31, 0x04	; 4
     400:	df 01       	movw	r26, r30
     402:	2c 2f       	mov	r18, r28
     404:	1d 92       	st	X+, r1
								break;
							}
						}
						break;
     406:	2a 95       	dec	r18
     408:	e9 f7       	brne	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     40a:	cc ce       	rjmp	.-616    	; 0x1a4 <main+0x26>
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	91 ee       	ldi	r25, 0xE1	; 225
     410:	a4 e0       	ldi	r26, 0x04	; 4
     412:	81 50       	subi	r24, 0x01	; 1
     414:	90 40       	sbci	r25, 0x00	; 0
			case PROGRAM_3:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     416:	a0 40       	sbci	r26, 0x00	; 0
     418:	e1 f7       	brne	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41c:	00 00       	nop
     41e:	85 e4       	ldi	r24, 0x45	; 69
     420:	94 e0       	ldi	r25, 0x04	; 4
     422:	21 d3       	rcall	.+1602   	; 0xa66 <MatchCommand>
							{
								case START:
								{
									USART2_transmitstring("Start");
     424:	85 30       	cpi	r24, 0x05	; 5
     426:	39 f0       	breq	.+14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     428:	86 30       	cpi	r24, 0x06	; 6
     42a:	09 f0       	breq	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
									break;
     42c:	40 c0       	rjmp	.+128    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     42e:	8b eb       	ldi	r24, 0xBB	; 187
     430:	92 e0       	ldi	r25, 0x02	; 2
     432:	f8 d2       	rcall	.+1520   	; 0xa24 <USART2_transmitstring>
     434:	3c c0       	rjmp	.+120    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     436:	bf ef       	ldi	r27, 0xFF	; 255
     438:	21 ee       	ldi	r18, 0xE1	; 225
     43a:	84 e0       	ldi	r24, 0x04	; 4
     43c:	b1 50       	subi	r27, 0x01	; 1
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     43e:	20 40       	sbci	r18, 0x00	; 0
     440:	80 40       	sbci	r24, 0x00	; 0
     442:	e1 f7       	brne	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     446:	00 00       	nop
     448:	85 e4       	ldi	r24, 0x45	; 69
     44a:	94 e0       	ldi	r25, 0x04	; 4
     44c:	0c d3       	rcall	.+1560   	; 0xa66 <MatchCommand>
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	fc 01       	movw	r30, r24
     452:	37 97       	sbiw	r30, 0x07	; 7
     454:	eb 30       	cpi	r30, 0x0B	; 11
     456:	f1 05       	cpc	r31, r1
     458:	f0 f4       	brcc	.+60     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     45a:	88 27       	eor	r24, r24
     45c:	e8 57       	subi	r30, 0x78	; 120
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P3_REG_A_START_BLOWER_TIME_ADD);
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	8f 4f       	sbci	r24, 0xFF	; 255
     462:	46 c6       	rjmp	.+3212   	; 0x10f0 <__tablejump2__>
												break;
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P3_REG_A_END_BLOWER_TIME_ADD);
     464:	80 e3       	ldi	r24, 0x30	; 48
     466:	05 d5       	rcall	.+2570   	; 0xe72 <StartBlowerTimeSelected>
     468:	16 c0       	rjmp	.+44     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
												break;
     46a:	8c 2f       	mov	r24, r28
											}
											
											case REGA:
											{
												ReagentSelected(P3_REG_A_QTY_ADD, P3_REG_A_WAIT_TIME_ADD);
     46c:	4b d5       	rcall	.+2710   	; 0xf04 <EndBlowerTimeSelected>
     46e:	13 c0       	rjmp	.+38     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     470:	66 e3       	ldi	r22, 0x36	; 54
												break;
     472:	84 e3       	ldi	r24, 0x34	; 52
											}
											
											case REGB:
											{
												ReagentSelected(P3_REG_B_QTY_ADD, P3_REG_B_WAIT_TIME_ADD);
     474:	55 d4       	rcall	.+2218   	; 0xd20 <ReagentSelected>
     476:	0f c0       	rjmp	.+30     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     478:	6a e3       	ldi	r22, 0x3A	; 58
     47a:	88 e3       	ldi	r24, 0x38	; 56
												break;
     47c:	51 d4       	rcall	.+2210   	; 0xd20 <ReagentSelected>
											}
											
											case REGC:
											{
												ReagentSelected(P3_REG_C_QTY_ADD, P3_REG_C_WAIT_TIME_ADD);
     47e:	0b c0       	rjmp	.+22     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     480:	6e e3       	ldi	r22, 0x3E	; 62
     482:	8c e3       	ldi	r24, 0x3C	; 60
     484:	4d d4       	rcall	.+2202   	; 0xd20 <ReagentSelected>
												break;
     486:	07 c0       	rjmp	.+14     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
											}
											
											case REGD:
											{
												ReagentSelected(P3_REG_D_QTY_ADD, P3_REG_D_WAIT_TIME_ADD);
     488:	62 e4       	ldi	r22, 0x42	; 66
     48a:	80 e4       	ldi	r24, 0x40	; 64
     48c:	49 d4       	rcall	.+2194   	; 0xd20 <ReagentSelected>
												break;
     48e:	03 c0       	rjmp	.+6      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
											}
											case REGE:
											{
												ReagentSelected(P3_REG_E_QTY_ADD, P3_REG_E_WAIT_TIME_ADD);
     490:	66 e4       	ldi	r22, 0x46	; 70
     492:	84 e4       	ldi	r24, 0x44	; 68
     494:	45 d4       	rcall	.+2186   	; 0xd20 <ReagentSelected>
     496:	85 e4       	ldi	r24, 0x45	; 69
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     498:	94 e0       	ldi	r25, 0x04	; 4
     49a:	e5 d2       	rcall	.+1482   	; 0xa66 <MatchCommand>
     49c:	84 36       	cpi	r24, 0x64	; 100
     49e:	59 f6       	brne	.-106    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     4a0:	e5 e4       	ldi	r30, 0x45	; 69
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     4a2:	f4 e0       	ldi	r31, 0x04	; 4
     4a4:	df 01       	movw	r26, r30
     4a6:	2c 2f       	mov	r18, r28
     4a8:	1d 92       	st	X+, r1
     4aa:	2a 95       	dec	r18
     4ac:	e9 f7       	brne	.-6      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     4ae:	85 e4       	ldi	r24, 0x45	; 69
     4b0:	94 e0       	ldi	r25, 0x04	; 4
     4b2:	d9 d2       	rcall	.+1458   	; 0xa66 <MatchCommand>
     4b4:	84 36       	cpi	r24, 0x64	; 100
     4b6:	09 f0       	breq	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b8:	a9 cf       	rjmp	.-174    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     4ba:	e5 e4       	ldi	r30, 0x45	; 69
     4bc:	f4 e0       	ldi	r31, 0x04	; 4
     4be:	df 01       	movw	r26, r30
     4c0:	2c 2f       	mov	r18, r28
     4c2:	1d 92       	st	X+, r1
								break;
							}
						}
						break;
     4c4:	2a 95       	dec	r18
     4c6:	e9 f7       	brne	.-6      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4c8:	6d ce       	rjmp	.-806    	; 0x1a4 <main+0x26>
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	91 ee       	ldi	r25, 0xE1	; 225
     4ce:	a4 e0       	ldi	r26, 0x04	; 4
     4d0:	81 50       	subi	r24, 0x01	; 1
     4d2:	90 40       	sbci	r25, 0x00	; 0
			case PROGRAM_4:
					{
						while(1)
						{
							_delay_ms(DELAY_IN_LOOP);
							switch(MatchCommand(rec_bufferglob))
     4d4:	a0 40       	sbci	r26, 0x00	; 0
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4da:	00 00       	nop
     4dc:	85 e4       	ldi	r24, 0x45	; 69
     4de:	94 e0       	ldi	r25, 0x04	; 4
     4e0:	c2 d2       	rcall	.+1412   	; 0xa66 <MatchCommand>
     4e2:	85 30       	cpi	r24, 0x05	; 5
							{
								case START:
								{
									USART2_transmitstring("Start");
     4e4:	39 f0       	breq	.+14     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4e6:	86 30       	cpi	r24, 0x06	; 6
     4e8:	09 f0       	breq	.+2      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4ea:	40 c0       	rjmp	.+128    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
									break;
     4ec:	8b eb       	ldi	r24, 0xBB	; 187
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	99 d2       	rcall	.+1330   	; 0xa24 <USART2_transmitstring>
     4f2:	3c c0       	rjmp	.+120    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     4f4:	bf ef       	ldi	r27, 0xFF	; 255
     4f6:	21 ee       	ldi	r18, 0xE1	; 225
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	b1 50       	subi	r27, 0x01	; 1
     4fc:	20 40       	sbci	r18, 0x00	; 0
     4fe:	80 40       	sbci	r24, 0x00	; 0
								case P1EDIT:
								{
									while(1)
									{
										_delay_ms(DELAY_IN_LOOP);
										switch(MatchCommand(rec_bufferglob))
     500:	e1 f7       	brne	.-8      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     502:	00 c0       	rjmp	.+0      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     504:	00 00       	nop
     506:	85 e4       	ldi	r24, 0x45	; 69
     508:	94 e0       	ldi	r25, 0x04	; 4
     50a:	ad d2       	rcall	.+1370   	; 0xa66 <MatchCommand>
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	fc 01       	movw	r30, r24
     510:	37 97       	sbiw	r30, 0x07	; 7
     512:	eb 30       	cpi	r30, 0x0B	; 11
     514:	f1 05       	cpc	r31, r1
     516:	f0 f4       	brcc	.+60     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     518:	88 27       	eor	r24, r24
     51a:	ed 56       	subi	r30, 0x6D	; 109
     51c:	ff 4f       	sbci	r31, 0xFF	; 255
										{
											case REG_START_BLO_TIME:
											{
												StartBlowerTimeSelected(P4_REG_A_START_BLOWER_TIME_ADD);
     51e:	8f 4f       	sbci	r24, 0xFF	; 255
     520:	e7 c5       	rjmp	.+3022   	; 0x10f0 <__tablejump2__>
     522:	88 e4       	ldi	r24, 0x48	; 72
												break;
     524:	a6 d4       	rcall	.+2380   	; 0xe72 <StartBlowerTimeSelected>
											}
											
											case REG_END_BLO_TIME:
											{
												EndBlowerTimeSelected(P4_REG_A_END_BLOWER_TIME_ADD);
     526:	16 c0       	rjmp	.+44     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     528:	8a e4       	ldi	r24, 0x4A	; 74
     52a:	ec d4       	rcall	.+2520   	; 0xf04 <EndBlowerTimeSelected>
												break;
     52c:	13 c0       	rjmp	.+38     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
											}
											
											case REGA:
											{
												ReagentSelected(P4_REG_A_QTY_ADD, P4_REG_A_WAIT_TIME_ADD);
     52e:	6e e4       	ldi	r22, 0x4E	; 78
     530:	8c e4       	ldi	r24, 0x4C	; 76
     532:	f6 d3       	rcall	.+2028   	; 0xd20 <ReagentSelected>
     534:	0f c0       	rjmp	.+30     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
												break;
     536:	62 e5       	ldi	r22, 0x52	; 82
											}
											
											case REGB:
											{
												ReagentSelected(P4_REG_B_QTY_ADD, P4_REG_B_WAIT_TIME_ADD);
     538:	80 e5       	ldi	r24, 0x50	; 80
     53a:	f2 d3       	rcall	.+2020   	; 0xd20 <ReagentSelected>
     53c:	0b c0       	rjmp	.+22     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     53e:	66 e5       	ldi	r22, 0x56	; 86
												break;
     540:	84 e5       	ldi	r24, 0x54	; 84
											}
											
											case REGC:
											{
												ReagentSelected(P4_REG_C_QTY_ADD, P4_REG_C_WAIT_TIME_ADD);
     542:	ee d3       	rcall	.+2012   	; 0xd20 <ReagentSelected>
     544:	07 c0       	rjmp	.+14     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     546:	6a e5       	ldi	r22, 0x5A	; 90
     548:	88 e5       	ldi	r24, 0x58	; 88
												break;
     54a:	ea d3       	rcall	.+2004   	; 0xd20 <ReagentSelected>
											}
											
											case REGD:
											{
												ReagentSelected(P4_REG_D_QTY_ADD, P4_REG_D_WAIT_TIME_ADD);
     54c:	03 c0       	rjmp	.+6      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     54e:	6e e5       	ldi	r22, 0x5E	; 94
     550:	8c e5       	ldi	r24, 0x5C	; 92
     552:	e6 d3       	rcall	.+1996   	; 0xd20 <ReagentSelected>
												break;
     554:	85 e4       	ldi	r24, 0x45	; 69
											}
											case REGE:
											{
												ReagentSelected(P4_REG_E_QTY_ADD, P4_REG_E_WAIT_TIME_ADD);
     556:	94 e0       	ldi	r25, 0x04	; 4
     558:	86 d2       	rcall	.+1292   	; 0xa66 <MatchCommand>
     55a:	84 36       	cpi	r24, 0x64	; 100
     55c:	59 f6       	brne	.-106    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
												break;
											}
											
										}
										
										if (MatchCommand(rec_bufferglob)==BACK)
     55e:	e5 e4       	ldi	r30, 0x45	; 69
     560:	f4 e0       	ldi	r31, 0x04	; 4
     562:	df 01       	movw	r26, r30
     564:	2c 2f       	mov	r18, r28
     566:	1d 92       	st	X+, r1
     568:	2a 95       	dec	r18
										{
											memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     56a:	e9 f7       	brne	.-6      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     56c:	85 e4       	ldi	r24, 0x45	; 69
     56e:	94 e0       	ldi	r25, 0x04	; 4
     570:	7a d2       	rcall	.+1268   	; 0xa66 <MatchCommand>
     572:	84 36       	cpi	r24, 0x64	; 100
     574:	09 f0       	breq	.+2      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     576:	a9 cf       	rjmp	.-174    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
									break;
								}
								
							}
							
							if (MatchCommand(rec_bufferglob)==BACK)
     578:	e5 e4       	ldi	r30, 0x45	; 69
     57a:	f4 e0       	ldi	r31, 0x04	; 4
     57c:	df 01       	movw	r26, r30
     57e:	2c 2f       	mov	r18, r28
     580:	1d 92       	st	X+, r1
     582:	2a 95       	dec	r18
     584:	e9 f7       	brne	.-6      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
							{
								memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     586:	0e ce       	rjmp	.-996    	; 0x1a4 <main+0x26>
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	91 ee       	ldi	r25, 0xE1	; 225
     58c:	a4 e0       	ldi	r26, 0x04	; 4
     58e:	81 50       	subi	r24, 0x01	; 1
     590:	90 40       	sbci	r25, 0x00	; 0
     592:	a0 40       	sbci	r26, 0x00	; 0
								break;
							}
						}
						break;
     594:	e1 f7       	brne	.-8      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     596:	00 c0       	rjmp	.+0      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     598:	00 00       	nop
     59a:	80 e6       	ldi	r24, 0x60	; 96
     59c:	fc d4       	rcall	.+2552   	; 0xf96 <SpinTimeSelected>
     59e:	02 ce       	rjmp	.-1020   	; 0x1a4 <main+0x26>

000005a0 <__vector_51>:
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
			case SERVICE:
				{
					while(1)
					{
						_delay_ms(DELAY_IN_LOOP);
						SpinTimeSelected(SPIN_TIME_ADD);
     5a8:	11 24       	eor	r1, r1
     5aa:	0b b6       	in	r0, 0x3b	; 59
     5ac:	0f 92       	push	r0
						break;
					}
					break;
     5ae:	2f 93       	push	r18
}



ISR(USART2_RX_vect)
{
     5b0:	3f 93       	push	r19
     5b2:	4f 93       	push	r20
     5b4:	5f 93       	push	r21
     5b6:	6f 93       	push	r22
     5b8:	7f 93       	push	r23
     5ba:	8f 93       	push	r24
     5bc:	9f 93       	push	r25
     5be:	af 93       	push	r26
     5c0:	bf 93       	push	r27
     5c2:	cf 93       	push	r28
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
	unsigned char rec = USART2_Receive();
     5c8:	1d d2       	rcall	.+1082   	; 0xa04 <USART2_Receive>
     5ca:	c8 2f       	mov	r28, r24
	USART2_Transmit(rec);
     5cc:	13 d2       	rcall	.+1062   	; 0x9f4 <USART2_Transmit>
     5ce:	cc 33       	cpi	r28, 0x3C	; 60
	//USART0_Transmit(rec);
	if ( (rec == '<') && (rec_start == 0)) // new packet receiving
     5d0:	c1 f4       	brne	.+48     	; 0x602 <__vector_51+0x62>
     5d2:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <rec_start>
     5d6:	81 11       	cpse	r24, r1
     5d8:	16 c0       	rjmp	.+44     	; 0x606 <__vector_51+0x66>
     5da:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <myindex>
	{
		myindex = 0;
     5de:	81 e0       	ldi	r24, 0x01	; 1
		rec_start = 1;
     5e0:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <rec_start>
     5e4:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// rec_buff clear
     5e6:	e7 e8       	ldi	r30, 0x87	; 135
     5e8:	f3 e0       	ldi	r31, 0x03	; 3
     5ea:	df 01       	movw	r26, r30
     5ec:	98 2f       	mov	r25, r24
     5ee:	1d 92       	st	X+, r1
     5f0:	9a 95       	dec	r25
     5f2:	e9 f7       	brne	.-6      	; 0x5ee <__vector_51+0x4e>
     5f4:	e5 e4       	ldi	r30, 0x45	; 69
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));	// rec_bufferglob clear
     5f6:	f4 e0       	ldi	r31, 0x04	; 4
     5f8:	df 01       	movw	r26, r30
     5fa:	1d 92       	st	X+, r1
     5fc:	8a 95       	dec	r24
     5fe:	e9 f7       	brne	.-6      	; 0x5fa <__vector_51+0x5a>
     600:	28 c0       	rjmp	.+80     	; 0x652 <__vector_51+0xb2>
     602:	ce 33       	cpi	r28, 0x3E	; 62
	}
	
	else if ( ( rec != '>') && (rec_start == 1)  )				// collecting data in buffer
     604:	11 f1       	breq	.+68     	; 0x64a <__vector_51+0xaa>
     606:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <rec_start>
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	11 f5       	brne	.+68     	; 0x652 <__vector_51+0xb2>
     60e:	e0 91 7e 03 	lds	r30, 0x037E	; 0x80037e <myindex>
	{
		rec_buff[myindex] = rec;
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	e9 57       	subi	r30, 0x79	; 121
     616:	fc 4f       	sbci	r31, 0xFC	; 252
     618:	c0 83       	st	Z, r28
     61a:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <myindex>
		myindex++;
     61e:	8f 5f       	subi	r24, 0xFF	; 255
     620:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <myindex>
     624:	16 c0       	rjmp	.+44     	; 0x652 <__vector_51+0xb2>
     626:	67 e8       	ldi	r22, 0x87	; 135
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )					// ending character received
	{
		strcpy(rec_bufferglob, rec_buff);						// copy data into rec_bufferglob
     628:	73 e0       	ldi	r23, 0x03	; 3
     62a:	85 e4       	ldi	r24, 0x45	; 69
     62c:	94 e0       	ldi	r25, 0x04	; 4
     62e:	7f d5       	rcall	.+2814   	; 0x112e <strcpy>
     630:	81 e0       	ldi	r24, 0x01	; 1
		rec_stop = 1;											// rec_stop flag 1
     632:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <rec_stop>
     636:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <rec_start>
		rec_start = 0;											// clear flag
     63a:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// clearing rec_buff so that it can receive new data
     63c:	e7 e8       	ldi	r30, 0x87	; 135
     63e:	f3 e0       	ldi	r31, 0x03	; 3
     640:	df 01       	movw	r26, r30
     642:	1d 92       	st	X+, r1
     644:	8a 95       	dec	r24
     646:	e9 f7       	brne	.-6      	; 0x642 <__vector_51+0xa2>
     648:	04 c0       	rjmp	.+8      	; 0x652 <__vector_51+0xb2>
		
	}
}
     64a:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <rec_start>
		myindex++;
		//rec = '\0';
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )					// ending character received
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	51 f3       	breq	.-44     	; 0x626 <__vector_51+0x86>
     652:	ff 91       	pop	r31
		rec_stop = 1;											// rec_stop flag 1
		rec_start = 0;											// clear flag
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));		// clearing rec_buff so that it can receive new data
		
	}
}
     654:	ef 91       	pop	r30
     656:	cf 91       	pop	r28
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	0b be       	out	0x3b, r0	; 59
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti

0000067a <__vector_25>:
     67a:	1f 92       	push	r1



ISR(USART0_RX_vect)
{
     67c:	0f 92       	push	r0
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	0f 92       	push	r0
     682:	11 24       	eor	r1, r1
     684:	0b b6       	in	r0, 0x3b	; 59
     686:	0f 92       	push	r0
     688:	2f 93       	push	r18
     68a:	3f 93       	push	r19
     68c:	4f 93       	push	r20
     68e:	5f 93       	push	r21
     690:	6f 93       	push	r22
     692:	7f 93       	push	r23
     694:	8f 93       	push	r24
     696:	9f 93       	push	r25
     698:	af 93       	push	r26
     69a:	bf 93       	push	r27
     69c:	cf 93       	push	r28
     69e:	ef 93       	push	r30
     6a0:	ff 93       	push	r31
	unsigned char rec = USART0_Receive();
     6a2:	b8 d1       	rcall	.+880    	; 0xa14 <USART0_Receive>
     6a4:	c8 2f       	mov	r28, r24
	USART2_Transmit(rec);
     6a6:	a6 d1       	rcall	.+844    	; 0x9f4 <USART2_Transmit>
     6a8:	cc 33       	cpi	r28, 0x3C	; 60
	//USART0_Transmit(rec);
	if ( (rec == '<') && (rec_start == 0)) // new packet
     6aa:	c1 f4       	brne	.+48     	; 0x6dc <__vector_25+0x62>
     6ac:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <rec_start>
     6b0:	81 11       	cpse	r24, r1
     6b2:	16 c0       	rjmp	.+44     	; 0x6e0 <__vector_25+0x66>
     6b4:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <myindex>
	{
		myindex = 0;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
		rec_start = 1;
     6ba:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <rec_start>
     6be:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));
     6c0:	e7 e8       	ldi	r30, 0x87	; 135
     6c2:	f3 e0       	ldi	r31, 0x03	; 3
     6c4:	df 01       	movw	r26, r30
     6c6:	98 2f       	mov	r25, r24
     6c8:	1d 92       	st	X+, r1
     6ca:	9a 95       	dec	r25
     6cc:	e9 f7       	brne	.-6      	; 0x6c8 <__vector_25+0x4e>
     6ce:	e5 e4       	ldi	r30, 0x45	; 69
		memset(rec_bufferglob, '\0', PACKET_SIZE * sizeof(rec_bufferglob[0]));
     6d0:	f4 e0       	ldi	r31, 0x04	; 4
     6d2:	df 01       	movw	r26, r30
     6d4:	1d 92       	st	X+, r1
     6d6:	8a 95       	dec	r24
     6d8:	e9 f7       	brne	.-6      	; 0x6d4 <__vector_25+0x5a>
     6da:	23 c0       	rjmp	.+70     	; 0x722 <__vector_25+0xa8>
     6dc:	ce 33       	cpi	r28, 0x3E	; 62
	}
	
	else if ( ( rec != '>') && (rec_start == 1)  )	// collecting data in buffer
     6de:	51 f1       	breq	.+84     	; 0x734 <__vector_25+0xba>
     6e0:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <rec_start>
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	e9 f4       	brne	.+58     	; 0x722 <__vector_25+0xa8>
     6e8:	e0 91 7e 03 	lds	r30, 0x037E	; 0x80037e <myindex>
	{
		rec_buff[myindex] = rec;
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	e9 57       	subi	r30, 0x79	; 121
     6f0:	fc 4f       	sbci	r31, 0xFC	; 252
     6f2:	c0 83       	st	Z, r28
     6f4:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <myindex>
		myindex++;
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <myindex>
     6fe:	11 c0       	rjmp	.+34     	; 0x722 <__vector_25+0xa8>
     700:	67 e8       	ldi	r22, 0x87	; 135
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )
	{
		strcpy(rec_bufferglob, rec_buff);
     702:	73 e0       	ldi	r23, 0x03	; 3
     704:	85 e4       	ldi	r24, 0x45	; 69
     706:	94 e0       	ldi	r25, 0x04	; 4
     708:	12 d5       	rcall	.+2596   	; 0x112e <strcpy>
     70a:	81 e0       	ldi	r24, 0x01	; 1
		//USART2_transmitstring(rec_bufferglob);
		rec_stop = 1;
     70c:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <rec_stop>
     710:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <rec_start>
		rec_start = 0;
     714:	82 e3       	ldi	r24, 0x32	; 50
		memset(rec_buff, '\0', PACKET_SIZE * sizeof(rec_buff[0]));
     716:	e7 e8       	ldi	r30, 0x87	; 135
     718:	f3 e0       	ldi	r31, 0x03	; 3
     71a:	df 01       	movw	r26, r30
     71c:	1d 92       	st	X+, r1
     71e:	8a 95       	dec	r24
     720:	e9 f7       	brne	.-6      	; 0x71c <__vector_25+0xa2>
     722:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <myindex>
		
	}
	if(myindex > (PACKET_SIZE -1 ))
     726:	82 33       	cpi	r24, 0x32	; 50
     728:	50 f0       	brcs	.+20     	; 0x73e <__vector_25+0xc4>
     72a:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <myindex>
	{
		myindex = 0;
     72e:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <rec_start>
		rec_start = 0;
     732:	05 c0       	rjmp	.+10     	; 0x73e <__vector_25+0xc4>
	}
}
     734:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <rec_start>
		myindex++;
		//rec = '\0';
		
	}
	
	if ( (rec == '>' ) && (rec_start == 1) )
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	99 f7       	brne	.-26     	; 0x722 <__vector_25+0xa8>
     73c:	e1 cf       	rjmp	.-62     	; 0x700 <__vector_25+0x86>
     73e:	ff 91       	pop	r31
	if(myindex > (PACKET_SIZE -1 ))
	{
		myindex = 0;
		rec_start = 0;
	}
}
     740:	ef 91       	pop	r30
     742:	cf 91       	pop	r28
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <__vector_20>:
     766:	1f 92       	push	r1
	TCCR1B = (5<<0);	// prescaler 1024
	
}
*/
ISR(TIMER1_OVF_vect)
{
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	0f 92       	push	r0
     76e:	11 24       	eor	r1, r1
     770:	8f 93       	push	r24
     772:	9f 93       	push	r25
	time_in_seconds++;
     774:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <time_in_seconds>
     778:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <time_in_seconds+0x1>
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <time_in_seconds+0x1>
     782:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <time_in_seconds>
// 	itoa(time_in_seconds, buffer, 10);
// 	USART2_transmitstring("n0= ");
// 	USART2_transmitstring(buffer);
	TCNT1 =0xC2F7;	// This value will generate 1 Sec delay for prescaler 1024 and 16 mhz crystel
     786:	87 ef       	ldi	r24, 0xF7	; 247
     788:	92 ec       	ldi	r25, 0xC2	; 194
     78a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     78e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCCR1B = (5<<0);	// prescaler 1024
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
}
     798:	9f 91       	pop	r25
     79a:	8f 91       	pop	r24
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <EEPROM_write>:
			GPIO_WriteToPin(&Motor_Steps, LOW);
			_delay_us(10);
		}
		Decrease_gradually_motor();
	}
}
     7a6:	f8 94       	cli
     7a8:	f9 99       	sbic	0x1f, 1	; 31
     7aa:	fe cf       	rjmp	.-4      	; 0x7a8 <EEPROM_write+0x2>
     7ac:	92 bd       	out	0x22, r25	; 34
     7ae:	81 bd       	out	0x21, r24	; 33
     7b0:	60 bd       	out	0x20, r22	; 32
     7b2:	fa 9a       	sbi	0x1f, 2	; 31
     7b4:	f9 9a       	sbi	0x1f, 1	; 31
     7b6:	78 94       	sei
     7b8:	08 95       	ret

000007ba <EEPROM_read>:
     7ba:	f9 99       	sbic	0x1f, 1	; 31
     7bc:	fe cf       	rjmp	.-4      	; 0x7ba <EEPROM_read>
     7be:	92 bd       	out	0x22, r25	; 34
     7c0:	81 bd       	out	0x21, r24	; 33
     7c2:	f8 9a       	sbi	0x1f, 0	; 31
     7c4:	80 b5       	in	r24, 0x20	; 32
     7c6:	08 95       	ret

000007c8 <EEPROM_Write2Bytes>:
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	ec 01       	movw	r28, r24
     7d0:	17 2f       	mov	r17, r23
     7d2:	f8 94       	cli
     7d4:	e8 df       	rcall	.-48     	; 0x7a6 <EEPROM_write>
     7d6:	61 2f       	mov	r22, r17
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	e4 df       	rcall	.-56     	; 0x7a6 <EEPROM_write>
     7de:	78 94       	sei
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	08 95       	ret

000007e8 <EEPROM_Read2Bytes>:
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	8c 01       	movw	r16, r24
     7f0:	e4 df       	rcall	.-56     	; 0x7ba <EEPROM_read>
     7f2:	c8 2f       	mov	r28, r24
     7f4:	c8 01       	movw	r24, r16
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	e0 df       	rcall	.-64     	; 0x7ba <EEPROM_read>
     7fa:	2c 2f       	mov	r18, r28
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	a9 01       	movw	r20, r18
     800:	58 2b       	or	r21, r24
     802:	ca 01       	movw	r24, r20
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <GPIO_Init>:
     80c:	fc 01       	movw	r30, r24
     80e:	83 81       	ldd	r24, Z+3	; 0x03
     810:	81 11       	cpse	r24, r1
     812:	11 c0       	rjmp	.+34     	; 0x836 <GPIO_Init+0x2a>
     814:	30 81       	ld	r19, Z
     816:	01 80       	ldd	r0, Z+1	; 0x01
     818:	f2 81       	ldd	r31, Z+2	; 0x02
     81a:	e0 2d       	mov	r30, r0
     81c:	22 91       	ld	r18, -Z
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	02 c0       	rjmp	.+4      	; 0x828 <GPIO_Init+0x1c>
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	3a 95       	dec	r19
     82a:	e2 f7       	brpl	.-8      	; 0x824 <GPIO_Init+0x18>
     82c:	80 95       	com	r24
     82e:	90 95       	com	r25
     830:	82 23       	and	r24, r18
     832:	80 83       	st	Z, r24
     834:	08 95       	ret
     836:	30 81       	ld	r19, Z
     838:	01 80       	ldd	r0, Z+1	; 0x01
     83a:	f2 81       	ldd	r31, Z+2	; 0x02
     83c:	e0 2d       	mov	r30, r0
     83e:	22 91       	ld	r18, -Z
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	02 c0       	rjmp	.+4      	; 0x84a <GPIO_Init+0x3e>
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	3a 95       	dec	r19
     84c:	e2 f7       	brpl	.-8      	; 0x846 <GPIO_Init+0x3a>
     84e:	82 2b       	or	r24, r18
     850:	80 83       	st	Z, r24
     852:	08 95       	ret

00000854 <GpioPinInit>:
     854:	e1 ed       	ldi	r30, 0xD1	; 209
     856:	f3 e0       	ldi	r31, 0x03	; 3
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	83 83       	std	Z+3, r24	; 0x03
     85c:	80 83       	st	Z, r24
     85e:	22 e0       	ldi	r18, 0x02	; 2
     860:	31 e0       	ldi	r19, 0x01	; 1
     862:	32 83       	std	Z+2, r19	; 0x02
     864:	21 83       	std	Z+1, r18	; 0x01
     866:	e5 ec       	ldi	r30, 0xC5	; 197
     868:	f3 e0       	ldi	r31, 0x03	; 3
     86a:	13 82       	std	Z+3, r1	; 0x03
     86c:	10 82       	st	Z, r1
     86e:	32 83       	std	Z+2, r19	; 0x02
     870:	21 83       	std	Z+1, r18	; 0x01
     872:	ed ec       	ldi	r30, 0xCD	; 205
     874:	f3 e0       	ldi	r31, 0x03	; 3
     876:	83 83       	std	Z+3, r24	; 0x03
     878:	10 82       	st	Z, r1
     87a:	44 e3       	ldi	r20, 0x34	; 52
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	52 83       	std	Z+2, r21	; 0x02
     880:	41 83       	std	Z+1, r20	; 0x01
     882:	e9 eb       	ldi	r30, 0xB9	; 185
     884:	f3 e0       	ldi	r31, 0x03	; 3
     886:	83 83       	std	Z+3, r24	; 0x03
     888:	10 82       	st	Z, r1
     88a:	48 e2       	ldi	r20, 0x28	; 40
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	52 83       	std	Z+2, r21	; 0x02
     890:	41 83       	std	Z+1, r20	; 0x01
     892:	ef e7       	ldi	r30, 0x7F	; 127
     894:	f3 e0       	ldi	r31, 0x03	; 3
     896:	83 83       	std	Z+3, r24	; 0x03
     898:	96 e0       	ldi	r25, 0x06	; 6
     89a:	90 83       	st	Z, r25
     89c:	45 e2       	ldi	r20, 0x25	; 37
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	52 83       	std	Z+2, r21	; 0x02
     8a2:	41 83       	std	Z+1, r20	; 0x01
     8a4:	ed eb       	ldi	r30, 0xBD	; 189
     8a6:	f3 e0       	ldi	r31, 0x03	; 3
     8a8:	83 83       	std	Z+3, r24	; 0x03
     8aa:	65 e0       	ldi	r22, 0x05	; 5
     8ac:	60 83       	st	Z, r22
     8ae:	52 83       	std	Z+2, r21	; 0x02
     8b0:	41 83       	std	Z+1, r20	; 0x01
     8b2:	ef e0       	ldi	r30, 0x0F	; 15
     8b4:	f4 e0       	ldi	r31, 0x04	; 4
     8b6:	83 83       	std	Z+3, r24	; 0x03
     8b8:	94 e0       	ldi	r25, 0x04	; 4
     8ba:	90 83       	st	Z, r25
     8bc:	52 83       	std	Z+2, r21	; 0x02
     8be:	41 83       	std	Z+1, r20	; 0x01
     8c0:	e7 e0       	ldi	r30, 0x07	; 7
     8c2:	f4 e0       	ldi	r31, 0x04	; 4
     8c4:	83 83       	std	Z+3, r24	; 0x03
     8c6:	60 83       	st	Z, r22
     8c8:	32 83       	std	Z+2, r19	; 0x02
     8ca:	21 83       	std	Z+1, r18	; 0x01
     8cc:	e9 ec       	ldi	r30, 0xC9	; 201
     8ce:	f3 e0       	ldi	r31, 0x03	; 3
     8d0:	83 83       	std	Z+3, r24	; 0x03
     8d2:	90 83       	st	Z, r25
     8d4:	32 83       	std	Z+2, r19	; 0x02
     8d6:	21 83       	std	Z+1, r18	; 0x01
     8d8:	eb e0       	ldi	r30, 0x0B	; 11
     8da:	f4 e0       	ldi	r31, 0x04	; 4
     8dc:	83 83       	std	Z+3, r24	; 0x03
     8de:	93 e0       	ldi	r25, 0x03	; 3
     8e0:	90 83       	st	Z, r25
     8e2:	32 83       	std	Z+2, r19	; 0x02
     8e4:	21 83       	std	Z+1, r18	; 0x01
     8e6:	e3 e8       	ldi	r30, 0x83	; 131
     8e8:	f3 e0       	ldi	r31, 0x03	; 3
     8ea:	83 83       	std	Z+3, r24	; 0x03
     8ec:	27 e0       	ldi	r18, 0x07	; 7
     8ee:	20 83       	st	Z, r18
     8f0:	2b e2       	ldi	r18, 0x2B	; 43
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	32 83       	std	Z+2, r19	; 0x02
     8f6:	21 83       	std	Z+1, r18	; 0x01
     8f8:	e1 ec       	ldi	r30, 0xC1	; 193
     8fa:	f3 e0       	ldi	r31, 0x03	; 3
     8fc:	83 83       	std	Z+3, r24	; 0x03
     8fe:	90 83       	st	Z, r25
     900:	8b e0       	ldi	r24, 0x0B	; 11
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	92 83       	std	Z+2, r25	; 0x02
     906:	81 83       	std	Z+1, r24	; 0x01
     908:	85 ec       	ldi	r24, 0xC5	; 197
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	7f df       	rcall	.-258    	; 0x80c <GPIO_Init>
     90e:	81 ed       	ldi	r24, 0xD1	; 209
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	7c df       	rcall	.-264    	; 0x80c <GPIO_Init>
     914:	8d ec       	ldi	r24, 0xCD	; 205
     916:	93 e0       	ldi	r25, 0x03	; 3
     918:	79 df       	rcall	.-270    	; 0x80c <GPIO_Init>
     91a:	89 eb       	ldi	r24, 0xB9	; 185
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	76 df       	rcall	.-276    	; 0x80c <GPIO_Init>
     920:	8f e7       	ldi	r24, 0x7F	; 127
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	73 df       	rcall	.-282    	; 0x80c <GPIO_Init>
     926:	8d eb       	ldi	r24, 0xBD	; 189
     928:	93 e0       	ldi	r25, 0x03	; 3
     92a:	70 df       	rcall	.-288    	; 0x80c <GPIO_Init>
     92c:	8f e0       	ldi	r24, 0x0F	; 15
     92e:	94 e0       	ldi	r25, 0x04	; 4
     930:	6d df       	rcall	.-294    	; 0x80c <GPIO_Init>
     932:	87 e0       	ldi	r24, 0x07	; 7
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	6a df       	rcall	.-300    	; 0x80c <GPIO_Init>
     938:	89 ec       	ldi	r24, 0xC9	; 201
     93a:	93 e0       	ldi	r25, 0x03	; 3
     93c:	67 df       	rcall	.-306    	; 0x80c <GPIO_Init>
     93e:	8b e0       	ldi	r24, 0x0B	; 11
     940:	94 e0       	ldi	r25, 0x04	; 4
     942:	64 df       	rcall	.-312    	; 0x80c <GPIO_Init>
     944:	83 e8       	ldi	r24, 0x83	; 131
     946:	93 e0       	ldi	r25, 0x03	; 3
     948:	61 df       	rcall	.-318    	; 0x80c <GPIO_Init>
     94a:	81 ec       	ldi	r24, 0xC1	; 193
     94c:	93 e0       	ldi	r25, 0x03	; 3
     94e:	5e cf       	rjmp	.-324    	; 0x80c <GPIO_Init>
     950:	08 95       	ret

00000952 <GPIO_WriteToPin>:
     952:	61 30       	cpi	r22, 0x01	; 1
     954:	89 f4       	brne	.+34     	; 0x978 <GPIO_WriteToPin+0x26>
     956:	dc 01       	movw	r26, r24
     958:	3c 91       	ld	r19, X
     95a:	11 96       	adiw	r26, 0x01	; 1
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	12 97       	sbiw	r26, 0x02	; 2
     962:	20 81       	ld	r18, Z
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	02 c0       	rjmp	.+4      	; 0x96e <GPIO_WriteToPin+0x1c>
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	3a 95       	dec	r19
     970:	e2 f7       	brpl	.-8      	; 0x96a <GPIO_WriteToPin+0x18>
     972:	82 2b       	or	r24, r18
     974:	80 83       	st	Z, r24
     976:	08 95       	ret
     978:	fc 01       	movw	r30, r24
     97a:	30 81       	ld	r19, Z
     97c:	01 80       	ldd	r0, Z+1	; 0x01
     97e:	f2 81       	ldd	r31, Z+2	; 0x02
     980:	e0 2d       	mov	r30, r0
     982:	20 81       	ld	r18, Z
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	02 c0       	rjmp	.+4      	; 0x98e <GPIO_WriteToPin+0x3c>
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	3a 95       	dec	r19
     990:	e2 f7       	brpl	.-8      	; 0x98a <GPIO_WriteToPin+0x38>
     992:	80 95       	com	r24
     994:	90 95       	com	r25
     996:	82 23       	and	r24, r18
     998:	80 83       	st	Z, r24
     99a:	08 95       	ret

0000099c <USART0_Init>:
     99c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     9a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     9a4:	88 e9       	ldi	r24, 0x98	; 152
     9a6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     9aa:	86 e0       	ldi	r24, 0x06	; 6
     9ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     9b0:	08 95       	ret

000009b2 <USART0_Transmit>:
     9b2:	e0 ec       	ldi	r30, 0xC0	; 192
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	90 81       	ld	r25, Z
     9b8:	95 ff       	sbrs	r25, 5
     9ba:	fd cf       	rjmp	.-6      	; 0x9b6 <USART0_Transmit+0x4>
     9bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     9c0:	08 95       	ret

000009c2 <USART0_transmitstring>:
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	ec 01       	movw	r28, r24
     9c8:	88 81       	ld	r24, Y
     9ca:	88 23       	and	r24, r24
     9cc:	29 f0       	breq	.+10     	; 0x9d8 <USART0_transmitstring+0x16>
     9ce:	21 96       	adiw	r28, 0x01	; 1
     9d0:	f0 df       	rcall	.-32     	; 0x9b2 <USART0_Transmit>
     9d2:	89 91       	ld	r24, Y+
     9d4:	81 11       	cpse	r24, r1
     9d6:	fc cf       	rjmp	.-8      	; 0x9d0 <USART0_transmitstring+0xe>
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <USART2_Init>:
     9de:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     9e2:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     9e6:	88 e9       	ldi	r24, 0x98	; 152
     9e8:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     9ec:	86 e0       	ldi	r24, 0x06	; 6
     9ee:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     9f2:	08 95       	ret

000009f4 <USART2_Transmit>:
     9f4:	e0 ed       	ldi	r30, 0xD0	; 208
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	90 81       	ld	r25, Z
     9fa:	95 ff       	sbrs	r25, 5
     9fc:	fd cf       	rjmp	.-6      	; 0x9f8 <USART2_Transmit+0x4>
     9fe:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     a02:	08 95       	ret

00000a04 <USART2_Receive>:
     a04:	e0 ed       	ldi	r30, 0xD0	; 208
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	88 23       	and	r24, r24
     a0c:	ec f7       	brge	.-6      	; 0xa08 <USART2_Receive+0x4>
     a0e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     a12:	08 95       	ret

00000a14 <USART0_Receive>:
     a14:	e0 ec       	ldi	r30, 0xC0	; 192
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	88 23       	and	r24, r24
     a1c:	ec f7       	brge	.-6      	; 0xa18 <USART0_Receive+0x4>
     a1e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     a22:	08 95       	ret

00000a24 <USART2_transmitstring>:
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	ec 01       	movw	r28, r24
     a2a:	88 81       	ld	r24, Y
     a2c:	88 23       	and	r24, r24
     a2e:	29 f0       	breq	.+10     	; 0xa3a <USART2_transmitstring+0x16>
     a30:	21 96       	adiw	r28, 0x01	; 1
     a32:	e0 df       	rcall	.-64     	; 0x9f4 <USART2_Transmit>
     a34:	89 91       	ld	r24, Y+
     a36:	81 11       	cpse	r24, r1
     a38:	fc cf       	rjmp	.-8      	; 0xa32 <USART2_transmitstring+0xe>
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	08 95       	ret

00000a40 <Timer1_init>:
     a40:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     a44:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     a48:	87 ef       	ldi	r24, 0xF7	; 247
     a4a:	92 ec       	ldi	r25, 0xC2	; 194
     a4c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     a50:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     a54:	85 e0       	ldi	r24, 0x05	; 5
     a56:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     a5a:	ef e6       	ldi	r30, 0x6F	; 111
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	81 60       	ori	r24, 0x01	; 1
     a62:	80 83       	st	Z, r24
     a64:	08 95       	ret

00000a66 <MatchCommand>:
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	ec 01       	movw	r28, r24
     a70:	61 ec       	ldi	r22, 0xC1	; 193
     a72:	72 e0       	ldi	r23, 0x02	; 2
     a74:	45 d3       	rcall	.+1674   	; 0x1100 <strtok>
     a76:	8c 01       	movw	r16, r24
     a78:	63 ec       	ldi	r22, 0xC3	; 195
     a7a:	72 e0       	ldi	r23, 0x02	; 2
     a7c:	ce 01       	movw	r24, r28
     a7e:	4e d3       	rcall	.+1692   	; 0x111c <strcmp>
     a80:	89 2b       	or	r24, r25
     a82:	09 f4       	brne	.+2      	; 0xa86 <MatchCommand+0x20>
     a84:	08 c1       	rjmp	.+528    	; 0xc96 <MatchCommand+0x230>
     a86:	6d ec       	ldi	r22, 0xCD	; 205
     a88:	72 e0       	ldi	r23, 0x02	; 2
     a8a:	ce 01       	movw	r24, r28
     a8c:	47 d3       	rcall	.+1678   	; 0x111c <strcmp>
     a8e:	89 2b       	or	r24, r25
     a90:	09 f4       	brne	.+2      	; 0xa94 <MatchCommand+0x2e>
     a92:	03 c1       	rjmp	.+518    	; 0xc9a <MatchCommand+0x234>
     a94:	67 ed       	ldi	r22, 0xD7	; 215
     a96:	72 e0       	ldi	r23, 0x02	; 2
     a98:	ce 01       	movw	r24, r28
     a9a:	40 d3       	rcall	.+1664   	; 0x111c <strcmp>
     a9c:	89 2b       	or	r24, r25
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <MatchCommand+0x3c>
     aa0:	fe c0       	rjmp	.+508    	; 0xc9e <MatchCommand+0x238>
     aa2:	61 ee       	ldi	r22, 0xE1	; 225
     aa4:	72 e0       	ldi	r23, 0x02	; 2
     aa6:	ce 01       	movw	r24, r28
     aa8:	39 d3       	rcall	.+1650   	; 0x111c <strcmp>
     aaa:	89 2b       	or	r24, r25
     aac:	09 f4       	brne	.+2      	; 0xab0 <MatchCommand+0x4a>
     aae:	f9 c0       	rjmp	.+498    	; 0xca2 <MatchCommand+0x23c>
     ab0:	6b ee       	ldi	r22, 0xEB	; 235
     ab2:	72 e0       	ldi	r23, 0x02	; 2
     ab4:	ce 01       	movw	r24, r28
     ab6:	32 d3       	rcall	.+1636   	; 0x111c <strcmp>
     ab8:	89 2b       	or	r24, r25
     aba:	09 f4       	brne	.+2      	; 0xabe <MatchCommand+0x58>
     abc:	f4 c0       	rjmp	.+488    	; 0xca6 <MatchCommand+0x240>
     abe:	62 ef       	ldi	r22, 0xF2	; 242
     ac0:	72 e0       	ldi	r23, 0x02	; 2
     ac2:	ce 01       	movw	r24, r28
     ac4:	2b d3       	rcall	.+1622   	; 0x111c <strcmp>
     ac6:	89 2b       	or	r24, r25
     ac8:	09 f4       	brne	.+2      	; 0xacc <MatchCommand+0x66>
     aca:	ef c0       	rjmp	.+478    	; 0xcaa <MatchCommand+0x244>
     acc:	68 ef       	ldi	r22, 0xF8	; 248
     ace:	72 e0       	ldi	r23, 0x02	; 2
     ad0:	ce 01       	movw	r24, r28
     ad2:	24 d3       	rcall	.+1608   	; 0x111c <strcmp>
     ad4:	89 2b       	or	r24, r25
     ad6:	09 f4       	brne	.+2      	; 0xada <MatchCommand+0x74>
     ad8:	ea c0       	rjmp	.+468    	; 0xcae <MatchCommand+0x248>
     ada:	6d ef       	ldi	r22, 0xFD	; 253
     adc:	72 e0       	ldi	r23, 0x02	; 2
     ade:	ce 01       	movw	r24, r28
     ae0:	1d d3       	rcall	.+1594   	; 0x111c <strcmp>
     ae2:	89 2b       	or	r24, r25
     ae4:	09 f4       	brne	.+2      	; 0xae8 <MatchCommand+0x82>
     ae6:	e5 c0       	rjmp	.+458    	; 0xcb2 <MatchCommand+0x24c>
     ae8:	66 e0       	ldi	r22, 0x06	; 6
     aea:	73 e0       	ldi	r23, 0x03	; 3
     aec:	ce 01       	movw	r24, r28
     aee:	16 d3       	rcall	.+1580   	; 0x111c <strcmp>
     af0:	89 2b       	or	r24, r25
     af2:	09 f4       	brne	.+2      	; 0xaf6 <MatchCommand+0x90>
     af4:	e0 c0       	rjmp	.+448    	; 0xcb6 <MatchCommand+0x250>
     af6:	60 e1       	ldi	r22, 0x10	; 16
     af8:	73 e0       	ldi	r23, 0x03	; 3
     afa:	ce 01       	movw	r24, r28
     afc:	0f d3       	rcall	.+1566   	; 0x111c <strcmp>
     afe:	89 2b       	or	r24, r25
     b00:	09 f4       	brne	.+2      	; 0xb04 <MatchCommand+0x9e>
     b02:	db c0       	rjmp	.+438    	; 0xcba <MatchCommand+0x254>
     b04:	65 e1       	ldi	r22, 0x15	; 21
     b06:	73 e0       	ldi	r23, 0x03	; 3
     b08:	ce 01       	movw	r24, r28
     b0a:	08 d3       	rcall	.+1552   	; 0x111c <strcmp>
     b0c:	89 2b       	or	r24, r25
     b0e:	09 f4       	brne	.+2      	; 0xb12 <MatchCommand+0xac>
     b10:	d6 c0       	rjmp	.+428    	; 0xcbe <MatchCommand+0x258>
     b12:	6a e1       	ldi	r22, 0x1A	; 26
     b14:	73 e0       	ldi	r23, 0x03	; 3
     b16:	ce 01       	movw	r24, r28
     b18:	01 d3       	rcall	.+1538   	; 0x111c <strcmp>
     b1a:	89 2b       	or	r24, r25
     b1c:	09 f4       	brne	.+2      	; 0xb20 <MatchCommand+0xba>
     b1e:	d1 c0       	rjmp	.+418    	; 0xcc2 <MatchCommand+0x25c>
     b20:	6f e1       	ldi	r22, 0x1F	; 31
     b22:	73 e0       	ldi	r23, 0x03	; 3
     b24:	ce 01       	movw	r24, r28
     b26:	fa d2       	rcall	.+1524   	; 0x111c <strcmp>
     b28:	89 2b       	or	r24, r25
     b2a:	09 f4       	brne	.+2      	; 0xb2e <MatchCommand+0xc8>
     b2c:	cc c0       	rjmp	.+408    	; 0xcc6 <MatchCommand+0x260>
     b2e:	64 e2       	ldi	r22, 0x24	; 36
     b30:	73 e0       	ldi	r23, 0x03	; 3
     b32:	ce 01       	movw	r24, r28
     b34:	f3 d2       	rcall	.+1510   	; 0x111c <strcmp>
     b36:	89 2b       	or	r24, r25
     b38:	09 f4       	brne	.+2      	; 0xb3c <MatchCommand+0xd6>
     b3a:	c7 c0       	rjmp	.+398    	; 0xcca <MatchCommand+0x264>
     b3c:	69 e2       	ldi	r22, 0x29	; 41
     b3e:	73 e0       	ldi	r23, 0x03	; 3
     b40:	ce 01       	movw	r24, r28
     b42:	ec d2       	rcall	.+1496   	; 0x111c <strcmp>
     b44:	89 2b       	or	r24, r25
     b46:	09 f4       	brne	.+2      	; 0xb4a <MatchCommand+0xe4>
     b48:	c2 c0       	rjmp	.+388    	; 0xcce <MatchCommand+0x268>
     b4a:	61 e3       	ldi	r22, 0x31	; 49
     b4c:	73 e0       	ldi	r23, 0x03	; 3
     b4e:	c8 01       	movw	r24, r16
     b50:	e5 d2       	rcall	.+1482   	; 0x111c <strcmp>
     b52:	89 2b       	or	r24, r25
     b54:	e1 f4       	brne	.+56     	; 0xb8e <MatchCommand+0x128>
     b56:	61 ec       	ldi	r22, 0xC1	; 193
     b58:	72 e0       	ldi	r23, 0x02	; 2
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	d0 d2       	rcall	.+1440   	; 0x1100 <strtok>
     b60:	dc 01       	movw	r26, r24
     b62:	2c 91       	ld	r18, X
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     b6a:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	8c 91       	ld	r24, X
     b72:	38 2b       	or	r19, r24
     b74:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     b78:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     b7c:	82 e3       	ldi	r24, 0x32	; 50
     b7e:	e5 e4       	ldi	r30, 0x45	; 69
     b80:	f4 e0       	ldi	r31, 0x04	; 4
     b82:	df 01       	movw	r26, r30
     b84:	1d 92       	st	X+, r1
     b86:	8a 95       	dec	r24
     b88:	e9 f7       	brne	.-6      	; 0xb84 <MatchCommand+0x11e>
     b8a:	89 e0       	ldi	r24, 0x09	; 9
     b8c:	a3 c0       	rjmp	.+326    	; 0xcd4 <MatchCommand+0x26e>
     b8e:	68 e3       	ldi	r22, 0x38	; 56
     b90:	73 e0       	ldi	r23, 0x03	; 3
     b92:	c8 01       	movw	r24, r16
     b94:	c3 d2       	rcall	.+1414   	; 0x111c <strcmp>
     b96:	89 2b       	or	r24, r25
     b98:	d9 f4       	brne	.+54     	; 0xbd0 <MatchCommand+0x16a>
     b9a:	61 ec       	ldi	r22, 0xC1	; 193
     b9c:	72 e0       	ldi	r23, 0x02	; 2
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	ae d2       	rcall	.+1372   	; 0x1100 <strtok>
     ba4:	fc 01       	movw	r30, r24
     ba6:	20 81       	ld	r18, Z
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     bae:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     bb2:	81 81       	ldd	r24, Z+1	; 0x01
     bb4:	38 2b       	or	r19, r24
     bb6:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     bba:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     bbe:	82 e3       	ldi	r24, 0x32	; 50
     bc0:	e5 e4       	ldi	r30, 0x45	; 69
     bc2:	f4 e0       	ldi	r31, 0x04	; 4
     bc4:	df 01       	movw	r26, r30
     bc6:	1d 92       	st	X+, r1
     bc8:	8a 95       	dec	r24
     bca:	e9 f7       	brne	.-6      	; 0xbc6 <MatchCommand+0x160>
     bcc:	8a e0       	ldi	r24, 0x0A	; 10
     bce:	82 c0       	rjmp	.+260    	; 0xcd4 <MatchCommand+0x26e>
     bd0:	60 e4       	ldi	r22, 0x40	; 64
     bd2:	73 e0       	ldi	r23, 0x03	; 3
     bd4:	c8 01       	movw	r24, r16
     bd6:	a2 d2       	rcall	.+1348   	; 0x111c <strcmp>
     bd8:	89 2b       	or	r24, r25
     bda:	d9 f4       	brne	.+54     	; 0xc12 <MatchCommand+0x1ac>
     bdc:	61 ec       	ldi	r22, 0xC1	; 193
     bde:	72 e0       	ldi	r23, 0x02	; 2
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	8d d2       	rcall	.+1306   	; 0x1100 <strtok>
     be6:	fc 01       	movw	r30, r24
     be8:	20 81       	ld	r18, Z
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     bf0:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     bf4:	81 81       	ldd	r24, Z+1	; 0x01
     bf6:	38 2b       	or	r19, r24
     bf8:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     bfc:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     c00:	82 e3       	ldi	r24, 0x32	; 50
     c02:	e5 e4       	ldi	r30, 0x45	; 69
     c04:	f4 e0       	ldi	r31, 0x04	; 4
     c06:	df 01       	movw	r26, r30
     c08:	1d 92       	st	X+, r1
     c0a:	8a 95       	dec	r24
     c0c:	e9 f7       	brne	.-6      	; 0xc08 <MatchCommand+0x1a2>
     c0e:	8d e0       	ldi	r24, 0x0D	; 13
     c10:	61 c0       	rjmp	.+194    	; 0xcd4 <MatchCommand+0x26e>
     c12:	69 e4       	ldi	r22, 0x49	; 73
     c14:	73 e0       	ldi	r23, 0x03	; 3
     c16:	c8 01       	movw	r24, r16
     c18:	81 d2       	rcall	.+1282   	; 0x111c <strcmp>
     c1a:	89 2b       	or	r24, r25
     c1c:	d9 f4       	brne	.+54     	; 0xc54 <MatchCommand+0x1ee>
     c1e:	61 ec       	ldi	r22, 0xC1	; 193
     c20:	72 e0       	ldi	r23, 0x02	; 2
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	6c d2       	rcall	.+1240   	; 0x1100 <strtok>
     c28:	fc 01       	movw	r30, r24
     c2a:	20 81       	ld	r18, Z
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     c32:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	38 2b       	or	r19, r24
     c3a:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     c3e:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     c42:	82 e3       	ldi	r24, 0x32	; 50
     c44:	e5 e4       	ldi	r30, 0x45	; 69
     c46:	f4 e0       	ldi	r31, 0x04	; 4
     c48:	df 01       	movw	r26, r30
     c4a:	1d 92       	st	X+, r1
     c4c:	8a 95       	dec	r24
     c4e:	e9 f7       	brne	.-6      	; 0xc4a <MatchCommand+0x1e4>
     c50:	88 e0       	ldi	r24, 0x08	; 8
     c52:	40 c0       	rjmp	.+128    	; 0xcd4 <MatchCommand+0x26e>
     c54:	61 e5       	ldi	r22, 0x51	; 81
     c56:	73 e0       	ldi	r23, 0x03	; 3
     c58:	c8 01       	movw	r24, r16
     c5a:	60 d2       	rcall	.+1216   	; 0x111c <strcmp>
     c5c:	89 2b       	or	r24, r25
     c5e:	c9 f5       	brne	.+114    	; 0xcd2 <MatchCommand+0x26c>
     c60:	61 ec       	ldi	r22, 0xC1	; 193
     c62:	72 e0       	ldi	r23, 0x02	; 2
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	4b d2       	rcall	.+1174   	; 0x1100 <strtok>
     c6a:	fc 01       	movw	r30, r24
     c6c:	20 81       	ld	r18, Z
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     c74:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	38 2b       	or	r19, r24
     c7c:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     c80:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
     c84:	82 e3       	ldi	r24, 0x32	; 50
     c86:	e5 e4       	ldi	r30, 0x45	; 69
     c88:	f4 e0       	ldi	r31, 0x04	; 4
     c8a:	df 01       	movw	r26, r30
     c8c:	1d 92       	st	X+, r1
     c8e:	8a 95       	dec	r24
     c90:	e9 f7       	brne	.-6      	; 0xc8c <MatchCommand+0x226>
     c92:	83 e1       	ldi	r24, 0x13	; 19
     c94:	1f c0       	rjmp	.+62     	; 0xcd4 <MatchCommand+0x26e>
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	1d c0       	rjmp	.+58     	; 0xcd4 <MatchCommand+0x26e>
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	1b c0       	rjmp	.+54     	; 0xcd4 <MatchCommand+0x26e>
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	19 c0       	rjmp	.+50     	; 0xcd4 <MatchCommand+0x26e>
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	17 c0       	rjmp	.+46     	; 0xcd4 <MatchCommand+0x26e>
     ca6:	85 e0       	ldi	r24, 0x05	; 5
     ca8:	15 c0       	rjmp	.+42     	; 0xcd4 <MatchCommand+0x26e>
     caa:	86 e0       	ldi	r24, 0x06	; 6
     cac:	13 c0       	rjmp	.+38     	; 0xcd4 <MatchCommand+0x26e>
     cae:	84 e6       	ldi	r24, 0x64	; 100
     cb0:	11 c0       	rjmp	.+34     	; 0xcd4 <MatchCommand+0x26e>
     cb2:	87 e0       	ldi	r24, 0x07	; 7
     cb4:	0f c0       	rjmp	.+30     	; 0xcd4 <MatchCommand+0x26e>
     cb6:	8b e0       	ldi	r24, 0x0B	; 11
     cb8:	0d c0       	rjmp	.+26     	; 0xcd4 <MatchCommand+0x26e>
     cba:	8c e0       	ldi	r24, 0x0C	; 12
     cbc:	0b c0       	rjmp	.+22     	; 0xcd4 <MatchCommand+0x26e>
     cbe:	8e e0       	ldi	r24, 0x0E	; 14
     cc0:	09 c0       	rjmp	.+18     	; 0xcd4 <MatchCommand+0x26e>
     cc2:	8f e0       	ldi	r24, 0x0F	; 15
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <MatchCommand+0x26e>
     cc6:	80 e1       	ldi	r24, 0x10	; 16
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <MatchCommand+0x26e>
     cca:	81 e1       	ldi	r24, 0x11	; 17
     ccc:	03 c0       	rjmp	.+6      	; 0xcd4 <MatchCommand+0x26e>
     cce:	82 e1       	ldi	r24, 0x12	; 18
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <MatchCommand+0x26e>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	08 95       	ret

00000cde <Send_FF_to_Display>:
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	68 de       	rcall	.-816    	; 0x9b2 <USART0_Transmit>
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	66 de       	rcall	.-820    	; 0x9b2 <USART0_Transmit>
     ce6:	8f ef       	ldi	r24, 0xFF	; 255
     ce8:	64 de       	rcall	.-824    	; 0x9b2 <USART0_Transmit>
     cea:	82 e3       	ldi	r24, 0x32	; 50
     cec:	e5 ed       	ldi	r30, 0xD5	; 213
     cee:	f3 e0       	ldi	r31, 0x03	; 3
     cf0:	df 01       	movw	r26, r30
     cf2:	1d 92       	st	X+, r1
     cf4:	8a 95       	dec	r24
     cf6:	e9 f7       	brne	.-6      	; 0xcf2 <Send_FF_to_Display+0x14>
     cf8:	08 95       	ret

00000cfa <EEPROM_DisplayDataInit>:
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	c0 e0       	ldi	r28, 0x00	; 0
     d00:	d0 e0       	ldi	r29, 0x00	; 0
     d02:	ce 01       	movw	r24, r28
     d04:	71 dd       	rcall	.-1310   	; 0x7e8 <EEPROM_Read2Bytes>
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	21 f4       	brne	.+8      	; 0xd12 <EEPROM_DisplayDataInit+0x18>
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	ce 01       	movw	r24, r28
     d10:	5b dd       	rcall	.-1354   	; 0x7c8 <EEPROM_Write2Bytes>
     d12:	22 96       	adiw	r28, 0x02	; 2
     d14:	c2 36       	cpi	r28, 0x62	; 98
     d16:	d1 05       	cpc	r29, r1
     d18:	a1 f7       	brne	.-24     	; 0xd02 <EEPROM_DisplayDataInit+0x8>
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <ReagentSelected>:
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	08 2f       	mov	r16, r24
     d2e:	10 e0       	ldi	r17, 0x00	; 0
     d30:	0f 2e       	mov	r0, r31
     d32:	f2 e3       	ldi	r31, 0x32	; 50
     d34:	ef 2e       	mov	r14, r31
     d36:	f0 2d       	mov	r31, r0
     d38:	c6 2f       	mov	r28, r22
     d3a:	d0 e0       	ldi	r29, 0x00	; 0
     d3c:	ff 24       	eor	r15, r15
     d3e:	f3 94       	inc	r15
     d40:	2f ef       	ldi	r18, 0xFF	; 255
     d42:	81 ee       	ldi	r24, 0xE1	; 225
     d44:	94 e0       	ldi	r25, 0x04	; 4
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	80 40       	sbci	r24, 0x00	; 0
     d4a:	90 40       	sbci	r25, 0x00	; 0
     d4c:	e1 f7       	brne	.-8      	; 0xd46 <ReagentSelected+0x26>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <ReagentSelected+0x30>
     d50:	00 00       	nop
     d52:	89 e5       	ldi	r24, 0x59	; 89
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	66 de       	rcall	.-820    	; 0xa24 <USART2_transmitstring>
     d58:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     d5c:	4b de       	rcall	.-874    	; 0x9f4 <USART2_Transmit>
     d5e:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     d62:	91 11       	cpse	r25, r1
     d64:	12 c0       	rjmp	.+36     	; 0xd8a <ReagentSelected+0x6a>
     d66:	8e e5       	ldi	r24, 0x5E	; 94
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	2b de       	rcall	.-938    	; 0x9c2 <USART0_transmitstring>
     d6c:	c8 01       	movw	r24, r16
     d6e:	3c dd       	rcall	.-1416   	; 0x7e8 <EEPROM_Read2Bytes>
     d70:	4a e0       	ldi	r20, 0x0A	; 10
     d72:	65 ed       	ldi	r22, 0xD5	; 213
     d74:	73 e0       	ldi	r23, 0x03	; 3
     d76:	09 d2       	rcall	.+1042   	; 0x118a <__itoa_ncheck>
     d78:	85 ed       	ldi	r24, 0xD5	; 213
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	22 de       	rcall	.-956    	; 0x9c2 <USART0_transmitstring>
     d7e:	af df       	rcall	.-162    	; 0xcde <Send_FF_to_Display>
     d80:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     d84:	8f 5f       	subi	r24, 0xFF	; 255
     d86:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <OneTimeRunFunFlag>
     d8a:	85 e4       	ldi	r24, 0x45	; 69
     d8c:	94 e0       	ldi	r25, 0x04	; 4
     d8e:	6b de       	rcall	.-810    	; 0xa66 <MatchCommand>
     d90:	88 30       	cpi	r24, 0x08	; 8
     d92:	09 f0       	breq	.+2      	; 0xd96 <ReagentSelected+0x76>
     d94:	56 c0       	rjmp	.+172    	; 0xe42 <ReagentSelected+0x122>
     d96:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     d9a:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     d9e:	c8 01       	movw	r24, r16
     da0:	13 dd       	rcall	.-1498   	; 0x7c8 <EEPROM_Write2Bytes>
     da2:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <OneTimeRunFunFlag>
     da6:	af ef       	ldi	r26, 0xFF	; 255
     da8:	b1 ee       	ldi	r27, 0xE1	; 225
     daa:	24 e0       	ldi	r18, 0x04	; 4
     dac:	a1 50       	subi	r26, 0x01	; 1
     dae:	b0 40       	sbci	r27, 0x00	; 0
     db0:	20 40       	sbci	r18, 0x00	; 0
     db2:	e1 f7       	brne	.-8      	; 0xdac <ReagentSelected+0x8c>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <ReagentSelected+0x96>
     db6:	00 00       	nop
     db8:	86 e6       	ldi	r24, 0x66	; 102
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	33 de       	rcall	.-922    	; 0xa24 <USART2_transmitstring>
     dbe:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     dc2:	18 de       	rcall	.-976    	; 0x9f4 <USART2_Transmit>
     dc4:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     dc8:	91 11       	cpse	r25, r1
     dca:	12 c0       	rjmp	.+36     	; 0xdf0 <ReagentSelected+0xd0>
     dcc:	8e e5       	ldi	r24, 0x5E	; 94
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	f8 dd       	rcall	.-1040   	; 0x9c2 <USART0_transmitstring>
     dd2:	ce 01       	movw	r24, r28
     dd4:	09 dd       	rcall	.-1518   	; 0x7e8 <EEPROM_Read2Bytes>
     dd6:	4a e0       	ldi	r20, 0x0A	; 10
     dd8:	65 ed       	ldi	r22, 0xD5	; 213
     dda:	73 e0       	ldi	r23, 0x03	; 3
     ddc:	d6 d1       	rcall	.+940    	; 0x118a <__itoa_ncheck>
     dde:	85 ed       	ldi	r24, 0xD5	; 213
     de0:	93 e0       	ldi	r25, 0x03	; 3
     de2:	ef dd       	rcall	.-1058   	; 0x9c2 <USART0_transmitstring>
     de4:	7c df       	rcall	.-264    	; 0xcde <Send_FF_to_Display>
     de6:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     dea:	9f 5f       	subi	r25, 0xFF	; 255
     dec:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <OneTimeRunFunFlag>
     df0:	85 e4       	ldi	r24, 0x45	; 69
     df2:	94 e0       	ldi	r25, 0x04	; 4
     df4:	38 de       	rcall	.-912    	; 0xa66 <MatchCommand>
     df6:	8d 30       	cpi	r24, 0x0D	; 13
     df8:	89 f4       	brne	.+34     	; 0xe1c <ReagentSelected+0xfc>
     dfa:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     dfe:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     e02:	ce 01       	movw	r24, r28
     e04:	e1 dc       	rcall	.-1598   	; 0x7c8 <EEPROM_Write2Bytes>
     e06:	95 e0       	ldi	r25, 0x05	; 5
     e08:	e8 ef       	ldi	r30, 0xF8	; 248
     e0a:	f2 e0       	ldi	r31, 0x02	; 2
     e0c:	a5 e4       	ldi	r26, 0x45	; 69
     e0e:	b4 e0       	ldi	r27, 0x04	; 4
     e10:	01 90       	ld	r0, Z+
     e12:	0d 92       	st	X+, r0
     e14:	9a 95       	dec	r25
     e16:	e1 f7       	brne	.-8      	; 0xe10 <ReagentSelected+0xf0>
     e18:	f0 92 7a 03 	sts	0x037A, r15	; 0x80037a <flag>
     e1c:	85 e4       	ldi	r24, 0x45	; 69
     e1e:	94 e0       	ldi	r25, 0x04	; 4
     e20:	22 de       	rcall	.-956    	; 0xa66 <MatchCommand>
     e22:	84 36       	cpi	r24, 0x64	; 100
     e24:	09 f0       	breq	.+2      	; 0xe28 <ReagentSelected+0x108>
     e26:	bf cf       	rjmp	.-130    	; 0xda6 <ReagentSelected+0x86>
     e28:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <OneTimeRunFunFlag>
     e2c:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <flag>
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	39 f0       	breq	.+14     	; 0xe42 <ReagentSelected+0x122>
     e34:	e5 e4       	ldi	r30, 0x45	; 69
     e36:	f4 e0       	ldi	r31, 0x04	; 4
     e38:	df 01       	movw	r26, r30
     e3a:	2e 2d       	mov	r18, r14
     e3c:	1d 92       	st	X+, r1
     e3e:	2a 95       	dec	r18
     e40:	e9 f7       	brne	.-6      	; 0xe3c <ReagentSelected+0x11c>
     e42:	85 e4       	ldi	r24, 0x45	; 69
     e44:	94 e0       	ldi	r25, 0x04	; 4
     e46:	0f de       	rcall	.-994    	; 0xa66 <MatchCommand>
     e48:	84 36       	cpi	r24, 0x64	; 100
     e4a:	09 f0       	breq	.+2      	; 0xe4e <ReagentSelected+0x12e>
     e4c:	79 cf       	rjmp	.-270    	; 0xd40 <ReagentSelected+0x20>
     e4e:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <OneTimeRunFunFlag>
     e52:	82 e3       	ldi	r24, 0x32	; 50
     e54:	e5 e4       	ldi	r30, 0x45	; 69
     e56:	f4 e0       	ldi	r31, 0x04	; 4
     e58:	df 01       	movw	r26, r30
     e5a:	1d 92       	st	X+, r1
     e5c:	8a 95       	dec	r24
     e5e:	e9 f7       	brne	.-6      	; 0xe5a <ReagentSelected+0x13a>
     e60:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <flag>
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	08 95       	ret

00000e72 <StartBlowerTimeSelected>:
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	c8 2f       	mov	r28, r24
     e78:	d0 e0       	ldi	r29, 0x00	; 0
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	81 ee       	ldi	r24, 0xE1	; 225
     e7e:	94 e0       	ldi	r25, 0x04	; 4
     e80:	21 50       	subi	r18, 0x01	; 1
     e82:	80 40       	sbci	r24, 0x00	; 0
     e84:	90 40       	sbci	r25, 0x00	; 0
     e86:	e1 f7       	brne	.-8      	; 0xe80 <StartBlowerTimeSelected+0xe>
     e88:	00 c0       	rjmp	.+0      	; 0xe8a <StartBlowerTimeSelected+0x18>
     e8a:	00 00       	nop
     e8c:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     e90:	91 11       	cpse	r25, r1
     e92:	12 c0       	rjmp	.+36     	; 0xeb8 <StartBlowerTimeSelected+0x46>
     e94:	8e e5       	ldi	r24, 0x5E	; 94
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	94 dd       	rcall	.-1240   	; 0x9c2 <USART0_transmitstring>
     e9a:	ce 01       	movw	r24, r28
     e9c:	a5 dc       	rcall	.-1718   	; 0x7e8 <EEPROM_Read2Bytes>
     e9e:	4a e0       	ldi	r20, 0x0A	; 10
     ea0:	65 ed       	ldi	r22, 0xD5	; 213
     ea2:	73 e0       	ldi	r23, 0x03	; 3
     ea4:	72 d1       	rcall	.+740    	; 0x118a <__itoa_ncheck>
     ea6:	85 ed       	ldi	r24, 0xD5	; 213
     ea8:	93 e0       	ldi	r25, 0x03	; 3
     eaa:	8b dd       	rcall	.-1258   	; 0x9c2 <USART0_transmitstring>
     eac:	18 df       	rcall	.-464    	; 0xcde <Send_FF_to_Display>
     eae:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     eb2:	9f 5f       	subi	r25, 0xFF	; 255
     eb4:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <OneTimeRunFunFlag>
     eb8:	85 e4       	ldi	r24, 0x45	; 69
     eba:	94 e0       	ldi	r25, 0x04	; 4
     ebc:	d4 dd       	rcall	.-1112   	; 0xa66 <MatchCommand>
     ebe:	89 30       	cpi	r24, 0x09	; 9
     ec0:	79 f4       	brne	.+30     	; 0xee0 <StartBlowerTimeSelected+0x6e>
     ec2:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     ec6:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     eca:	ce 01       	movw	r24, r28
     ecc:	7d dc       	rcall	.-1798   	; 0x7c8 <EEPROM_Write2Bytes>
     ece:	95 e0       	ldi	r25, 0x05	; 5
     ed0:	e8 ef       	ldi	r30, 0xF8	; 248
     ed2:	f2 e0       	ldi	r31, 0x02	; 2
     ed4:	a5 e4       	ldi	r26, 0x45	; 69
     ed6:	b4 e0       	ldi	r27, 0x04	; 4
     ed8:	01 90       	ld	r0, Z+
     eda:	0d 92       	st	X+, r0
     edc:	9a 95       	dec	r25
     ede:	e1 f7       	brne	.-8      	; 0xed8 <StartBlowerTimeSelected+0x66>
     ee0:	85 e4       	ldi	r24, 0x45	; 69
     ee2:	94 e0       	ldi	r25, 0x04	; 4
     ee4:	c0 dd       	rcall	.-1152   	; 0xa66 <MatchCommand>
     ee6:	84 36       	cpi	r24, 0x64	; 100
     ee8:	09 f0       	breq	.+2      	; 0xeec <StartBlowerTimeSelected+0x7a>
     eea:	c7 cf       	rjmp	.-114    	; 0xe7a <StartBlowerTimeSelected+0x8>
     eec:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <OneTimeRunFunFlag>
     ef0:	82 e3       	ldi	r24, 0x32	; 50
     ef2:	e5 e4       	ldi	r30, 0x45	; 69
     ef4:	f4 e0       	ldi	r31, 0x04	; 4
     ef6:	df 01       	movw	r26, r30
     ef8:	1d 92       	st	X+, r1
     efa:	8a 95       	dec	r24
     efc:	e9 f7       	brne	.-6      	; 0xef8 <StartBlowerTimeSelected+0x86>
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <EndBlowerTimeSelected>:
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	c8 2f       	mov	r28, r24
     f0a:	d0 e0       	ldi	r29, 0x00	; 0
     f0c:	2f ef       	ldi	r18, 0xFF	; 255
     f0e:	81 ee       	ldi	r24, 0xE1	; 225
     f10:	94 e0       	ldi	r25, 0x04	; 4
     f12:	21 50       	subi	r18, 0x01	; 1
     f14:	80 40       	sbci	r24, 0x00	; 0
     f16:	90 40       	sbci	r25, 0x00	; 0
     f18:	e1 f7       	brne	.-8      	; 0xf12 <EndBlowerTimeSelected+0xe>
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <EndBlowerTimeSelected+0x18>
     f1c:	00 00       	nop
     f1e:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     f22:	91 11       	cpse	r25, r1
     f24:	12 c0       	rjmp	.+36     	; 0xf4a <EndBlowerTimeSelected+0x46>
     f26:	8e e5       	ldi	r24, 0x5E	; 94
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	4b dd       	rcall	.-1386   	; 0x9c2 <USART0_transmitstring>
     f2c:	ce 01       	movw	r24, r28
     f2e:	5c dc       	rcall	.-1864   	; 0x7e8 <EEPROM_Read2Bytes>
     f30:	4a e0       	ldi	r20, 0x0A	; 10
     f32:	65 ed       	ldi	r22, 0xD5	; 213
     f34:	73 e0       	ldi	r23, 0x03	; 3
     f36:	29 d1       	rcall	.+594    	; 0x118a <__itoa_ncheck>
     f38:	85 ed       	ldi	r24, 0xD5	; 213
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	42 dd       	rcall	.-1404   	; 0x9c2 <USART0_transmitstring>
     f3e:	cf de       	rcall	.-610    	; 0xcde <Send_FF_to_Display>
     f40:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     f44:	9f 5f       	subi	r25, 0xFF	; 255
     f46:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <OneTimeRunFunFlag>
     f4a:	85 e4       	ldi	r24, 0x45	; 69
     f4c:	94 e0       	ldi	r25, 0x04	; 4
     f4e:	8b dd       	rcall	.-1258   	; 0xa66 <MatchCommand>
     f50:	8a 30       	cpi	r24, 0x0A	; 10
     f52:	79 f4       	brne	.+30     	; 0xf72 <EndBlowerTimeSelected+0x6e>
     f54:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     f58:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     f5c:	ce 01       	movw	r24, r28
     f5e:	34 dc       	rcall	.-1944   	; 0x7c8 <EEPROM_Write2Bytes>
     f60:	95 e0       	ldi	r25, 0x05	; 5
     f62:	e8 ef       	ldi	r30, 0xF8	; 248
     f64:	f2 e0       	ldi	r31, 0x02	; 2
     f66:	a5 e4       	ldi	r26, 0x45	; 69
     f68:	b4 e0       	ldi	r27, 0x04	; 4
     f6a:	01 90       	ld	r0, Z+
     f6c:	0d 92       	st	X+, r0
     f6e:	9a 95       	dec	r25
     f70:	e1 f7       	brne	.-8      	; 0xf6a <EndBlowerTimeSelected+0x66>
     f72:	85 e4       	ldi	r24, 0x45	; 69
     f74:	94 e0       	ldi	r25, 0x04	; 4
     f76:	77 dd       	rcall	.-1298   	; 0xa66 <MatchCommand>
     f78:	84 36       	cpi	r24, 0x64	; 100
     f7a:	09 f0       	breq	.+2      	; 0xf7e <EndBlowerTimeSelected+0x7a>
     f7c:	c7 cf       	rjmp	.-114    	; 0xf0c <EndBlowerTimeSelected+0x8>
     f7e:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <OneTimeRunFunFlag>
     f82:	82 e3       	ldi	r24, 0x32	; 50
     f84:	e5 e4       	ldi	r30, 0x45	; 69
     f86:	f4 e0       	ldi	r31, 0x04	; 4
     f88:	df 01       	movw	r26, r30
     f8a:	1d 92       	st	X+, r1
     f8c:	8a 95       	dec	r24
     f8e:	e9 f7       	brne	.-6      	; 0xf8a <EndBlowerTimeSelected+0x86>
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <SpinTimeSelected>:
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	c8 2f       	mov	r28, r24
     f9c:	d0 e0       	ldi	r29, 0x00	; 0
     f9e:	2f ef       	ldi	r18, 0xFF	; 255
     fa0:	81 ee       	ldi	r24, 0xE1	; 225
     fa2:	94 e0       	ldi	r25, 0x04	; 4
     fa4:	21 50       	subi	r18, 0x01	; 1
     fa6:	80 40       	sbci	r24, 0x00	; 0
     fa8:	90 40       	sbci	r25, 0x00	; 0
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <SpinTimeSelected+0xe>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <SpinTimeSelected+0x18>
     fae:	00 00       	nop
     fb0:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     fb4:	91 11       	cpse	r25, r1
     fb6:	12 c0       	rjmp	.+36     	; 0xfdc <SpinTimeSelected+0x46>
     fb8:	8e e5       	ldi	r24, 0x5E	; 94
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	02 dd       	rcall	.-1532   	; 0x9c2 <USART0_transmitstring>
     fbe:	ce 01       	movw	r24, r28
     fc0:	13 dc       	rcall	.-2010   	; 0x7e8 <EEPROM_Read2Bytes>
     fc2:	4a e0       	ldi	r20, 0x0A	; 10
     fc4:	65 ed       	ldi	r22, 0xD5	; 213
     fc6:	73 e0       	ldi	r23, 0x03	; 3
     fc8:	e0 d0       	rcall	.+448    	; 0x118a <__itoa_ncheck>
     fca:	85 ed       	ldi	r24, 0xD5	; 213
     fcc:	93 e0       	ldi	r25, 0x03	; 3
     fce:	f9 dc       	rcall	.-1550   	; 0x9c2 <USART0_transmitstring>
     fd0:	86 de       	rcall	.-756    	; 0xcde <Send_FF_to_Display>
     fd2:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <OneTimeRunFunFlag>
     fd6:	9f 5f       	subi	r25, 0xFF	; 255
     fd8:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <OneTimeRunFunFlag>
     fdc:	85 e4       	ldi	r24, 0x45	; 69
     fde:	94 e0       	ldi	r25, 0x04	; 4
     fe0:	42 dd       	rcall	.-1404   	; 0xa66 <MatchCommand>
     fe2:	83 31       	cpi	r24, 0x13	; 19
     fe4:	79 f4       	brne	.+30     	; 0x1004 <SpinTimeSelected+0x6e>
     fe6:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     fea:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     fee:	ce 01       	movw	r24, r28
     ff0:	eb db       	rcall	.-2090   	; 0x7c8 <EEPROM_Write2Bytes>
     ff2:	95 e0       	ldi	r25, 0x05	; 5
     ff4:	e8 ef       	ldi	r30, 0xF8	; 248
     ff6:	f2 e0       	ldi	r31, 0x02	; 2
     ff8:	a5 e4       	ldi	r26, 0x45	; 69
     ffa:	b4 e0       	ldi	r27, 0x04	; 4
     ffc:	01 90       	ld	r0, Z+
     ffe:	0d 92       	st	X+, r0
    1000:	9a 95       	dec	r25
    1002:	e1 f7       	brne	.-8      	; 0xffc <SpinTimeSelected+0x66>
    1004:	85 e4       	ldi	r24, 0x45	; 69
    1006:	94 e0       	ldi	r25, 0x04	; 4
    1008:	2e dd       	rcall	.-1444   	; 0xa66 <MatchCommand>
    100a:	84 36       	cpi	r24, 0x64	; 100
    100c:	09 f0       	breq	.+2      	; 0x1010 <SpinTimeSelected+0x7a>
    100e:	c7 cf       	rjmp	.-114    	; 0xf9e <SpinTimeSelected+0x8>
    1010:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <OneTimeRunFunFlag>
    1014:	82 e3       	ldi	r24, 0x32	; 50
    1016:	e5 e4       	ldi	r30, 0x45	; 69
    1018:	f4 e0       	ldi	r31, 0x04	; 4
    101a:	df 01       	movw	r26, r30
    101c:	1d 92       	st	X+, r1
    101e:	8a 95       	dec	r24
    1020:	e9 f7       	brne	.-6      	; 0x101c <SpinTimeSelected+0x86>
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <Send_Text_On_Screen>:

void Send_Text_On_Screen(const char	*text)
{
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	bc 01       	movw	r22, r24
    1032:	2f ef       	ldi	r18, 0xFF	; 255
    1034:	81 ee       	ldi	r24, 0xE1	; 225
    1036:	94 e0       	ldi	r25, 0x04	; 4
    1038:	21 50       	subi	r18, 0x01	; 1
    103a:	80 40       	sbci	r24, 0x00	; 0
    103c:	90 40       	sbci	r25, 0x00	; 0
    103e:	e1 f7       	brne	.-8      	; 0x1038 <Send_Text_On_Screen+0x10>
    1040:	00 c0       	rjmp	.+0      	; 0x1042 <Send_Text_On_Screen+0x1a>
    1042:	00 00       	nop
	_delay_ms(DELAY_IN_LOOP);

	strcat(buffer, "text.txt=");
    1044:	c5 ed       	ldi	r28, 0xD5	; 213
    1046:	d3 e0       	ldi	r29, 0x03	; 3
    1048:	de 01       	movw	r26, r28
    104a:	0d 90       	ld	r0, X+
    104c:	00 20       	and	r0, r0
    104e:	e9 f7       	brne	.-6      	; 0x104a <Send_Text_On_Screen+0x22>
    1050:	11 97       	sbiw	r26, 0x01	; 1
    1052:	9a e0       	ldi	r25, 0x0A	; 10
    1054:	ec e6       	ldi	r30, 0x6C	; 108
    1056:	f3 e0       	ldi	r31, 0x03	; 3
    1058:	01 90       	ld	r0, Z+
    105a:	0d 92       	st	X+, r0
    105c:	9a 95       	dec	r25
    105e:	e1 f7       	brne	.-8      	; 0x1058 <Send_Text_On_Screen+0x30>
	strcat(buffer, "\"");
    1060:	fe 01       	movw	r30, r28
    1062:	01 90       	ld	r0, Z+
    1064:	00 20       	and	r0, r0
    1066:	e9 f7       	brne	.-6      	; 0x1062 <Send_Text_On_Screen+0x3a>
    1068:	31 97       	sbiw	r30, 0x01	; 1
    106a:	02 e2       	ldi	r16, 0x22	; 34
    106c:	10 e0       	ldi	r17, 0x00	; 0
    106e:	11 83       	std	Z+1, r17	; 0x01
    1070:	00 83       	st	Z, r16
	strcat(buffer, text);
    1072:	ce 01       	movw	r24, r28
    1074:	48 d0       	rcall	.+144    	; 0x1106 <strcat>
	strcat(buffer, "\"");
    1076:	fe 01       	movw	r30, r28
    1078:	01 90       	ld	r0, Z+
    107a:	00 20       	and	r0, r0
    107c:	e9 f7       	brne	.-6      	; 0x1078 <Send_Text_On_Screen+0x50>
    107e:	31 97       	sbiw	r30, 0x01	; 1
    1080:	11 83       	std	Z+1, r17	; 0x01
    1082:	00 83       	st	Z, r16
	USART0_transmitstring(buffer);
    1084:	ce 01       	movw	r24, r28
    1086:	9d dc       	rcall	.-1734   	; 0x9c2 <USART0_transmitstring>
	USART2_transmitstring(buffer);
    1088:	ce 01       	movw	r24, r28
    108a:	cc dc       	rcall	.-1640   	; 0xa24 <USART2_transmitstring>
	Send_FF_to_Display();
    108c:	28 de       	rcall	.-944    	; 0xcde <Send_FF_to_Display>
    108e:	82 e3       	ldi	r24, 0x32	; 50
	memset(buffer, '\0', PACKET_SIZE * sizeof(buffer[0]));	// rec_bufferglob clear
    1090:	fe 01       	movw	r30, r28
    1092:	11 92       	st	Z+, r1
    1094:	8a 95       	dec	r24
    1096:	e9 f7       	brne	.-6      	; 0x1092 <Send_Text_On_Screen+0x6a>
    1098:	df 91       	pop	r29
}
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <Blower_ON>:
    10a2:	cf 93       	push	r28

void Blower_ON(uint16_t Blower_time_sec)
{
    10a4:	df 93       	push	r29
    10a6:	ec 01       	movw	r28, r24
	
	Timer1_init();
    10a8:	cb dc       	rcall	.-1642   	; 0xa40 <Timer1_init>
	while( (Blower_time_sec - time_in_seconds) != 0 )
    10aa:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <time_in_seconds>
    10ae:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <time_in_seconds+0x1>
    10b2:	c8 17       	cp	r28, r24
    10b4:	d9 07       	cpc	r29, r25
    10b6:	59 f0       	breq	.+22     	; 0x10ce <Blower_ON+0x2c>
		GPIO_WriteToPin(&Blower, HIGH);
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	81 ec       	ldi	r24, 0xC1	; 193
    10bc:	93 e0       	ldi	r25, 0x03	; 3
    10be:	49 dc       	rcall	.-1902   	; 0x952 <GPIO_WriteToPin>

void Blower_ON(uint16_t Blower_time_sec)
{
	
	Timer1_init();
	while( (Blower_time_sec - time_in_seconds) != 0 )
    10c0:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <time_in_seconds>
    10c4:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <time_in_seconds+0x1>
    10c8:	8c 17       	cp	r24, r28
    10ca:	9d 07       	cpc	r25, r29
    10cc:	a9 f7       	brne	.-22     	; 0x10b8 <Blower_ON+0x16>
		GPIO_WriteToPin(&Blower, HIGH);
	GPIO_WriteToPin(&Blower, LOW);
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	81 ec       	ldi	r24, 0xC1	; 193
    10d2:	93 e0       	ldi	r25, 0x03	; 3
    10d4:	3e dc       	rcall	.-1924   	; 0x952 <GPIO_WriteToPin>
	TIMSK1 &= ~(1<<0);	// Interrupt disable
    10d6:	ef e6       	ldi	r30, 0x6F	; 111
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8e 7f       	andi	r24, 0xFE	; 254
    10de:	80 83       	st	Z, r24
	time_in_seconds=0;
    10e0:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <time_in_seconds+0x1>
    10e4:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <time_in_seconds>
}
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	08 95       	ret

000010ee <Dispense_Reagent>:

void Dispense_Reagent(uint8_t Quantity, GPIO_Config *pPump_Name)
{
    10ee:	08 95       	ret

000010f0 <__tablejump2__>:
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	88 1f       	adc	r24, r24
    10f6:	8b bf       	out	0x3b, r24	; 59
    10f8:	07 90       	elpm	r0, Z+
    10fa:	f6 91       	elpm	r31, Z
    10fc:	e0 2d       	mov	r30, r0
    10fe:	19 94       	eijmp

00001100 <strtok>:
    1100:	46 e7       	ldi	r20, 0x76	; 118
    1102:	53 e0       	ldi	r21, 0x03	; 3
    1104:	1b c0       	rjmp	.+54     	; 0x113c <strtok_r>

00001106 <strcat>:
    1106:	fb 01       	movw	r30, r22
    1108:	dc 01       	movw	r26, r24
    110a:	0d 90       	ld	r0, X+
    110c:	00 20       	and	r0, r0
    110e:	e9 f7       	brne	.-6      	; 0x110a <strcat+0x4>
    1110:	11 97       	sbiw	r26, 0x01	; 1
    1112:	01 90       	ld	r0, Z+
    1114:	0d 92       	st	X+, r0
    1116:	00 20       	and	r0, r0
    1118:	e1 f7       	brne	.-8      	; 0x1112 <strcat+0xc>
    111a:	08 95       	ret

0000111c <strcmp>:
    111c:	fb 01       	movw	r30, r22
    111e:	dc 01       	movw	r26, r24
    1120:	8d 91       	ld	r24, X+
    1122:	01 90       	ld	r0, Z+
    1124:	80 19       	sub	r24, r0
    1126:	01 10       	cpse	r0, r1
    1128:	d9 f3       	breq	.-10     	; 0x1120 <strcmp+0x4>
    112a:	99 0b       	sbc	r25, r25
    112c:	08 95       	ret

0000112e <strcpy>:
    112e:	fb 01       	movw	r30, r22
    1130:	dc 01       	movw	r26, r24
    1132:	01 90       	ld	r0, Z+
    1134:	0d 92       	st	X+, r0
    1136:	00 20       	and	r0, r0
    1138:	e1 f7       	brne	.-8      	; 0x1132 <strcpy+0x4>
    113a:	08 95       	ret

0000113c <strtok_r>:
    113c:	fa 01       	movw	r30, r20
    113e:	a1 91       	ld	r26, Z+
    1140:	b0 81       	ld	r27, Z
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	19 f4       	brne	.+6      	; 0x114c <strtok_r+0x10>
    1146:	10 97       	sbiw	r26, 0x00	; 0
    1148:	e1 f0       	breq	.+56     	; 0x1182 <strtok_r+0x46>
    114a:	cd 01       	movw	r24, r26
    114c:	dc 01       	movw	r26, r24
    114e:	cd 01       	movw	r24, r26
    1150:	0d 90       	ld	r0, X+
    1152:	00 20       	and	r0, r0
    1154:	11 f4       	brne	.+4      	; 0x115a <strtok_r+0x1e>
    1156:	c0 01       	movw	r24, r0
    1158:	13 c0       	rjmp	.+38     	; 0x1180 <strtok_r+0x44>
    115a:	fb 01       	movw	r30, r22
    115c:	21 91       	ld	r18, Z+
    115e:	22 23       	and	r18, r18
    1160:	19 f0       	breq	.+6      	; 0x1168 <strtok_r+0x2c>
    1162:	20 15       	cp	r18, r0
    1164:	d9 f7       	brne	.-10     	; 0x115c <strtok_r+0x20>
    1166:	f3 cf       	rjmp	.-26     	; 0x114e <strtok_r+0x12>
    1168:	fb 01       	movw	r30, r22
    116a:	21 91       	ld	r18, Z+
    116c:	20 15       	cp	r18, r0
    116e:	19 f4       	brne	.+6      	; 0x1176 <strtok_r+0x3a>
    1170:	1e 92       	st	-X, r1
    1172:	11 96       	adiw	r26, 0x01	; 1
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <strtok_r+0x46>
    1176:	22 23       	and	r18, r18
    1178:	c1 f7       	brne	.-16     	; 0x116a <strtok_r+0x2e>
    117a:	0d 90       	ld	r0, X+
    117c:	00 20       	and	r0, r0
    117e:	a1 f7       	brne	.-24     	; 0x1168 <strtok_r+0x2c>
    1180:	d0 01       	movw	r26, r0
    1182:	fa 01       	movw	r30, r20
    1184:	a1 93       	st	Z+, r26
    1186:	b0 83       	st	Z, r27
    1188:	08 95       	ret

0000118a <__itoa_ncheck>:
    118a:	bb 27       	eor	r27, r27
    118c:	4a 30       	cpi	r20, 0x0A	; 10
    118e:	31 f4       	brne	.+12     	; 0x119c <__itoa_ncheck+0x12>
    1190:	99 23       	and	r25, r25
    1192:	22 f4       	brpl	.+8      	; 0x119c <__itoa_ncheck+0x12>
    1194:	bd e2       	ldi	r27, 0x2D	; 45
    1196:	90 95       	com	r25
    1198:	81 95       	neg	r24
    119a:	9f 4f       	sbci	r25, 0xFF	; 255
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <__utoa_common>

0000119e <__utoa_ncheck>:
    119e:	bb 27       	eor	r27, r27

000011a0 <__utoa_common>:
    11a0:	fb 01       	movw	r30, r22
    11a2:	55 27       	eor	r21, r21
    11a4:	aa 27       	eor	r26, r26
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	aa 1f       	adc	r26, r26
    11ac:	a4 17       	cp	r26, r20
    11ae:	10 f0       	brcs	.+4      	; 0x11b4 <__utoa_common+0x14>
    11b0:	a4 1b       	sub	r26, r20
    11b2:	83 95       	inc	r24
    11b4:	50 51       	subi	r21, 0x10	; 16
    11b6:	b9 f7       	brne	.-18     	; 0x11a6 <__utoa_common+0x6>
    11b8:	a0 5d       	subi	r26, 0xD0	; 208
    11ba:	aa 33       	cpi	r26, 0x3A	; 58
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <__utoa_common+0x20>
    11be:	a9 5d       	subi	r26, 0xD9	; 217
    11c0:	a1 93       	st	Z+, r26
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	79 f7       	brne	.-34     	; 0x11a4 <__utoa_common+0x4>
    11c6:	b1 11       	cpse	r27, r1
    11c8:	b1 93       	st	Z+, r27
    11ca:	11 92       	st	Z+, r1
    11cc:	cb 01       	movw	r24, r22
    11ce:	00 c0       	rjmp	.+0      	; 0x11d0 <strrev>

000011d0 <strrev>:
    11d0:	dc 01       	movw	r26, r24
    11d2:	fc 01       	movw	r30, r24
    11d4:	67 2f       	mov	r22, r23
    11d6:	71 91       	ld	r23, Z+
    11d8:	77 23       	and	r23, r23
    11da:	e1 f7       	brne	.-8      	; 0x11d4 <strrev+0x4>
    11dc:	32 97       	sbiw	r30, 0x02	; 2
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <strrev+0x18>
    11e0:	7c 91       	ld	r23, X
    11e2:	6d 93       	st	X+, r22
    11e4:	70 83       	st	Z, r23
    11e6:	62 91       	ld	r22, -Z
    11e8:	ae 17       	cp	r26, r30
    11ea:	bf 07       	cpc	r27, r31
    11ec:	c8 f3       	brcs	.-14     	; 0x11e0 <strrev+0x10>
    11ee:	08 95       	ret

000011f0 <_exit>:
    11f0:	f8 94       	cli

000011f2 <__stop_program>:
    11f2:	ff cf       	rjmp	.-2      	; 0x11f2 <__stop_program>
